{"version":3,"file":"static/js/9562.c09b7a13.chunk.js","mappings":"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","sources":["components/appEditor/AppEditor.tsx","layouts/pages/pageContainer/PageContainer.tsx","layouts/pages/pageContainer/PageContainer.module.scss","components/disqusThread/DisqusThread.tsx","pages/notificationsTestPage/NotificationsTestPage.module.scss","pages/notificationsTestPage/NotificationsTestPage.tsx","utils/scopedEval.ts","../node_modules/@ant-design/icons-svg/es/asn/ReloadOutlined.js","../node_modules/@ant-design/icons/es/icons/ReloadOutlined.js"],"sourcesContent":["import React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport Editor, { EditorProps, OnChange } from '@monaco-editor/react';\nimport useAppTheme from '../../hooks/useAppTheme';\nimport { Spin } from 'antd';\nimport classNames from 'classnames';\nimport * as monaco from 'monaco-editor';\nimport MonacoLanguage from '../../types/MonacoLanguage';\nimport { editor } from 'monaco-editor';\n\nconst loadingNode = <Spin size=\"large\" />;\n\nexport type AppOnChange = (value: string, ev: monaco.editor.IModelContentChangedEvent) => void;\n\nconst defaultOptions: Readonly<editor.IStandaloneEditorConstructionOptions> = {\n    minimap: { enabled: false }\n};\n\nexport interface AppEditorProps extends Omit<EditorProps, 'onChange'> {\n    onChange?: AppOnChange;\n    language?: MonacoLanguage;\n}\n\nconst AppEditor: FunctionComponent<AppEditorProps> = ({ className, loading, theme, onChange, options, ...props }) => {\n    const { isDarkMode } = useAppTheme();\n\n    const editorOptions = useMemo(\n        () => ({\n            ...defaultOptions,\n            ...options\n        }),\n        [options]\n    );\n\n    const handleChange = useCallback<OnChange>(\n        (value, ev) => {\n            onChange?.(value ?? '', ev);\n        },\n        [onChange]\n    );\n\n    return (\n        <Editor\n            theme={theme ?? (isDarkMode ? 'vs-dark' : 'light')}\n            className={classNames('app-monaco-editor', className)}\n            loading={loading ?? loadingNode}\n            onChange={handleChange}\n            options={editorOptions}\n            {...props}\n        />\n    );\n};\n\nexport default AppEditor;\n","import React, { ReactNode, useMemo } from 'react';\nimport styles from './PageContainer.module.scss';\nimport { Space, SpaceProps, Tag } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport { ClockCircleOutlined, WarningOutlined } from '@ant-design/icons';\nimport classNames from 'classnames';\nimport DisqusThread from '../../../components/disqusThread/DisqusThread';\n\nexport enum PageTag {\n    WIP = 'WIP',\n    NOT_WORKING = 'NOT_WORKING'\n}\n\nexport interface PageContainerProps extends Omit<SpaceProps, 'title'> {\n    contentRef?: React.Ref<HTMLDivElement>;\n    contentClassName?: string;\n    title?: ReactNode;\n    description?: ReactNode;\n    titleExtra?: ReactNode;\n    tags?: PageTag[];\n    noPadding?: boolean;\n    noContentPadding?: boolean;\n    withComments?: boolean;\n}\n\nconst getTagNodes = (key: number | string): Readonly<Record<PageTag, ReactNode>> => ({\n    [PageTag.WIP]: (\n        <Tag color=\"blue\" icon={<ClockCircleOutlined />} key={key}>\n            Work In Progress\n        </Tag>\n    ),\n    [PageTag.NOT_WORKING]: (\n        <Tag color=\"red\" icon={<WarningOutlined />} key={key}>\n            Not Working\n        </Tag>\n    )\n});\n\nconst renderTag = (tag: PageTag, index: number) => getTagNodes(index)[tag];\n\nconst PageContainer = React.forwardRef<HTMLDivElement, PageContainerProps>((props, ref) => {\n    const {\n        title,\n        description,\n        titleExtra,\n        tags,\n        noPadding,\n        noContentPadding,\n        children,\n        className,\n        contentClassName,\n        contentRef,\n        withComments,\n        ...restProps\n    } = props;\n\n    const renderedTags = useMemo(() => tags?.map(renderTag), [tags]);\n\n    return (\n        <div\n            ref={ref}\n            className={classNames(\n                styles.container,\n                {\n                    [styles.noPadding]: noPadding,\n                    [styles.noContentPadding]: noContentPadding\n                },\n                className\n            )}\n            {...restProps}\n        >\n            {tags?.length && <div>{renderedTags}</div>}\n            {title && (\n                <Space direction=\"horizontal\" size=\"middle\" className={styles.headingContainer}>\n                    <h1 className=\"mb-0\">{title}</h1>\n                    {titleExtra}\n                </Space>\n            )}\n            {description && <Paragraph className=\"mb-2\">{description}</Paragraph>}\n\n            <div className={classNames(styles.contentContainer, contentClassName)} ref={contentRef}>\n                {children}\n                {withComments && <DisqusThread className=\"mt-4\" />}\n            </div>\n        </div>\n    );\n});\n\nexport default PageContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PageContainer_container__0XdUl\",\"noPadding\":\"PageContainer_noPadding__8qKdC\",\"noContentPadding\":\"PageContainer_noContentPadding__e8KpM\",\"headingContainer\":\"PageContainer_headingContainer__oss+6\",\"contentContainer\":\"PageContainer_contentContainer__1pGdM\"};","import React, { FC, HTMLProps, useMemo, useRef } from 'react';\nimport { DiscussionEmbed } from 'disqus-react';\nimport useAppLocation from '../../hooks/useAppLocation';\nimport useAppSettings from '../../hooks/useAppSettings';\n\ntype Props = HTMLProps<HTMLDivElement>;\n\ntype DiscussionEmbedConfig = DiscussionEmbed['props']['config'];\n\n// const handleReactionClick = (event: MouseEvent) => {\n//     const item = event.target;\n//\n//     console.log('CLICK', {item});\n// };\n\nconst DisqusThread: FC<Props> = ({ children, ...props }) => {\n    const appRoute = useAppLocation();\n    const { isCommentsBlockHidden } = useAppSettings();\n\n    const discussionContainerRef = useRef<HTMLDivElement>(null);\n    const getDiscussion: () => HTMLDivElement | undefined = () => {\n        return (discussionContainerRef.current?.firstElementChild ?? undefined) as HTMLDivElement | undefined;\n    };\n\n    const config = useMemo<DiscussionEmbedConfig>(\n        () => ({\n            url: new URL(appRoute?.path ?? '', window.location.origin).toString(),\n            identifier: appRoute?.path,\n            language: navigator.language\n        }),\n        [appRoute]\n    );\n\n    // useEffect(() => {\n    //     debugger;\n    //     const discussion = getDiscussion();\n    //     if (!discussion) {\n    //         return;\n    //     }\n    //\n    //     const reactionItemsContainer = discussion.querySelector('.reaction-items');\n    //     if (!reactionItemsContainer) {\n    //         return;\n    //     }\n    //\n    //     const reactionItems: NodeListOf<HTMLElement> = reactionItemsContainer.querySelectorAll('.reaction-item.reaction-item__enabled:not(.reaction-item__selected)');\n    //\n    //     reactionItems.forEach(item => {\n    //         item.addEventListener('click', handleReactionClick);\n    //     });\n    //\n    //     return () => {\n    //         reactionItems.forEach(item => {\n    //             item.removeEventListener('click', handleReactionClick);\n    //         });\n    //     };\n    // }, []);\n\n    if (isCommentsBlockHidden) {\n        return null;\n    }\n\n    return (\n        <div {...props} ref={discussionContainerRef}>\n            <DiscussionEmbed shortname=\"mrgrd56\" config={config} />\n            {children}\n        </div>\n    );\n};\n\nexport default DisqusThread;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"NotificationsTestPage_container__xBGxp\"};","import React, { FunctionComponent, useCallback, useState } from 'react';\nimport PageContainer from '../../layouts/pages/pageContainer/PageContainer';\nimport { Button, Col, notification, Tooltip } from 'antd';\nimport Text from 'antd/lib/typography/Text';\nimport styles from './NotificationsTestPage.module.scss';\nimport { ReloadOutlined } from '@ant-design/icons';\nimport AppEditor from '../../components/appEditor/AppEditor';\nimport { editor } from 'monaco-editor';\nimport scopedEval from '../../utils/scopedEval';\nimport { BaseType } from 'antd/lib/typography/Base';\n\nconst editorOptions: editor.IStandaloneEditorConstructionOptions = {\n    minimap: { enabled: false },\n    fontFamily: 'JetBrains Mono'\n};\n\nconst permissionColors: Readonly<Record<NotificationPermission, BaseType | undefined>> = {\n    default: undefined,\n    denied: 'danger',\n    granted: 'success'\n};\n\nconst NotificationsTestPage: FunctionComponent = () => {\n    const [permission, setPermission] = useState<NotificationPermission>(Notification.permission);\n    const [notificationCreationJs, setNotificationCreationJs] = useState<string>(\"new Notification('Hello world')\");\n\n    const permissionColor = permissionColors[permission];\n\n    const updateNotificationPermission = useCallback(() => {\n        setPermission(Notification.permission);\n    }, []);\n\n    const handleRequestPermission = useCallback(async () => {\n        const givenPermission = await Notification.requestPermission();\n        notification.info({\n            message: `Given permission: ${givenPermission}`\n        });\n        setPermission(givenPermission);\n    }, []);\n\n    const createNotification = useCallback(async () => {\n        const createdNotification = scopedEval(notificationCreationJs);\n        if (!(createdNotification instanceof Notification)) {\n            notification.error({\n                message: `Created object is not an instance of Notification, got ${\n                    createdNotification?.constructor?.name ?? typeof notification\n                }`\n            });\n            return;\n        }\n\n        console.log(createdNotification);\n    }, [notificationCreationJs]);\n\n    return (\n        <PageContainer title=\"JS Notifications Test\">\n            <Col xs={23} md={20} lg={18} className={styles.container}>\n                <Text>\n                    <Tooltip title=\"Notification.permission\" placement=\"bottom\">\n                        <Text strong>Permission:</Text>\n                        <Text className=\"ms-1\" type={permissionColor}>\n                            {permission}\n                        </Text>\n                    </Tooltip>\n                    <Button\n                        icon={<ReloadOutlined />}\n                        size=\"small\"\n                        type=\"text\"\n                        className=\"ms-1\"\n                        onClick={updateNotificationPermission}\n                    />\n                </Text>\n                <Tooltip title=\"Notification.requestPermission\" placement=\"bottom\">\n                    <Button onClick={handleRequestPermission}>Request permission</Button>\n                </Tooltip>\n                <AppEditor\n                    language=\"javascript\"\n                    width=\"100%\"\n                    height={160}\n                    value={notificationCreationJs}\n                    onChange={setNotificationCreationJs}\n                    options={editorOptions}\n                />\n                <Button type=\"primary\" onClick={createNotification}>\n                    Send notification\n                </Button>\n            </Col>\n        </PageContainer>\n    );\n};\n\nexport default NotificationsTestPage;\n","const scopedEval = (expression: string, context: object = {}) => {\n    const evaluator = Function.apply(null, [\n        ...Object.keys(context),\n        'expression',\n        'return eval(\"expression = undefined;\" + expression)'\n    ]);\n    return evaluator.apply(null, [...Object.values(context), expression]);\n};\n\nexport default scopedEval;\n","// This icon file is generated automatically.\nvar ReloadOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M909.1 209.3l-56.4 44.1C775.8 155.1 656.2 92 521.9 92 290 92 102.3 279.5 102 511.5 101.7 743.7 289.8 932 521.9 932c181.3 0 335.8-115 394.6-276.1 1.5-4.2-.7-8.9-4.9-10.3l-56.7-19.5a8 8 0 00-10.1 4.8c-1.8 5-3.8 10-5.9 14.9-17.3 41-42.1 77.8-73.7 109.4A344.77 344.77 0 01655.9 829c-42.3 17.9-87.4 27-133.8 27-46.5 0-91.5-9.1-133.8-27A341.5 341.5 0 01279 755.2a342.16 342.16 0 01-73.7-109.4c-17.9-42.4-27-87.4-27-133.9s9.1-91.5 27-133.9c17.3-41 42.1-77.8 73.7-109.4 31.6-31.6 68.4-56.4 109.3-73.8 42.3-17.9 87.4-27 133.8-27 46.5 0 91.5 9.1 133.8 27a341.5 341.5 0 01109.3 73.8c9.9 9.9 19.2 20.4 27.8 31.4l-60.2 47a8 8 0 003 14.1l175.6 43c5 1.2 9.9-2.6 9.9-7.7l.8-180.9c-.1-6.6-7.8-10.3-13-6.2z\" } }] }, \"name\": \"reload\", \"theme\": \"outlined\" };\nexport default ReloadOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport ReloadOutlinedSvg from \"@ant-design/icons-svg/es/asn/ReloadOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar ReloadOutlined = function ReloadOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: ReloadOutlinedSvg\n  }));\n};\n\nReloadOutlined.displayName = 'ReloadOutlined';\nexport default /*#__PURE__*/React.forwardRef(ReloadOutlined);"],"names":["loadingNode","size","defaultOptions","minimap","enabled","className","loading","theme","onChange","options","props","isDarkMode","useAppTheme","editorOptions","useMemo","handleChange","useCallback","value","ev","classNames","PageTag","children","appRoute","useAppLocation","isCommentsBlockHidden","useAppSettings","discussionContainerRef","useRef","config","url","URL","path","window","location","origin","toString","identifier","language","navigator","ref","shortname","renderTag","tag","index","key","WIP","color","icon","NOT_WORKING","getTagNodes","React","title","description","titleExtra","tags","noPadding","noContentPadding","contentClassName","contentRef","withComments","restProps","renderedTags","map","styles","length","direction","fontFamily","permissionColors","default","undefined","denied","granted","useState","Notification","permission","setPermission","notificationCreationJs","setNotificationCreationJs","permissionColor","updateNotificationPermission","handleRequestPermission","requestPermission","givenPermission","notification","message","createNotification","createdNotification","scopedEval","constructor","name","console","log","xs","md","lg","placement","strong","type","onClick","width","height","expression","context","evaluator","Function","apply","Object","keys","values","ReloadOutlined","AntdIcon","_objectSpread","ReloadOutlinedSvg","displayName"],"sourceRoot":""}