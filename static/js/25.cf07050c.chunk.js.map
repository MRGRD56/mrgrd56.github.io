{"version":3,"file":"static/js/25.cf07050c.chunk.js","mappings":"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","sources":["components/appEditor/AppEditor.tsx","utils/copyText.ts","utils/copyBlob.ts","components/copyButton/CopyButton.tsx","webpack://mrgrd56.github.io/./src/pages/codeFormatterPage/CodeFormatterPage.module.scss?d21c","utils/formatCode/formatXml.ts","utils/formatCode/index.ts","pages/codeFormatterPage/CodeFormatterPage.tsx","../node_modules/@ant-design/icons-svg/es/asn/CopyOutlined.js","../node_modules/@ant-design/icons/es/icons/CopyOutlined.js"],"sourcesContent":["import React, { FunctionComponent, useCallback } from 'react';\r\nimport Editor, { EditorProps, OnChange } from '@monaco-editor/react';\r\nimport useAppTheme from '../../hooks/useAppTheme';\r\nimport { Spin } from 'antd';\r\nimport classNames from 'classnames';\r\nimport * as monaco from 'monaco-editor';\r\nimport MonacoLanguage from '../../types/MonacoLanguage';\r\n\r\nconst loadingNode = <Spin size=\"large\" />;\r\n\r\nexport type AppOnChange = (value: string, ev: monaco.editor.IModelContentChangedEvent) => void;\r\n\r\ninterface Props extends Omit<EditorProps, 'onChange'> {\r\n    onChange?: AppOnChange;\r\n    language?: MonacoLanguage;\r\n}\r\n\r\nconst AppEditor: FunctionComponent<Props> = ({ className, loading, theme, onChange, ...props }) => {\r\n    const { isDarkMode } = useAppTheme();\r\n\r\n    const handleChange = useCallback<OnChange>(\r\n        (value, ev) => {\r\n            onChange?.(value ?? '', ev);\r\n        },\r\n        [onChange]\r\n    );\r\n\r\n    return (\r\n        <Editor\r\n            theme={theme ?? (isDarkMode ? 'vs-dark' : 'light')}\r\n            className={classNames('app-monaco-editor', className)}\r\n            loading={loading ?? loadingNode}\r\n            onChange={handleChange}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\nexport default AppEditor;\r\n","const copyText = (text: string | undefined) => {\n    if (!text) {\n        return;\n    }\n\n    return navigator.clipboard.writeText(text);\n};\n\nexport default copyText;\n","const copyBlob = (blob: Blob) => {\n    return navigator.clipboard.write([\n        new ClipboardItem({\n            [blob.type]: blob\n        })\n    ]);\n};\n\nexport default copyBlob;\n","import React, { MouseEvent, MouseEventHandler, useRef, useState } from 'react';\nimport copyText from '../../utils/copyText';\nimport { Button, ButtonProps } from 'antd';\nimport { CheckOutlined, CopyOutlined } from '@ant-design/icons';\nimport { isNil, isString } from 'lodash';\nimport copyBlob from '../../utils/copyBlob';\n\ntype ContentType = string | Blob | null | undefined;\n\ninterface Props<T extends ContentType> extends Omit<ButtonProps, 'value'> {\n    value: T;\n    copyEmpty?: boolean;\n    onClick?: (event: MouseEvent<HTMLButtonElement>) => T;\n}\n\nfunction CopyButton<T extends ContentType>({ value, copyEmpty, children, onClick, icon, ...props }: Props<T>) {\n    const [isCopied, setIsCopied] = useState<boolean>(false);\n\n    const copiedTimeoutRef = useRef<NodeJS.Timeout>();\n\n    const handleClick: MouseEventHandler<HTMLButtonElement> = async (event) => {\n        const replacedValue = onClick?.(event);\n\n        const actualValue = replacedValue ?? value;\n\n        if (!actualValue && !copyEmpty) {\n            return;\n        }\n\n        if (copiedTimeoutRef.current) {\n            clearTimeout(copiedTimeoutRef.current);\n        }\n\n        if (isNil(actualValue) || isString(actualValue)) {\n            await copyText(actualValue ?? '');\n        }\n        if (actualValue instanceof Blob) {\n            await copyBlob(actualValue);\n        }\n\n        setIsCopied(true);\n        copiedTimeoutRef.current = setTimeout(() => {\n            setIsCopied(false);\n        }, 1000);\n    };\n\n    return (\n        <Button onClick={handleClick} icon={icon ?? (isCopied ? <CheckOutlined /> : <CopyOutlined />)} {...props}>\n            {children ?? 'Copy'}\n        </Button>\n    );\n}\n\nexport default CopyButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"antd-text-primary\":\"CodeFormatterPage_antd-text-primary__Jn6ta\",\"page\":\"CodeFormatterPage_page__USQLf\",\"container\":\"CodeFormatterPage_container__f9Z+o\",\"controlsContainer\":\"CodeFormatterPage_controlsContainer__gB0vb\",\"formatContainer\":\"CodeFormatterPage_formatContainer__0OaVd\",\"languageSelect\":\"CodeFormatterPage_languageSelect__T7F-h\",\"editor\":\"CodeFormatterPage_editor__GSZ17\"};","import CodeFormatter from './types/CodeFormatter';\n\nconst XML_MIME = 'application/xml';\n\nconst domParser = new DOMParser();\nconst xmlSerializer = new XMLSerializer();\n\nconst stylesheet = domParser.parseFromString(\n    [\n        '<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">',\n        '  <xsl:strip-space elements=\"*\"/>',\n        '  <xsl:template match=\"para[content-style][not(text())]\">', // change to just text() to strip space in text nodes\n        '    <xsl:value-of select=\"normalize-space(.)\"/>',\n        '  </xsl:template>',\n        '  <xsl:template match=\"node()|@*\">',\n        '    <xsl:copy><xsl:apply-templates select=\"node()|@*\"/></xsl:copy>',\n        '  </xsl:template>',\n        '  <xsl:output indent=\"yes\"/>',\n        '</xsl:stylesheet>'\n    ].join('\\n'),\n    'application/xml'\n);\n\nconst formatXml: CodeFormatter = (source) => {\n    const sourceDocument = domParser.parseFromString(source, XML_MIME);\n    const xsltProcessor = new XSLTProcessor();\n    xsltProcessor.importStylesheet(stylesheet);\n    const resultDocument = xsltProcessor.transformToDocument(sourceDocument);\n    return xmlSerializer.serializeToString(resultDocument);\n};\n\nexport default formatXml;\n","import FormattedLanguage from './types/FormattedLanguage';\nimport CodeFormatter from './types/CodeFormatter';\nimport formatXml from './formatXml';\n\nconst formatters: Readonly<Record<FormattedLanguage, CodeFormatter>> = {\n    xml: formatXml\n};\n\nconst formatCode = (language: FormattedLanguage, source: string): string => formatters[language](source);\n\nexport default formatCode;\n","import React, { FunctionComponent, useCallback, useRef, useState } from 'react';\nimport PageContainer from '../../layouts/pages/pageContainer/PageContainer';\nimport { OnMount } from '@monaco-editor/react';\nimport { Button, Col, Row } from 'antd';\nimport styles from './CodeFormatterPage.module.scss';\nimport MonacoLanguage from '../../types/MonacoLanguage';\nimport { useLocalstorageState } from 'rooks';\nimport { editor, languages } from 'monaco-editor';\nimport CopyButton from '../../components/copyButton/CopyButton';\nimport formatCode from '../../utils/formatCode';\nimport AppEditor from '../../components/appEditor/AppEditor';\nimport getLocalStorageKey from '../../utils/getLocalStorageKey';\nimport MonacoLanguageSelect from '../../components/MonacoLanguageSelect';\n\n// interface FormattedLanguage {\n//     prettierParser: prettier.BuiltInParserName,\n//     monacoLanguage: MonacoLanguage\n// }\n\n// type FormattedLanguagesMap = Record<BuiltInParserName, MonacoLanguage>;\n//\n// const formatterLanguagesMap: FormattedLanguagesMap = {\n//     'angular': 'typescript',\n//     'babel-flow': 'flow9',\n//     'babel-ts': 'typescript',\n//     'babel': 'javascript',\n//     'css': 'css',\n//     'espree': 'plaintext',\n//     'flow': 'flow9',\n//     'glimmer': 'plaintext',\n//     'graphql': 'graphql',\n//     'html': 'html',\n//     'json-stringify': 'json',\n//     'json': 'json',\n//     'json5': 'json',\n//     'less': 'less',\n//     'lwc': 'plaintext',\n//     'markdown': 'markdown',\n//     'mdx': 'markdown',\n//     'meriyah': 'plaintext',\n//     'scss': 'scss',\n//     'typescript': 'typescript',\n//     'vue': 'typescript',\n//     'yaml': 'yaml'\n// };\n//\n// window.prettier = prettier;\n\nconst monacoOptions: editor.IStandaloneEditorConstructionOptions = {\n    formatOnPaste: true\n};\n\nconst CodeFormatterPage: FunctionComponent = () => {\n    const [selectedLanguage, setSelectedLanguage] = useLocalstorageState<MonacoLanguage>(\n        getLocalStorageKey('code-formatter', 'selectedLanguage'),\n        'typescript'\n    );\n    const [code, setCode] = useState<string>('');\n\n    const monacoEditorRef = useRef<editor.IStandaloneCodeEditor>();\n\n    const handleMonacoMount = useCallback<OnMount>((editor, monaco) => {\n        monacoEditorRef.current = editor;\n\n        monaco.languages.registerDocumentFormattingEditProvider('xml', {\n            provideDocumentFormattingEdits(\n                model: editor.ITextModel,\n                options: languages.FormattingOptions\n            ): languages.ProviderResult<languages.TextEdit[]> {\n                return [\n                    {\n                        text: formatCode('xml', model.getValue()),\n                        range: model.getFullModelRange()\n                    }\n                ];\n            }\n        });\n    }, []);\n\n    const handleFormatClick = useCallback(() => {\n        monacoEditorRef.current?.getAction('editor.action.formatDocument').run();\n    }, []);\n\n    return (\n        <PageContainer title=\"Code Formatter\" className={styles.page} noContentPadding>\n            <div className={styles.container}>\n                <Col className={styles.controlsContainer}>\n                    <Row className={styles.formatContainer}>\n                        <MonacoLanguageSelect\n                            className={styles.languageSelect}\n                            value={selectedLanguage}\n                            onChange={setSelectedLanguage}\n                        />\n                        <Button type=\"primary\" className={styles.formatButton} onClick={handleFormatClick}>\n                            Format\n                        </Button>\n                        <CopyButton value={code} type=\"default\" />\n                    </Row>\n                </Col>\n                <AppEditor\n                    className={styles.editor}\n                    language={selectedLanguage}\n                    value={code}\n                    onChange={setCode}\n                    options={monacoOptions}\n                    onMount={handleMonacoMount}\n                />\n            </div>\n        </PageContainer>\n    );\n};\n\nexport default CodeFormatterPage;\n","// This icon file is generated automatically.\nvar CopyOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\" } }] }, \"name\": \"copy\", \"theme\": \"outlined\" };\nexport default CopyOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CopyOutlinedSvg from \"@ant-design/icons-svg/es/asn/CopyOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar CopyOutlined = function CopyOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CopyOutlinedSvg\n  }));\n};\n\nCopyOutlined.displayName = 'CopyOutlined';\nexport default /*#__PURE__*/React.forwardRef(CopyOutlined);"],"names":["loadingNode","size","className","loading","theme","onChange","props","isDarkMode","useAppTheme","handleChange","useCallback","value","ev","classNames","text","navigator","clipboard","writeText","blob","write","ClipboardItem","type","copyEmpty","children","onClick","icon","useState","isCopied","setIsCopied","copiedTimeoutRef","useRef","handleClick","event","replacedValue","actualValue","current","clearTimeout","isNil","isString","copyText","Blob","copyBlob","setTimeout","CheckOutlined","CopyOutlined","domParser","DOMParser","xmlSerializer","XMLSerializer","stylesheet","parseFromString","join","formatters","xml","source","sourceDocument","xsltProcessor","XSLTProcessor","importStylesheet","resultDocument","transformToDocument","serializeToString","language","monacoOptions","formatOnPaste","useLocalstorageState","getLocalStorageKey","selectedLanguage","setSelectedLanguage","code","setCode","monacoEditorRef","handleMonacoMount","editor","monaco","languages","registerDocumentFormattingEditProvider","provideDocumentFormattingEdits","model","options","formatCode","getValue","range","getFullModelRange","handleFormatClick","getAction","run","PageContainer","title","styles","noContentPadding","MonacoLanguageSelect","CopyButton","AppEditor","onMount","ref","React","AntdIcon","_objectSpread","CopyOutlinedSvg","displayName"],"sourceRoot":""}