"use strict";(self.webpackChunkmrgrd56_github_io=self.webpackChunkmrgrd56_github_io||[]).push([[3551],{23551:function(n,e,t){t.r(e),e.default='import _ = require("../index");\ndeclare module "../index" {\n    interface LoDashStatic {\n        /**\n         * Converts string to camel case.\n         *\n         * @param string The string to convert.\n         * @return Returns the camel cased string.\n         */\n        camelCase(string?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.camelCase\n         */\n        camelCase(): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.camelCase\n         */\n        camelCase(): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Converts the first character of string to upper case and the remaining to lower case.\n         *\n         * @param string The string to capitalize.\n         * @return Returns the capitalized string.\n         */\n        capitalize(string?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.capitalize\n         */\n        capitalize(): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.capitalize\n         */\n        capitalize(): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Deburrs string by converting latin-1 supplementary letters to basic latin letters and removing combining\n         * diacritical marks.\n         *\n         * @param string The string to deburr.\n         * @return Returns the deburred string.\n         */\n        deburr(string?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.deburr\n         */\n        deburr(): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.deburr\n         */\n        deburr(): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Checks if string ends with the given target string.\n         *\n         * @param string The string to search.\n         * @param target The string to search for.\n         * @param position The position to search from.\n         * @return Returns true if string ends with target, else false.\n         */\n        endsWith(string?: string, target?: string, position?: number): boolean;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.endsWith\n         */\n        endsWith(target?: string, position?: number): boolean;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.endsWith\n         */\n        endsWith(target?: string, position?: number): PrimitiveChain<boolean>;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Converts the characters "&", "<", ">", \'"\', "\'", and "`" in string to their corresponding HTML entities.\n         *\n         * Note: No other characters are escaped. To escape additional characters use a third-party library like he.\n         *\n         * hough the ">" character is escaped for symmetry, characters like ">" and "/" don\u2019t need escaping in HTML\n         * and have no special meaning unless they\'re part of a tag or unquoted attribute value. See Mathias Bynens\u2019s\n         * article (under "semi-related fun fact") for more details.\n         *\n         * Backticks are escaped because in IE < 9, they can break out of attribute values or HTML comments. See #59,\n         * #102, #108, and #133 of the HTML5 Security Cheatsheet for more details.\n         *\n         * When working with HTML you should always quote attribute values to reduce XSS vectors.\n         *\n         * @param string The string to escape.\n         * @return Returns the escaped string.\n         */\n        escape(string?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.escape\n         */\n        escape(): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.escape\n         */\n        escape(): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Escapes the RegExp special characters "^", "$", "\\", ".", "*", "+", "?", "(", ")", "[", "]",\n         * "{", "}", and "|" in string.\n         *\n         * @param string The string to escape.\n         * @return Returns the escaped string.\n         */\n        escapeRegExp(string?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.escapeRegExp\n         */\n        escapeRegExp(): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.escapeRegExp\n         */\n        escapeRegExp(): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Converts string to kebab case.\n         *\n         * @param string The string to convert.\n         * @return Returns the kebab cased string.\n         */\n        kebabCase(string?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.kebabCase\n         */\n        kebabCase(): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.kebabCase\n         */\n        kebabCase(): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Converts `string`, as space separated words, to lower case.\n         *\n         * @param string The string to convert.\n         * @return Returns the lower cased string.\n         */\n        lowerCase(string?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.lowerCase\n         */\n        lowerCase(): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.lowerCase\n         */\n        lowerCase(): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Converts the first character of `string` to lower case.\n         *\n         * @param string The string to convert.\n         * @return Returns the converted string.\n         */\n        lowerFirst(string?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.lowerFirst\n         */\n        lowerFirst(): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.lowerFirst\n         */\n        lowerFirst(): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Pads string on the left and right sides if it\u2019s shorter than length. Padding characters are truncated if\n         * they can\u2019t be evenly divided by length.\n         *\n         * @param string The string to pad.\n         * @param length The padding length.\n         * @param chars The string used as padding.\n         * @return Returns the padded string.\n         */\n        pad(string?: string, length?: number, chars?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.pad\n         */\n        pad(length?: number, chars?: string): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.pad\n         */\n        pad(length?: number, chars?: string): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Pads string on the right side if it\u2019s shorter than length. Padding characters are truncated if they exceed\n         * length.\n         *\n         * @param string The string to pad.\n         * @param length The padding length.\n         * @param chars The string used as padding.\n         * @return Returns the padded string.\n         */\n        padEnd(string?: string, length?: number, chars?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.padEnd\n         */\n        padEnd(length?: number, chars?: string): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.padEnd\n         */\n        padEnd(length?: number, chars?: string): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Pads string on the left side if it\u2019s shorter than length. Padding characters are truncated if they exceed\n         * length.\n         *\n         * @param string The string to pad.\n         * @param length The padding length.\n         * @param chars The string used as padding.\n         * @return Returns the padded string.\n         */\n        padStart(string?: string, length?: number, chars?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.padStart\n         */\n        padStart(length?: number, chars?: string): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.padStart\n         */\n        padStart(length?: number, chars?: string): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Converts string to an integer of the specified radix. If radix is undefined or 0, a radix of 10 is used\n         * unless value is a hexadecimal, in which case a radix of 16 is used.\n         *\n         * Note: This method aligns with the ES5 implementation of parseInt.\n         *\n         * @param string The string to convert.\n         * @param radix The radix to interpret value by.\n         * @return Returns the converted integer.\n         */\n        parseInt(string: string, radix?: number): number;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.parseInt\n         */\n        parseInt(radix?: number): number;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.parseInt\n         */\n        parseInt(radix?: number): PrimitiveChain<number>;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Repeats the given string n times.\n         *\n         * @param string The string to repeat.\n         * @param n The number of times to repeat the string.\n         * @return Returns the repeated string.\n         */\n        repeat(string?: string, n?: number): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.repeat\n         */\n        repeat(n?: number): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.repeat\n         */\n        repeat(n?: number): StringChain;\n    }\n    type ReplaceFunction = (match: string, ...args: any[]) => string;\n\n    interface LoDashStatic {\n        /**\n         * Replaces matches for pattern in string with replacement.\n         *\n         * Note: This method is based on String#replace.\n         *\n         * @return Returns the modified string.\n         */\n        replace(string: string, pattern: RegExp | string, replacement: ReplaceFunction | string): string;\n        /**\n         * @see _.replace\n         */\n        replace(pattern: RegExp | string, replacement: ReplaceFunction | string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.replace\n         */\n        replace(pattern: RegExp | string, replacement: ReplaceFunction | string): string;\n        /**\n         * @see _.replace\n         */\n        replace(replacement: ReplaceFunction | string): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.replace\n         */\n        replace(pattern: RegExp | string, replacement: ReplaceFunction | string): StringChain;\n        /**\n         * @see _.replace\n         */\n        replace(replacement: ReplaceFunction | string): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Converts string to snake case.\n         *\n         * @param string The string to convert.\n         * @return Returns the snake cased string.\n         */\n        snakeCase(string?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.snakeCase\n         */\n        snakeCase(): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.snakeCase\n         */\n        snakeCase(): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Splits string by separator.\n         *\n         * Note: This method is based on String#split.\n         *\n         * @param string The string to split.\n         * @param separator The separator pattern to split by.\n         * @param limit The length to truncate results to.\n         * @return Returns the new array of string segments.\n         */\n        split(string: string | null | undefined, separator?: RegExp | string, limit?: number): string[];\n        /**\n         * @see _.split\n         */\n        split(string: string | null | undefined, index: string | number, guard: object): string[];\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.split\n         */\n        split(separator?: RegExp | string, limit?: number): Collection<string>;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.split\n         */\n        split(separator?: RegExp | string, limit?: number): CollectionChain<string>;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Converts string to start case.\n         *\n         * @param string The string to convert.\n         * @return Returns the start cased string.\n         */\n        startCase(string?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.startCase\n         */\n        startCase(): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.startCase\n         */\n        startCase(): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Checks if string starts with the given target string.\n         *\n         * @param string The string to search.\n         * @param target The string to search for.\n         * @param position The position to search from.\n         * @return Returns true if string starts with target, else false.\n         */\n        startsWith(string?: string, target?: string, position?: number): boolean;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.startsWith\n         */\n        startsWith(target?: string, position?: number): boolean;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.startsWith\n         */\n        startsWith(target?: string, position?: number): PrimitiveChain<boolean>;\n    }\n\n    interface TemplateOptions extends TemplateSettings {\n        /**\n         * @see _.sourceURL\n         */\n        sourceURL?: string | undefined;\n    }\n    interface TemplateExecutor {\n        (data?: object): string;\n        /**\n         * @see _.source\n         */\n        source: string;\n    }\n    interface LoDashStatic {\n        /**\n         * Creates a compiled template function that can interpolate data properties in "interpolate" delimiters,\n         * HTML-escape interpolated data properties in "escape" delimiters, and execute JavaScript in "evaluate"\n         * delimiters. Data properties may be accessed as free variables in the template. If a setting object is\n         * provided it takes precedence over _.templateSettings values.\n         *\n         * Note: In the development build _.template utilizes\n         * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl) for easier\n         * debugging.\n         *\n         * For more information on precompiling templates see\n         * [lodash\'s custom builds documentation](https://lodash.com/custom-builds).\n         *\n         * For more information on Chrome extension sandboxes see\n         * [Chrome\'s extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n         *\n         * @param string The template string.\n         * @param options The options object.\n         * @param options.escape The HTML "escape" delimiter.\n         * @param options.evaluate The "evaluate" delimiter.\n         * @param options.imports An object to import into the template as free variables.\n         * @param options.interpolate The "interpolate" delimiter.\n         * @param options.sourceURL The sourceURL of the template\'s compiled source.\n         * @param options.variable The data object variable name.\n         * @return Returns the compiled template function.\n         */\n        template(string?: string, options?: TemplateOptions): TemplateExecutor;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.template\n         */\n        template(options?: TemplateOptions): TemplateExecutor;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.template\n         */\n        template(options?: TemplateOptions): FunctionChain<TemplateExecutor>;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Converts `string`, as a whole, to lower case.\n         *\n         * @param string The string to convert.\n         * @return Returns the lower cased string.\n         */\n        toLower(string?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.toLower\n         */\n        toLower(): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.toLower\n         */\n        toLower(): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Converts `string`, as a whole, to upper case.\n         *\n         * @param string The string to convert.\n         * @return Returns the upper cased string.\n         */\n        toUpper(string?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.toUpper\n         */\n        toUpper(): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.toUpper\n         */\n        toUpper(): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Removes leading and trailing whitespace or specified characters from string.\n         *\n         * @param string The string to trim.\n         * @param chars The characters to trim.\n         * @return Returns the trimmed string.\n         */\n        trim(string?: string, chars?: string): string;\n        /**\n         * @see _.trim\n         */\n        trim(string: string, index: string | number, guard: object): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.trim\n         */\n        trim(chars?: string): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.trim\n         */\n        trim(chars?: string): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Removes trailing whitespace or specified characters from string.\n         *\n         * @param string The string to trim.\n         * @param chars The characters to trim.\n         * @return Returns the trimmed string.\n         */\n        trimEnd(string?: string, chars?: string): string;\n        /**\n         * @see _.trimEnd\n         */\n        trimEnd(string: string, index: string | number, guard: object): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.trimEnd\n         */\n        trimEnd(chars?: string): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.trimEnd\n         */\n        trimEnd(chars?: string): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Removes leading whitespace or specified characters from string.\n         *\n         * @param string The string to trim.\n         * @param chars The characters to trim.\n         * @return Returns the trimmed string.\n         */\n        trimStart(string?: string, chars?: string): string;\n        /**\n         * @see _.trimStart\n         */\n        trimStart(string: string, index: string | number, guard: object): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.trimStart\n         */\n        trimStart(chars?: string): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.trimStart\n         */\n        trimStart(chars?: string): StringChain;\n    }\n\n    interface TruncateOptions {\n        /**\n         * @see _.length\n         */\n        length?: number | undefined;\n        /**\n         * @see _.omission\n         */\n        omission?: string | undefined;\n        /**\n         * @see _.separator\n         */\n        separator?: string | RegExp | undefined;\n    }\n    interface LoDashStatic {\n        /**\n         * Truncates string if it\u2019s longer than the given maximum string length. The last characters of the truncated\n         * string are replaced with the omission string which defaults to "\u2026".\n         *\n         * @param string The string to truncate.\n         * @param options The options object or maximum string length.\n         * @return Returns the truncated string.\n         */\n        truncate(string?: string, options?: TruncateOptions): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.truncate\n         */\n        truncate(options?: TruncateOptions): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.truncate\n         */\n        truncate(options?: TruncateOptions): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * The inverse of _.escape; this method converts the HTML entities &amp;, &lt;, &gt;, &quot;, &#39;, and &#96;\n         * in string to their corresponding characters.\n         *\n         * Note: No other HTML entities are unescaped. To unescape additional HTML entities use a third-party library\n         * like he.\n         *\n         * @param string The string to unescape.\n         * @return Returns the unescaped string.\n         */\n        unescape(string?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.unescape\n         */\n        unescape(): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.unescape\n         */\n        unescape(): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Converts `string`, as space separated words, to upper case.\n         *\n         * @param string The string to convert.\n         * @return Returns the upper cased string.\n         */\n        upperCase(string?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.upperCase\n         */\n        upperCase(): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.upperCase\n         */\n        upperCase(): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Converts the first character of `string` to upper case.\n         *\n         * @param string The string to convert.\n         * @return Returns the converted string.\n         */\n        upperFirst(string?: string): string;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.upperFirst\n         */\n        upperFirst(): string;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.upperFirst\n         */\n        upperFirst(): StringChain;\n    }\n\n    interface LoDashStatic {\n        /**\n         * Splits `string` into an array of its words.\n         *\n         * @param string The string to inspect.\n         * @param pattern The pattern to match words.\n         * @return Returns the words of `string`.\n         */\n        words(string?: string, pattern?: string | RegExp): string[];\n        /**\n         * @see _.words\n         */\n        words(string: string, index: string | number, guard: object): string[];\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.words\n         */\n        words(pattern?: string | RegExp): string[];\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.words\n         */\n        words(pattern?: string | RegExp): CollectionChain<string>;\n    }\n}\n'}}]);
//# sourceMappingURL=3551.34dfc9bc.chunk.js.map