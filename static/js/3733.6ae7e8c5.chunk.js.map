{"version":3,"file":"static/js/3733.6ae7e8c5.chunk.js","mappings":"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,CAAC,yGAA0G,QAC3G,CAAC,8FAA+F,QAChG,CAAC,0BAA2B,OAC5B,CAAC,+BAAgC,QACjC,CAAC,sBAAuB,QACxB,CAAC,oBAAqB,UACtB,CAAC,eAAgB,MACjB,CAAC,YAAa,MACd,CAAC,QAAS,QACV3E,SAAQ,SAAU2E,GAClB,OAAOqB,EAAUQ,gBAAgB7B,EAAK,GAAIA,EAAK,OAMjD,CAEE,YACA,SACA,SACA,MACA,WACA,UACA,OACA,YACA,QACA,YACA,QACA,QACA,QACA,QACA,UACA,SACA,OACA,OACA,UACA,QACA,WACA,MACA,WACA,cACA,QACA,SACA,WACA,YACA,MACA,SACA,YACA,YACA,YACA,WACA,WACA,MACA,UACA,UACA,WACA,WACA,eACA,SACA,SACA,YACA,WACA,YACA,cACA,QACA,UACA,QACA,SACA,aACA,YACA,WACA,OACA,QACA,OACA,QACA,QACA,MACA,QACA,OACA,OACA,YACA,OACA,WACA,SACA,SACA,YACA,WACA,OACA,WACA,OACA,SACA,WACA,SACA,SACA,WACA,SACA,WACA,UACA,QACA,QACA,SACA,UACA,iBACA,QACA,OACA,SACA,UACA,UACA,aACA,WACA,MACA,kBAEA,gBACA,SACA,SACA,YACA,WACA,QACA,WACA3E,QAAQgG,EAAUS,oBAEbT,EA/eYA","sources":["hooks/useChangeState.ts","hooks/useChangeAnyStateHandler.ts","hooks/useChangeStateHandler.ts","pages/jsonToTypeScriptPage/types/ExportType.ts","pages/jsonToTypeScriptPage/types/JsonToTypeScriptConversionOptions.ts","pages/jsonToTypeScriptPage/types/common.ts","pages/jsonToTypeScriptPage/types/json.ts","pages/jsonToTypeScriptPage/utils/getTypeScriptTypeReference.ts","utils/isValidJsIdentifier.ts","pages/jsonToTypeScriptPage/types/JsonToTypeScriptConversionSelectableOptions.ts","pages/jsonToTypeScriptPage/types/typescript.ts","pages/jsonToTypeScriptPage/utils/getTypeScriptUnion.ts","pages/jsonToTypeScriptPage/utils/mergeTypeScriptTypes.ts","pages/jsonToTypeScriptPage/utils/mergeTypeScriptTypesList.ts","pages/jsonToTypeScriptPage/utils/getTypeScriptType.ts","pages/jsonToTypeScriptPage/utils/getJsonType.ts","pages/jsonToTypeScriptPage/utils/getAllTypeScriptTypeInnerDeclarableTypes.ts","pages/jsonToTypeScriptPage/utils/getAllTypeScriptTypeDeclarations.ts","pages/jsonToTypeScriptPage/utils/convertJsonToTypeScript.ts","utils/capitalizeFirst.ts","utils/pascalCase.ts","webpack://mrgrd56.github.io/./src/pages/jsonToTypeScriptPage/components/JsonToTypeScriptSettings.module.scss?33dc","pages/jsonToTypeScriptPage/components/JsonToTypeScriptSettings.tsx","utils/screamingSnakeCase.ts","pages/jsonToTypeScriptPage/JsonToTypeScriptPage.tsx","utils/mapObject.ts","../node_modules/pluralize/pluralize.js"],"sourcesContent":["import { Dispatch, SetStateAction, useCallback } from 'react';\n\nconst useChangeState = <S extends object>(setState: Dispatch<SetStateAction<S>>) => {\n    return useCallback(<K extends keyof S>(key: K, value: S[K]) => {\n        setState((state) => ({\n            ...state,\n            [key]: value\n        }));\n    }, []);\n};\n\nexport default useChangeState;\n","import { Dispatch, SetStateAction } from 'react';\nimport { isObject } from 'lodash';\nimport call from '../utils/call';\nimport ObjectKey from '../types/common/ObjectKey';\n\nexport interface TypedChangeEvent<T, P extends ObjectKey> {\n    target: {\n        [key in P]: T;\n    };\n}\n\nexport const isChangeEvent = (value: unknown): value is TypedChangeEvent<unknown, ObjectKey> => {\n    return isObject(value) && 'target' in value;\n};\n\nconst useChangeAnyStateHandler = <S, P extends ObjectKey>(\n    setState: Dispatch<SetStateAction<S>>,\n    property: P = 'value' as P\n) => {\n    return (value: TypedChangeEvent<S, P> | S) => {\n        const actualValue = call(() => {\n            if (isChangeEvent(value)) {\n                const event = value as TypedChangeEvent<S, P>;\n                return event.target[property];\n            }\n\n            return value;\n        });\n\n        setState(actualValue);\n    };\n};\n\nexport default useChangeAnyStateHandler;\n","import { Dispatch, SetStateAction, useCallback } from 'react';\nimport call from '../utils/call';\nimport useChangeState from './useChangeState';\nimport { isChangeEvent, TypedChangeEvent } from './useChangeAnyStateHandler';\nimport ObjectKey from '../types/common/ObjectKey';\n\nconst useChangeStateHandler = <S extends object, P extends ObjectKey = 'value'>(\n    setState: Dispatch<SetStateAction<S>>,\n    property: P = 'value' as P\n) => {\n    const changeState = useChangeState(setState);\n\n    return useCallback(\n        <K extends keyof S, T extends S[K]>(key: K) => {\n            return (value: TypedChangeEvent<T, P> | T) => {\n                const actualValue = call(() => {\n                    if (isChangeEvent(value)) {\n                        const event = value as TypedChangeEvent<T, P>;\n                        return event.target[property];\n                    }\n\n                    return value;\n                });\n\n                changeState(key, actualValue);\n            };\n        },\n        [changeState]\n    );\n};\n\nexport default useChangeStateHandler;\n","enum ExportType {\n    NONE = 'NONE',\n    ES_MODULE = 'ES_MODULE',\n    COMMONJS = 'COMMONJS'\n}\n\nexport default ExportType;\n","import ExportType from './ExportType';\n\nexport enum NullType {\n    NULL = 'null',\n    UNDEFINED = 'undefined'\n}\n\nexport enum UnknownType {\n    UNKNOWN = 'unknown',\n    ANY = 'any'\n}\n\nexport enum ObjectDeclaration {\n    INTERFACE = 'INTERFACE',\n    TYPE = 'TYPE'\n}\n\ninterface JsonToTypeScriptConversionOptions {\n    exportType?: ExportType;\n    isReversedOrder?: boolean;\n    fieldNameTransformer?: (fieldName: string) => string;\n    typeNameTransformer?: (typeName: string) => string;\n    rootTypeName: string;\n    isTuplesEnabled?: boolean;\n    nullType?: NullType;\n    unknownType?: UnknownType;\n    objectDeclaration?: ObjectDeclaration;\n}\n\nexport default JsonToTypeScriptConversionOptions;\n","export abstract class IObject<T> {\n    protected constructor(public readonly fields: Record<string, T>) {}\n}\n\nexport abstract class IArray<T> {\n    protected constructor(public readonly types: T[]) {}\n}\n\nexport type IType<\n    TPrimitive,\n    TObject extends IObject<IType<TPrimitive, TObject, TArray>>,\n    TArray extends IArray<IType<TPrimitive, TObject, TArray>>\n> = TPrimitive | TObject | TArray;\n","import { IArray, IObject, IType } from './common';\n\nexport type JsonPrimitive = 'string' | 'number' | 'boolean' | 'null';\n\nexport class JsonObject extends IObject<JsonType> {\n    public constructor(public readonly fields: Record<string, JsonType>) {\n        super(fields);\n    }\n}\n\nexport class JsonArray extends IArray<JsonType> {\n    public constructor(public readonly types: JsonType[]) {\n        super(types);\n    }\n}\n\nexport type JsonType = IType<JsonPrimitive, JsonObject, JsonArray>;\n","import { TypeScriptType } from '../types/typescript';\nimport { isString } from 'lodash';\nimport JsonToTypeScriptConversionOptions from '../types/JsonToTypeScriptConversionOptions';\n\nconst getTypeScriptTypeReference = (type: TypeScriptType, options: JsonToTypeScriptConversionOptions): string => {\n    if (isString(type)) {\n        if (type === 'null') {\n            return options.nullType ?? type;\n        }\n\n        return type;\n    }\n\n    return type.stringifyReference(options);\n};\n\nexport default getTypeScriptTypeReference;\n","const isValidJsIdentifier = (value: string) => {\n    return regex.test(value);\n};\n\nexport const isValidTsTypeFieldName = (value: string) => {\n    return isValidJsIdentifier(value) || additionalTsRegex.test(value);\n};\n\nexport default isValidJsIdentifier;\n\n/* eslint-disable */\nconst regex =\n    /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/;\nconst additionalTsRegex = /^\\d+$/;\n","import JsonToTypeScriptConversionOptions from './JsonToTypeScriptConversionOptions';\n\nexport enum NameTransformer {\n    NONE = 'NONE',\n    CAMEL_CASE = 'CAMEL_CASE',\n    PASCAL_CASE = 'PASCAL_CASE',\n    SNAKE_CASE = 'SNAKE_CASE',\n    SCREAMING_SNAKE_CASE = 'SCREAMING_SNAKE_CASE',\n    KEBAB_CASE = 'KEBAB_CASE'\n}\n\ninterface JsonToTypeScriptConversionSelectableOptions\n    extends Required<Omit<JsonToTypeScriptConversionOptions, 'typeNameTransformer' | 'fieldNameTransformer'>> {\n    fieldNameTransformer: NameTransformer;\n    typeNameTransformer: NameTransformer;\n}\n\nexport default JsonToTypeScriptConversionSelectableOptions;\n","import { JsonPrimitive } from './json';\nimport getTypeScriptTypeReference from '../utils/getTypeScriptTypeReference';\nimport mapObject from '../../../utils/mapObject';\nimport ExportType from './ExportType';\nimport { filter, isObject, isString } from 'lodash';\nimport JsonToTypeScriptConversionOptions, { ObjectDeclaration } from './JsonToTypeScriptConversionOptions';\nimport isValidJsIdentifier, { isValidTsTypeFieldName } from '../../../utils/isValidJsIdentifier';\n\nexport interface ITypeScriptType {\n    stringifyReference(options: JsonToTypeScriptConversionOptions): string;\n}\n\nexport interface IDeclarable {\n    stringifyDeclarationBody(options: JsonToTypeScriptConversionOptions): string;\n}\n\nexport interface IDeclarableTypeScriptType extends IDeclarable {\n    name: string;\n    stringifyDeclaration(options: JsonToTypeScriptConversionOptions): string;\n}\n\nexport class DeclarableTypeScriptType implements IDeclarableTypeScriptType {\n    constructor(name: string, type: IDeclarableTypeScriptType | TypeScriptType) {\n        this.name = name;\n        this.type = type;\n    }\n\n    public readonly name: string;\n    private readonly type: IDeclarableTypeScriptType | TypeScriptType;\n\n    stringifyDeclaration(options: JsonToTypeScriptConversionOptions): string {\n        if (isObject(this.type) && 'stringifyDeclaration' in this.type) {\n            return this.type.stringifyDeclaration(options);\n        }\n\n        return `${getExportKeyword(options.exportType)}type ${stringifyTypeName(\n            this.name\n        )} = ${this.stringifyDeclarationBody(options)};`;\n    }\n\n    stringifyDeclarationBody(options: JsonToTypeScriptConversionOptions): string {\n        if (isString(this.type)) {\n            return getTypeScriptTypeReference(this.type, options);\n        }\n\n        return 'stringifyDeclarationBody' in this.type\n            ? this.type.stringifyDeclarationBody(options)\n            : 'stringifyReference' in this.type\n            ? this.type.stringifyReference(options)\n            : '';\n    }\n}\n\nexport class TypeScriptUnknown implements ITypeScriptType {\n    public readonly isUnknown = true;\n\n    stringifyReference(options: JsonToTypeScriptConversionOptions): string {\n        return options.unknownType ?? 'unknown';\n    }\n}\n\nexport class TypeScriptObjectField implements IDeclarable {\n    public constructor(public readonly type: TypeScriptType, public readonly isOptional = false) {}\n\n    stringifyDeclarationBody(options: JsonToTypeScriptConversionOptions): string {\n        return `${this.isOptional ? '?' : ''}: ${getTypeScriptTypeReference(this.type, options)}`;\n    }\n}\n\nexport class TypeScriptObject implements ITypeScriptType, IDeclarableTypeScriptType {\n    public constructor(public name: string, public readonly fields: Record<string, TypeScriptObjectField>) {}\n\n    stringifyDeclaration(options: JsonToTypeScriptConversionOptions): string {\n        const exportKeyword = getExportKeyword(options.exportType);\n        const name = this.stringifyReference(options);\n        const declarationBody = this.stringifyDeclarationBody(options);\n\n        const declarationType = options.objectDeclaration ?? ObjectDeclaration.INTERFACE;\n\n        const declarations: Readonly<Record<ObjectDeclaration, string>> = {\n            [ObjectDeclaration.INTERFACE]: `${exportKeyword}interface ${name} ${declarationBody}`,\n            [ObjectDeclaration.TYPE]: `${exportKeyword}type ${name} = ${declarationBody};`\n        };\n\n        return declarations[declarationType];\n    }\n\n    stringifyDeclarationBody(options: JsonToTypeScriptConversionOptions): string {\n        return (\n            '{\\n' +\n            mapObject(this.fields, (key, field) => {\n                return `    ${stringifyFieldName(key)}${field.stringifyDeclarationBody(options)};`;\n            }).join('\\n') +\n            '\\n}'\n        );\n    }\n\n    stringifyReference(options: JsonToTypeScriptConversionOptions): string {\n        return stringifyTypeName(this.name);\n    }\n}\n\nexport class TypeScriptArray implements ITypeScriptType {\n    public constructor(public readonly type: TypeScriptType) {}\n\n    stringifyReference(options: JsonToTypeScriptConversionOptions): string {\n        const typeReference = getTypeScriptTypeReference(this.type, options);\n\n        if (this.type instanceof TypeScriptUnion) {\n            return `Array<${typeReference}>`;\n        }\n\n        return `${typeReference}[]`;\n    }\n}\n\nexport abstract class TypeScriptTypesCombination implements ITypeScriptType {\n    protected constructor(public name: string, public readonly types: TypeScriptType[]) {}\n\n    abstract stringifyReference(options: JsonToTypeScriptConversionOptions): string;\n}\n\nexport class TypeScriptUnion extends TypeScriptTypesCombination {\n    //, IDeclarableTypeScriptType {\n    public constructor(public name: string, public readonly types: TypeScriptType[]) {\n        super(name, types);\n    }\n\n    // stringifyDeclaration(exportType?: ExportType): string {\n    //     return `${getExportKeyword(exportType)}type ${this.name} = ${this.stringifyDeclarationBody()};`;\n    // }\n\n    stringifyDeclarationBody(options: JsonToTypeScriptConversionOptions): string {\n        return this.types.map((type) => getTypeScriptTypeReference(type, options)).join(' | ');\n    }\n\n    stringifyReference(options: JsonToTypeScriptConversionOptions): string {\n        return this.stringifyDeclarationBody(options);\n    }\n}\n\nexport class TypeScriptTuple extends TypeScriptTypesCombination {\n    public constructor(public name: string, public readonly types: TypeScriptType[]) {\n        super(name, types);\n    }\n\n    stringifyDeclarationBody(options: JsonToTypeScriptConversionOptions): string {\n        return '[' + this.types.map((type) => getTypeScriptTypeReference(type, options)).join(', ') + ']';\n    }\n\n    stringifyReference(options: JsonToTypeScriptConversionOptions): string {\n        return this.stringifyDeclarationBody(options);\n    }\n}\n\nexport type TypeScriptType =\n    | JsonPrimitive\n    | TypeScriptObject\n    | TypeScriptArray\n    | TypeScriptUnion\n    | TypeScriptTuple\n    | TypeScriptUnknown;\n\nconst getExportKeyword = (exportType: ExportType = ExportType.NONE) => {\n    return {\n        [ExportType.NONE]: '',\n        [ExportType.ES_MODULE]: 'export ',\n        [ExportType.COMMONJS]: 'module.exports = '\n    }[exportType];\n};\n\nconst stringifyFieldName = (name: string) => {\n    if (isValidTsTypeFieldName(name)) {\n        return name;\n    }\n\n    return `'${name}'`;\n};\n\nconst stringifyTypeName = (name: string) => {\n    if (isValidJsIdentifier(name)) {\n        return name;\n    }\n\n    let result = name;\n\n    if (!result?.trim()) {\n        result = 'Type';\n    }\n\n    if (/^\\d$/.test(result[0])) {\n        result = 'N' + result;\n    }\n\n    return filter(result, isValidTsTypeFieldName).join('');\n};\n","import { TypeScriptType, TypeScriptUnion, TypeScriptUnknown } from '../types/typescript';\nimport { remove } from 'lodash';\n\nconst getTypeScriptUnion = (name: string, types: TypeScriptType[]): TypeScriptType => {\n    if (types.length > 1) {\n        remove(types, (type) => type instanceof TypeScriptUnknown);\n    }\n\n    if (types.length === 0) {\n        return new TypeScriptUnknown();\n    }\n    if (types.length === 1) {\n        return types[0];\n    }\n\n    return new TypeScriptUnion(name, types);\n};\n\nexport default getTypeScriptUnion;\n","import { chain, isString, uniq } from 'lodash';\nimport {\n    TypeScriptArray,\n    TypeScriptObject,\n    TypeScriptObjectField,\n    TypeScriptType,\n    TypeScriptUnion\n} from '../types/typescript';\nimport getTypeScriptUnion from './getTypeScriptUnion';\nimport JsonToTypeScriptConversionOptions from '../types/JsonToTypeScriptConversionOptions';\n\nconst mergeTypeScriptTypes = (\n    a: TypeScriptType,\n    b: TypeScriptType,\n    options: JsonToTypeScriptConversionOptions\n): TypeScriptType => {\n    const singleType = a;\n    const bothTypes = getTypeScriptUnion('', [a, b]);\n\n    if (isString(a) && isString(b)) {\n        return a === b ? singleType : bothTypes;\n    }\n\n    if (a instanceof TypeScriptObject && b instanceof TypeScriptObject) {\n        const aKeys = Object.keys(a.fields);\n        const bKeys = Object.keys(b.fields);\n\n        const allKeys = chain([aKeys, bKeys]).flatMap().uniq().value();\n\n        const mergedFields = chain(allKeys)\n            .reduce((result, fieldKey) => {\n                const aHasKey = aKeys.includes(fieldKey);\n                const bHasKey = bKeys.includes(fieldKey);\n\n                const aField = a.fields[fieldKey];\n                const bField = b.fields[fieldKey];\n\n                if (!aHasKey && !bHasKey) {\n                    console.error('Both keys are undefined');\n                    return result;\n                }\n\n                if (aHasKey && !bHasKey) {\n                    result[fieldKey] = new TypeScriptObjectField(aField.type, true);\n                    return result;\n                }\n\n                if (!aHasKey && bHasKey) {\n                    result[fieldKey] = new TypeScriptObjectField(bField.type, true);\n                    return result;\n                }\n\n                //has both keys\n\n                const isOptional = aField.isOptional || bField.isOptional;\n\n                const mergedFieldType = mergeTypeScriptTypes(aField.type, bField.type, options);\n\n                result[fieldKey] = new TypeScriptObjectField(mergedFieldType, isOptional);\n                return result;\n            }, {} as Record<string, TypeScriptObjectField>)\n            .value();\n\n        return new TypeScriptObject(a.name, mergedFields);\n    }\n\n    if (a instanceof TypeScriptArray && b instanceof TypeScriptArray) {\n        const mergedTypes = mergeTypeScriptTypes(a.type, b.type, options);\n        return new TypeScriptArray(mergedTypes);\n    }\n\n    if (a instanceof TypeScriptUnion || b instanceof TypeScriptUnion) {\n        if (a instanceof TypeScriptUnion && b instanceof TypeScriptUnion) {\n            return new TypeScriptUnion(a.name, uniq([...a.types, ...b.types]));\n        }\n\n        const union = a instanceof TypeScriptUnion ? a : b instanceof TypeScriptUnion ? b : undefined;\n        const notUnion = a instanceof TypeScriptUnion ? b : b instanceof TypeScriptUnion ? a : undefined;\n\n        if (union === undefined || notUnion === undefined) {\n            throw new Error();\n        }\n\n        const defaultResult = new TypeScriptUnion(union.name, uniq([...union.types, notUnion]));\n\n        if (isString(notUnion)) {\n            return defaultResult;\n        }\n\n        const unionSameTypeIndex = union.types.findIndex((value) => value.constructor === notUnion.constructor);\n\n        if (unionSameTypeIndex === -1) {\n            return defaultResult;\n        }\n\n        const unionObject = union.types[unionSameTypeIndex];\n        union.types[unionSameTypeIndex] = mergeTypeScriptTypes(unionObject, notUnion, options);\n        return union;\n    }\n\n    return bothTypes; //TODO\n};\n\nexport default mergeTypeScriptTypes;\n","import { TypeScriptType } from '../types/typescript';\nimport mergeTypeScriptTypes from './mergeTypeScriptTypes';\nimport JsonToTypeScriptConversionOptions from '../types/JsonToTypeScriptConversionOptions';\n\n//TODO\nconst getMergedTypeScriptTypes = (\n    types: TypeScriptType[],\n    options: JsonToTypeScriptConversionOptions\n): TypeScriptType => {\n    return types.reduce((result, value) => {\n        if (result === undefined) {\n            return value;\n        }\n\n        return mergeTypeScriptTypes(result, value, options);\n    }, undefined as unknown as TypeScriptType);\n};\n\nexport default getMergedTypeScriptTypes;\n","import { JsonArray, JsonType } from '../types/json';\nimport {\n    TypeScriptArray,\n    TypeScriptObject,\n    TypeScriptObjectField,\n    TypeScriptTuple,\n    TypeScriptType,\n    TypeScriptUnknown\n} from '../types/typescript';\nimport { chain, isString } from 'lodash';\nimport { singular } from 'pluralize';\nimport getMergedTypeScriptTypes from './mergeTypeScriptTypesList';\nimport JsonToTypeScriptConversionOptions from '../types/JsonToTypeScriptConversionOptions';\n\nconst getTypeScriptType = (\n    name: string,\n    jsonType: JsonType,\n    options: JsonToTypeScriptConversionOptions\n): TypeScriptType => {\n    const actualName = options.typeNameTransformer ? options.typeNameTransformer(name) : name;\n\n    const transformTypeName = options.typeNameTransformer ?? ((typeName: string) => typeName);\n    const transformFieldName = options.fieldNameTransformer ?? ((typeName: string) => typeName);\n\n    const typeName = transformTypeName(actualName);\n    const arrayElementName = singular(typeName);\n\n    if (isString(jsonType)) {\n        return jsonType;\n    }\n\n    if (jsonType instanceof JsonArray) {\n        if (options.isTuplesEnabled) {\n            if (jsonType.types.length === 0) {\n                return new TypeScriptTuple('', []);\n            }\n\n            const typeScriptTypes = jsonType.types.map((type) => getTypeScriptType(arrayElementName, type, options));\n            // const mergedType = getMergedTypeScriptTypes(typeScriptTypes, options);\n\n            return new TypeScriptTuple(arrayElementName, typeScriptTypes);\n        } else {\n            if (jsonType.types.length === 0) {\n                return new TypeScriptArray(new TypeScriptUnknown());\n            }\n\n            const typeScriptTypes = jsonType.types.map((type) => getTypeScriptType(arrayElementName, type, options));\n            const mergedType = getMergedTypeScriptTypes(typeScriptTypes, options);\n\n            return new TypeScriptArray(mergedType);\n        }\n    }\n\n    return new TypeScriptObject(\n        typeName,\n        chain(jsonType.fields)\n            .mapValues((field, name) => {\n                return new TypeScriptObjectField(getTypeScriptType(transformFieldName(name), field, options));\n            })\n            .mapKeys((value, key) => transformFieldName(key))\n            .value()\n    );\n};\n\nexport default getTypeScriptType;\n","import { JsonArray, JsonObject, JsonType } from '../types/json';\nimport { chain, isArray, isBoolean, isNil, isObject, isString, mapValues } from 'lodash';\n\nconst getJsonType = (object: unknown): JsonType => {\n    if (isObject(object)) {\n        if (isArray(object)) {\n            return new JsonArray(chain(object).map(getJsonType).value());\n        }\n\n        return new JsonObject(\n            mapValues(object, (value) => {\n                return getJsonType(value);\n            }) as Record<string, JsonType>\n        );\n    }\n\n    if (isNil(object)) {\n        return 'null';\n    }\n\n    if (typeof object === 'number' || typeof object === 'bigint') {\n        return 'number';\n    }\n\n    if (isString(object)) {\n        return 'string';\n    }\n\n    if (isBoolean(object)) {\n        return 'boolean';\n    }\n\n    console.error({ object });\n    throw new Error('Unable to parse JSON object');\n};\n\nexport default getJsonType;\n","import {\n    DeclarableTypeScriptType,\n    IDeclarableTypeScriptType,\n    TypeScriptArray,\n    TypeScriptType,\n    TypeScriptTypesCombination,\n    TypeScriptUnknown\n} from '../types/typescript';\nimport { isObject, isString } from 'lodash';\nimport mapObject from '../../../utils/mapObject';\nimport JsonToTypeScriptConversionOptions from '../types/JsonToTypeScriptConversionOptions';\n\nconst getAllTypeScriptTypeInnerDeclarableTypes = (\n    type: TypeScriptType,\n    options: JsonToTypeScriptConversionOptions,\n    includeSelf = false\n): IDeclarableTypeScriptType[] => {\n    if (isString(type) || type instanceof TypeScriptUnknown) {\n        return []; //getTypeScriptTypeDeclaration(type, name, exportType)\n    }\n\n    if (type instanceof TypeScriptTypesCombination) {\n        return type.types.flatMap((innerType) => getAllTypeScriptTypeInnerDeclarableTypes(innerType, options, true));\n    }\n\n    if (type instanceof TypeScriptArray) {\n        return getAllTypeScriptTypeInnerDeclarableTypes(type.type, options, true);\n    }\n\n    const result = mapObject(type.fields, (fieldName, field) =>\n        getAllTypeScriptTypeInnerDeclarableTypes(field.type, options, true)\n    ).flatMap((value) => value);\n\n    if (includeSelf) {\n        if (options.isReversedOrder) {\n            result.unshift(type);\n        } else {\n            result.push(type);\n        }\n    }\n\n    return result;\n};\n\nexport const getAllTypeScriptTypeDeclarableTypes = (\n    type: TypeScriptType,\n    name: string,\n    options: JsonToTypeScriptConversionOptions\n): IDeclarableTypeScriptType[] => {\n    const declarableTypes: IDeclarableTypeScriptType[] = getAllTypeScriptTypeInnerDeclarableTypes(type, options);\n\n    const declarableSelf: IDeclarableTypeScriptType =\n        isObject(type) && 'stringifyDeclaration' in type ? type : new DeclarableTypeScriptType(name, type);\n\n    if (options.isReversedOrder) {\n        declarableTypes.unshift(declarableSelf);\n    } else {\n        declarableTypes.push(declarableSelf);\n    }\n\n    return declarableTypes;\n};\n\nexport default getAllTypeScriptTypeInnerDeclarableTypes;\n","import { getAllTypeScriptTypeDeclarableTypes } from './getAllTypeScriptTypeInnerDeclarableTypes';\nimport { IDeclarableTypeScriptType, TypeScriptType } from '../types/typescript';\nimport JsonToTypeScriptConversionOptions from '../types/JsonToTypeScriptConversionOptions';\n\nconst renameConflictingType = (\n    type: IDeclarableTypeScriptType,\n    isConflicting: (type: IDeclarableTypeScriptType) => boolean\n): void => {\n    const match = /^(.*?)(\\d+)$/.exec(type.name);\n    if (!match) {\n        type.name += '2';\n    } else {\n        const [, left, numericPart] = match;\n        const numeric = Number(numericPart);\n        type.name = `${left}${numeric + 1}`;\n    }\n\n    if (isConflicting(type)) {\n        renameConflictingType(type, isConflicting);\n    }\n};\n\nconst getAllTypeScriptTypeDeclarations = (\n    type: TypeScriptType,\n    rootName: string,\n    options: JsonToTypeScriptConversionOptions\n): string => {\n    const actualRootName = options.typeNameTransformer ? options.typeNameTransformer(rootName) : rootName;\n\n    const declarableTypes = getAllTypeScriptTypeDeclarableTypes(type, actualRootName, options);\n\n    const correctlyNamedDeclarableTypes: IDeclarableTypeScriptType[] = [];\n\n    declarableTypes.forEach((declarableType) => {\n        const isConflicting = (type: IDeclarableTypeScriptType) =>\n            correctlyNamedDeclarableTypes.some((value) => value.name === type.name);\n\n        if (isConflicting(declarableType)) {\n            renameConflictingType(declarableType, isConflicting);\n        }\n\n        correctlyNamedDeclarableTypes.push(declarableType);\n    });\n\n    return declarableTypes.map((declarable) => declarable.stringifyDeclaration(options)).join('\\n\\n');\n};\n\nexport default getAllTypeScriptTypeDeclarations;\n","import getTypeScriptType from './getTypeScriptType';\nimport getJsonType from './getJsonType';\nimport getAllTypeScriptTypeDeclarations from './getAllTypeScriptTypeDeclarations';\nimport JsonToTypeScriptConversionOptions from '../types/JsonToTypeScriptConversionOptions';\n\nconst convertJsonToTypeScript = (json: string, options: JsonToTypeScriptConversionOptions): string => {\n    const jsonObject = JSON.parse(json);\n    const jsonType = getJsonType(jsonObject);\n\n    const { rootTypeName } = options;\n\n    const typeScriptType = getTypeScriptType(rootTypeName, jsonType, options);\n    return getAllTypeScriptTypeDeclarations(typeScriptType, rootTypeName, options);\n};\n\nexport default convertJsonToTypeScript;\n","const capitalizeFirst = (value: string): string => {\n    return value.charAt(0).toUpperCase() + value.slice(1);\n};\n\nexport default capitalizeFirst;\n","import { camelCase } from 'lodash';\nimport capitalizeFirst from './capitalizeFirst';\n\nconst pascalCase = (string: string) => {\n    return capitalizeFirst(camelCase(string));\n};\n\nexport default pascalCase;\n","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"JsonToTypeScriptSettings_formContainer__p0cEG\",\"title\":\"JsonToTypeScriptSettings_title__QCy6M\",\"rightSide\":\"JsonToTypeScriptSettings_rightSide__O8OfP\",\"formItem\":\"JsonToTypeScriptSettings_formItem__P5IOE\",\"label\":\"JsonToTypeScriptSettings_label__Xq4Wf\",\"input\":\"JsonToTypeScriptSettings_input__Fm3KT\"};","import React from 'react';\nimport JsonToTypeScriptConversionSelectableOptions, {\n    NameTransformer\n} from '../types/JsonToTypeScriptConversionSelectableOptions';\nimport { Button, Col, Input, Select, Switch, Tag } from 'antd';\nimport useChangeStateHandler from '../../../hooks/useChangeStateHandler';\nimport styles from './JsonToTypeScriptSettings.module.scss';\nimport ExportType from '../types/ExportType';\nimport Text from 'antd/lib/typography/Text';\nimport classNames from 'classnames';\nimport { CloseOutlined } from '@ant-design/icons';\nimport { NullType, ObjectDeclaration, UnknownType } from '../types/JsonToTypeScriptConversionOptions';\nimport { OptionsPopoverComponent } from '../../../layouts/pages/textBiConverterPageContainer/TextBiConverterPageContainer';\n\nconst JsonToTypeScriptSettings: OptionsPopoverComponent<JsonToTypeScriptConversionSelectableOptions> = ({\n    options,\n    onOptionsChange,\n    onClose\n}) => {\n    const handleOptionChange = useChangeStateHandler(onOptionsChange);\n\n    return (\n        <Col className={styles.formContainer}>\n            <div className={styles.title}>\n                <h3 className=\"mb-0\">Settings</h3>\n                <div className={styles.rightSide}>\n                    {/*<Button*/}\n                    {/*    size=\"small\"*/}\n                    {/*    type=\"dashed\"*/}\n                    {/*>*/}\n                    {/*    Reset*/}\n                    {/*</Button>*/}\n                    {onClose && <Button size=\"small\" type=\"text\" icon={<CloseOutlined />} onClick={onClose} />}\n                </div>\n            </div>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Root type name</span>\n                <Input\n                    className={styles.input}\n                    value={options.rootTypeName}\n                    onChange={handleOptionChange('rootTypeName')}\n                />\n            </label>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Export type</span>\n                <Select className={styles.input} value={options.exportType} onChange={handleOptionChange('exportType')}>\n                    <Select.Option key={ExportType.NONE}>None</Select.Option>\n                    <Select.Option key={ExportType.ES_MODULE}>ES Module</Select.Option>\n                    <Select.Option key={ExportType.COMMONJS}>\n                        <Text type=\"danger\" title=\"CommonJS\">\n                            CommonJS\n                        </Text>\n                    </Select.Option>\n                </Select>\n            </label>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Field names</span>\n                <Select\n                    className={styles.input}\n                    value={options.fieldNameTransformer}\n                    onChange={handleOptionChange('fieldNameTransformer')}\n                >\n                    <Select.Option key={NameTransformer.NONE}>Not change</Select.Option>\n                    <Select.Option key={NameTransformer.CAMEL_CASE}>camelCase</Select.Option>\n                    <Select.Option key={NameTransformer.PASCAL_CASE}>PascalCase</Select.Option>\n                    <Select.Option key={NameTransformer.SNAKE_CASE}>snake_case</Select.Option>\n                    <Select.Option key={NameTransformer.SCREAMING_SNAKE_CASE}>SCREAMING_SNAKE_CASE</Select.Option>\n                    <Select.Option key={NameTransformer.KEBAB_CASE}>kebab-case</Select.Option>\n                </Select>\n            </label>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Type names</span>\n                <Select\n                    className={styles.input}\n                    value={options.typeNameTransformer}\n                    onChange={handleOptionChange('typeNameTransformer')}\n                >\n                    <Select.Option key={NameTransformer.NONE}>Not change</Select.Option>\n                    <Select.Option key={NameTransformer.CAMEL_CASE}>camelCase</Select.Option>\n                    <Select.Option key={NameTransformer.PASCAL_CASE}>PascalCase</Select.Option>\n                    <Select.Option key={NameTransformer.SNAKE_CASE}>snake_case</Select.Option>\n                    <Select.Option key={NameTransformer.SCREAMING_SNAKE_CASE}>SCREAMING_SNAKE_CASE</Select.Option>\n                </Select>\n            </label>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Unknown type</span>\n                <Select\n                    className={styles.input}\n                    value={options.unknownType}\n                    onChange={handleOptionChange('unknownType')}\n                >\n                    <Select.Option key={UnknownType.UNKNOWN}>unknown</Select.Option>\n                    <Select.Option key={UnknownType.ANY}>any</Select.Option>\n                </Select>\n            </label>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Null type</span>\n                <Select className={styles.input} value={options.nullType} onChange={handleOptionChange('nullType')}>\n                    <Select.Option key={NullType.NULL}>null</Select.Option>\n                    <Select.Option key={NullType.UNDEFINED}>undefined</Select.Option>\n                </Select>\n            </label>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Object declaration</span>\n                <Select\n                    className={styles.input}\n                    value={options.objectDeclaration}\n                    onChange={handleOptionChange('objectDeclaration')}\n                >\n                    <Select.Option key={ObjectDeclaration.INTERFACE}>Interface</Select.Option>\n                    <Select.Option key={ObjectDeclaration.TYPE}>Type</Select.Option>\n                </Select>\n            </label>\n\n            <label className={classNames('mt-1', styles.formItem)}>\n                <Switch checked={options.isReversedOrder} onChange={handleOptionChange('isReversedOrder')} />\n                <span className=\"ms-3\">Reverse declarations</span>\n            </label>\n            <label className={classNames('mt-1', styles.formItem)}>\n                <Switch checked={options.isTuplesEnabled} onChange={handleOptionChange('isTuplesEnabled')} />\n                <Text className=\"ms-3\">\n                    Enable tuples{' '}\n                    <Tag color=\"warning\" className=\"ms-1\">\n                        experimental\n                    </Tag>\n                </Text>\n            </label>\n        </Col>\n    );\n};\n\nexport default JsonToTypeScriptSettings;\n","import { snakeCase } from 'lodash';\n\nconst screamingSnakeCase = (string: string) => {\n    return snakeCase(string).toLocaleUpperCase();\n};\n\nexport default screamingSnakeCase;\n","import React from 'react';\nimport ExportType from './types/ExportType';\nimport convertJsonToTypeScript from './utils/convertJsonToTypeScript';\nimport getLocalStorageKey from '../../utils/getLocalStorageKey';\nimport JsonToTypeScriptConversionSelectableOptions, {\n    NameTransformer\n} from './types/JsonToTypeScriptConversionSelectableOptions';\nimport JsonToTypeScriptConversionOptions, {\n    NullType,\n    ObjectDeclaration,\n    UnknownType\n} from './types/JsonToTypeScriptConversionOptions';\nimport { camelCase, kebabCase, snakeCase } from 'lodash';\nimport pascalCase from '../../utils/pascalCase';\nimport JsonToTypeScriptSettings from './components/JsonToTypeScriptSettings';\nimport screamingSnakeCase from '../../utils/screamingSnakeCase';\nimport TextBiConverterPageContainer, {\n    RenderOptionsPopover,\n    TextBiConvert\n} from '../../layouts/pages/textBiConverterPageContainer/TextBiConverterPageContainer';\n\nconst defaultSelectableConversionOptions: JsonToTypeScriptConversionSelectableOptions = {\n    rootTypeName: 'Root',\n    exportType: ExportType.ES_MODULE,\n    isReversedOrder: true,\n    typeNameTransformer: NameTransformer.PASCAL_CASE,\n    fieldNameTransformer: NameTransformer.NONE,\n    isTuplesEnabled: false,\n    nullType: NullType.NULL,\n    unknownType: UnknownType.UNKNOWN,\n    objectDeclaration: ObjectDeclaration.INTERFACE\n};\n\nconst nameTransformers: Readonly<Record<NameTransformer, (name: string) => string>> = {\n    [NameTransformer.NONE]: (name) => name,\n    [NameTransformer.CAMEL_CASE]: camelCase,\n    [NameTransformer.PASCAL_CASE]: pascalCase,\n    [NameTransformer.SNAKE_CASE]: snakeCase,\n    [NameTransformer.SCREAMING_SNAKE_CASE]: screamingSnakeCase,\n    [NameTransformer.KEBAB_CASE]: kebabCase\n};\n\nconst getConversionOptions = (\n    selectableConversionOptions: JsonToTypeScriptConversionSelectableOptions\n): JsonToTypeScriptConversionOptions => {\n    const { fieldNameTransformer, typeNameTransformer, ...restOptions } = selectableConversionOptions;\n\n    return {\n        ...restOptions,\n        fieldNameTransformer: nameTransformers[fieldNameTransformer],\n        typeNameTransformer: nameTransformers[typeNameTransformer]\n    };\n};\n\nconst convert: TextBiConvert<JsonToTypeScriptConversionSelectableOptions> = (json, options) => {\n    return convertJsonToTypeScript(json, getConversionOptions(options));\n};\n\nconst renderOptionsPopover: RenderOptionsPopover<JsonToTypeScriptConversionSelectableOptions> = (\n    options,\n    setOptions,\n    handleClose\n) => <JsonToTypeScriptSettings options={options} onOptionsChange={setOptions} onClose={handleClose} />;\n\nconst JsonToTypeScriptPage = () => {\n    return (\n        <TextBiConverterPageContainer\n            source1={{ title: 'JSON', language: 'json' }}\n            source2={{ title: 'TypeScript', language: 'typescript' }}\n            defaultOptions={defaultSelectableConversionOptions}\n            convert1to2={convert}\n            optionsStorageKey={getLocalStorageKey('json-to-typescript', 'conversionOptions')}\n            renderOptionsPopover={JsonToTypeScriptSettings}\n        />\n    );\n\n    // return (\n    //     <BiConverterPageContainer\n    //         className={styles.pageContainer}\n    //         leftTitle=\"JSON\"\n    //         leftExtra={\n    //             <Popover\n    //                 trigger=\"click\"\n    //                 visible={isSettingsVisible}\n    //                 onVisibleChange={setIsSettingsVisible}\n    //                 content={\n    //                     <JsonToTypeScriptSettings\n    //                         options={selectableConversionOptions}\n    //                         setOptions={setSelectableConversionOptions}\n    //                         onClose={handleSettingsClick}\n    //                     />\n    //                 }\n    //                 placement=\"bottomRight\"\n    //             >\n    //                 <Tooltip\n    //                     title=\"Settings\"\n    //                     placement=\"bottomRight\"\n    //                     visible={isSettingsVisible ? false : isSettingsTooltipVisible}\n    //                     onVisibleChange={handleSettingsTooltipVisibleChange}\n    //                 >\n    //                     <Button type=\"text\" icon={<SettingOutlined />} onClick={handleSettingsClick} />\n    //                 </Tooltip>\n    //             </Popover>\n    //         }\n    //         left={\n    //             <AppEditor\n    //                 className={styles.editor}\n    //                 language=\"json\"\n    //                 options={jsonEditorOptions}\n    //                 value={json}\n    //                 onChange={setJson}\n    //             />\n    //         }\n    //         rightTitle=\"TypeScript\"\n    //         rightExtra={\n    //             <Tooltip title=\"Copy\" placement=\"bottomLeft\">\n    //                 <CopyButton value={typeScript} type=\"text\" children=\"\" />\n    //             </Tooltip>\n    //         }\n    //         right={\n    //             <AppEditor\n    //                 className={styles.editor}\n    //                 language=\"typescript\"\n    //                 options={typescriptEditorOptions}\n    //                 value={typeScript}\n    //             />\n    //         }\n    //         extra={error && <Alert className={styles.messageContainer} type=\"error\" showIcon message={error} />}\n    //     />\n    // );\n};\n\nexport default JsonToTypeScriptPage;\n","import ObjectKey from '../types/common/ObjectKey';\n\nconst mapObject = <K extends ObjectKey, V, R>(\n    object: Record<K, V>,\n    iteratee: (key: K, value: V, index: number) => R\n): R[] => {\n    return Object.keys(object).map((key, index) => {\n        const actualKey = key as K;\n        return iteratee(actualKey, object[actualKey], index);\n    });\n};\n\nexport default mapObject;\n","/* global define */\n\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = pluralize();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return pluralize();\n    });\n  } else {\n    // Browser global.\n    root.pluralize = pluralize();\n  }\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  function sanitizeRule (rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  function restoreCase (word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Lower cased words. E.g. \"hello\".\n    if (word === word.toLowerCase()) return token.toLowerCase();\n\n    // Upper cased words. E.g. \"WHISKY\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  function interpolate (str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  function replace (word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  function sanitizeWord (token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  function replaceWord (replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  function checkWord (replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word      The word to pluralize\n   * @param  {number}  count     How many of the word exist\n   * @param  {boolean} inclusive Whether to prefix with the number (e.g. 3 ducks)\n   * @return {string}\n   */\n  function pluralize (word, count, inclusive) {\n    var pluralized = count === 1\n      ? pluralize.singular(word) : pluralize.plural(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.plural = replaceWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n  pluralize.isPlural = checkWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.singular = replaceWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n  pluralize.isSingular = checkWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singular and plural references for the word.\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Irregular rules.\n   */\n  [\n    // Pronouns.\n    ['I', 'we'],\n    ['me', 'us'],\n    ['he', 'they'],\n    ['she', 'they'],\n    ['them', 'them'],\n    ['myself', 'ourselves'],\n    ['yourself', 'yourselves'],\n    ['itself', 'themselves'],\n    ['herself', 'themselves'],\n    ['himself', 'themselves'],\n    ['themself', 'themselves'],\n    ['is', 'are'],\n    ['was', 'were'],\n    ['has', 'have'],\n    ['this', 'these'],\n    ['that', 'those'],\n    // Words ending in with a consonant and `o`.\n    ['echo', 'echoes'],\n    ['dingo', 'dingoes'],\n    ['volcano', 'volcanoes'],\n    ['tornado', 'tornadoes'],\n    ['torpedo', 'torpedoes'],\n    // Ends with `us`.\n    ['genus', 'genera'],\n    ['viscus', 'viscera'],\n    // Ends with `ma`.\n    ['stigma', 'stigmata'],\n    ['stoma', 'stomata'],\n    ['dogma', 'dogmata'],\n    ['lemma', 'lemmata'],\n    ['schema', 'schemata'],\n    ['anathema', 'anathemata'],\n    // Other irregular rules.\n    ['ox', 'oxen'],\n    ['axe', 'axes'],\n    ['die', 'dice'],\n    ['yes', 'yeses'],\n    ['foot', 'feet'],\n    ['eave', 'eaves'],\n    ['goose', 'geese'],\n    ['tooth', 'teeth'],\n    ['quiz', 'quizzes'],\n    ['human', 'humans'],\n    ['proof', 'proofs'],\n    ['carve', 'carves'],\n    ['valve', 'valves'],\n    ['looey', 'looies'],\n    ['thief', 'thieves'],\n    ['groove', 'grooves'],\n    ['pickaxe', 'pickaxes'],\n    ['passerby', 'passersby']\n  ].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Pluralization rules.\n   */\n  [\n    [/s?$/i, 's'],\n    [/[^\\u0000-\\u007F]$/i, '$0'],\n    [/([^aeiou]ese)$/i, '$1'],\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],\n    [/(e[mn]u)s?$/i, '$1s'],\n    [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\n    [/(her|at|gr)o$/i, '$1oes'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n    [/\\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\n    [/(child)(?:ren)?$/i, '$1ren'],\n    [/eaux$/i, '$0'],\n    [/m[ae]n$/i, 'men'],\n    ['thou', 'you']\n  ].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Singularization rules.\n   */\n  [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n    [/ies$/i, 'y'],\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\n    [/\\b(mon|smil)ies$/i, '$1ey'],\n    [/\\b((?:tit)?m|l)ice$/i, '$1ouse'],\n    [/(seraph|cherub)im$/i, '$1'],\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, '$1'],\n    [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, '$1sis'],\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n    [/(test)(?:is|es)$/i, '$1is'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n    [/(matr|append)ices$/i, '$1ix'],\n    [/(pe)(rson|ople)$/i, '$1rson'],\n    [/(child)ren$/i, '$1'],\n    [/(eau)x?$/i, '$1'],\n    [/men$/i, 'man']\n  ].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Uncountable rules.\n   */\n  [\n    // Singular words with no plurals.\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'aircraft',\n    'alcohol',\n    'ammo',\n    'analytics',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'firmware',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'hardware',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'mud',\n    'manga',\n    'news',\n    'only',\n    'personnel',\n    'pike',\n    'plankton',\n    'pliers',\n    'police',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'software',\n    'species',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transportation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    /pok[eé]mon$/i,\n    // Regexes.\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ].forEach(pluralize.addUncountableRule);\n\n  return pluralize;\n});\n"],"names":["setState","useCallback","key","value","state","isChangeEvent","isObject","property","changeState","useChangeState","actualValue","call","target","ExportType","NullType","UnknownType","ObjectDeclaration","IObject","fields","IArray","types","JsonObject","JsonArray","type","options","isString","nullType","stringifyReference","NameTransformer","isValidJsIdentifier","regex","test","isValidTsTypeFieldName","additionalTsRegex","DeclarableTypeScriptType","name","this","stringifyDeclaration","getExportKeyword","exportType","stringifyTypeName","stringifyDeclarationBody","getTypeScriptTypeReference","TypeScriptUnknown","isUnknown","unknownType","TypeScriptObjectField","isOptional","TypeScriptObject","exportKeyword","declarationBody","declarationType","objectDeclaration","INTERFACE","TYPE","mapObject","field","stringifyFieldName","join","TypeScriptArray","typeReference","TypeScriptUnion","TypeScriptTypesCombination","map","TypeScriptTuple","result","trim","filter","length","remove","mergeTypeScriptTypes","a","b","singleType","bothTypes","getTypeScriptUnion","aKeys","Object","keys","bKeys","allKeys","chain","flatMap","uniq","mergedFields","reduce","fieldKey","aHasKey","includes","bHasKey","aField","bField","console","error","mergedFieldType","mergedTypes","union","undefined","notUnion","Error","defaultResult","unionSameTypeIndex","findIndex","constructor","unionObject","getTypeScriptType","jsonType","actualName","typeNameTransformer","transformTypeName","typeName","transformFieldName","fieldNameTransformer","arrayElementName","singular","isTuplesEnabled","typeScriptTypes","mergedType","getMergedTypeScriptTypes","mapValues","mapKeys","getJsonType","object","isArray","isNil","isBoolean","getAllTypeScriptTypeInnerDeclarableTypes","includeSelf","innerType","fieldName","isReversedOrder","unshift","push","renameConflictingType","isConflicting","match","exec","left","numericPart","numeric","Number","rootName","declarableTypes","declarableSelf","getAllTypeScriptTypeDeclarableTypes","correctlyNamedDeclarableTypes","forEach","declarableType","some","declarable","json","jsonObject","JSON","parse","rootTypeName","typeScriptType","getAllTypeScriptTypeDeclarations","charAt","toUpperCase","slice","string","capitalizeFirst","camelCase","onOptionsChange","onClose","handleOptionChange","useChangeStateHandler","className","styles","size","icon","CloseOutlined","onClick","onChange","Text","title","NONE","CAMEL_CASE","PASCAL_CASE","SNAKE_CASE","SCREAMING_SNAKE_CASE","KEBAB_CASE","UNKNOWN","ANY","NULL","UNDEFINED","classNames","checked","color","snakeCase","toLocaleUpperCase","defaultSelectableConversionOptions","nameTransformers","pascalCase","screamingSnakeCase","kebabCase","convert","convertJsonToTypeScript","selectableConversionOptions","restOptions","getConversionOptions","TextBiConverterPageContainer","source1","language","source2","defaultOptions","convert1to2","optionsStorageKey","getLocalStorageKey","renderOptionsPopover","JsonToTypeScriptSettings","iteratee","index","module","exports","pluralRules","singularRules","uncountables","irregularPlurals","irregularSingles","sanitizeRule","rule","RegExp","restoreCase","word","token","toLowerCase","substr","interpolate","str","args","replace","arguments","sanitizeWord","rules","hasOwnProperty","len","replaceWord","replaceMap","keepMap","checkWord","bool","pluralize","count","inclusive","plural","isPlural","isSingular","addPluralRule","replacement","addSingularRule","addUncountableRule","addIrregularRule","single"],"sourceRoot":""}