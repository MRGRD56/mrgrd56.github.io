{"version":3,"file":"static/js/7594.3890b02f.chunk.js","mappings":"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","sources":["pages/qrScannerPage/QrScannerPage.tsx","utils/dummyAntdUploadRequest.ts","utils/helper/promisifyFileReaderMethod.ts","utils/readFileAsDataUrl.ts"],"sourcesContent":["import React, { ClipboardEventHandler, useCallback, useEffect, useState } from 'react';\r\nimport PageContainer from '../../layouts/pages/pageContainer/PageContainer';\r\nimport { Col, Image, notification, Row, Space, Spin, Upload } from 'antd';\r\nimport './QrScannerPage.scss';\r\nimport { RcFile, UploadChangeParam } from 'antd/lib/upload';\r\nimport { UploadFile } from 'antd/lib/upload/interface';\r\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport dummyAntdUploadRequest from '../../utils/dummyAntdUploadRequest';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport QrScanner from 'qr-scanner';\r\nimport { isNil, isString } from 'lodash';\r\nimport call from '../../utils/call';\r\nimport Text from 'antd/lib/typography/Text';\r\nimport ImgCrop from 'antd-img-crop';\r\nimport CopyButton from '../../components/copyButton/CopyButton';\r\nimport ExternalLink from '../../components/ExternalLink';\r\nimport getNpmPackageLink from '../../utils/getNpmPackageLink';\r\nimport readFileAsDataUrl from '../../utils/readFileAsDataUrl';\r\n\r\ninterface QrImage {\r\n    blob: Blob;\r\n    base64: string;\r\n}\r\n\r\nconst getQrImage = async (blob: Blob): Promise<QrImage> => {\r\n    const base64 = await readFileAsDataUrl(blob);\r\n    return { blob, base64 };\r\n};\r\n\r\nconst beforeUpload = (file: RcFile) => {\r\n    return /^image\\/.+$/.test(file.type);\r\n};\r\n\r\nconst titleExtra = (\r\n    <Text type=\"secondary\">\r\n        uses <ExternalLink href={getNpmPackageLink('qr-scanner')}>qr-scanner</ExternalLink>\r\n    </Text>\r\n);\r\n\r\nconst QrScannerPage = () => {\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [isRecognition, setIsRecognition] = useState<boolean>(false);\r\n    const [qrImage, setQrImage] = useState<QrImage>();\r\n    const [qrContent, setQrContent] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        call(async () => {\r\n            if (isNil(qrImage)) {\r\n                setQrContent('');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                setIsRecognition(true);\r\n                const content: QrScanner.ScanResult | string = await QrScanner.scanImage(qrImage.blob, {});\r\n                const contentText = isString(content) ? content : content.data;\r\n                setQrContent(contentText);\r\n            } catch (error) {\r\n                notification.error({\r\n                    message: String(error)\r\n                });\r\n                setQrContent('');\r\n            } finally {\r\n                setIsRecognition(false);\r\n            }\r\n        });\r\n    }, [qrImage]);\r\n\r\n    const handleQrImageChange = useCallback(async (value: UploadChangeParam<UploadFile<unknown>>) => {\r\n        if (value.file.status === 'uploading') {\r\n            setIsLoading(true);\r\n            return;\r\n        }\r\n\r\n        const blob = value.file.originFileObj;\r\n\r\n        if (blob) {\r\n            const actualBlob =\r\n                blob.type === 'image/svg+xml' //ImgCrop converts svg to png but doesn't change the mime type\r\n                    ? blob.slice(0, blob.size, 'image/png')\r\n                    : blob;\r\n\r\n            setQrImage(await getQrImage(actualBlob));\r\n        }\r\n\r\n        setIsLoading(false);\r\n    }, []);\r\n\r\n    const handlePaste = useCallback<ClipboardEventHandler>(async (event) => {\r\n        setQrImage(await getQrImage(event.clipboardData.files[0]));\r\n    }, []);\r\n\r\n    return (\r\n        <PageContainer title=\"QR Code Scanner\" onPaste={handlePaste} titleExtra={titleExtra}>\r\n            <Row>\r\n                <Col className=\"w-100\">\r\n                    <Row>\r\n                        <Space>\r\n                            {qrImage && (\r\n                                <div className=\"QrScannerPage_image-thumb\">\r\n                                    <Image src={qrImage.base64} width={128} height={128} />\r\n                                </div>\r\n                            )}\r\n                            <ImgCrop rotate maxZoom={30}>\r\n                                <Upload\r\n                                    className=\"QrScannerPage_image-upload\"\r\n                                    listType=\"picture-card\"\r\n                                    showUploadList={false}\r\n                                    beforeUpload={beforeUpload}\r\n                                    onChange={handleQrImageChange}\r\n                                    accept=\"image/*, *\"\r\n                                    customRequest={dummyAntdUploadRequest}\r\n                                >\r\n                                    <Space direction=\"vertical\">\r\n                                        {isLoading ? <LoadingOutlined /> : <PlusOutlined />}\r\n                                        <div>\r\n                                            Upload <br />\r\n                                            <Text type=\"secondary\">or Ctrl+V</Text>\r\n                                        </div>\r\n                                    </Space>\r\n                                </Upload>\r\n                            </ImgCrop>\r\n                        </Space>\r\n                    </Row>\r\n                    <Col xs={24} lg={12}>\r\n                        <Spin spinning={isRecognition}>\r\n                            <TextArea value={qrContent} readOnly rows={6} />\r\n                        </Spin>\r\n                        <CopyButton value={qrContent} className=\"mt-1\" />\r\n                    </Col>\r\n                </Col>\r\n            </Row>\r\n        </PageContainer>\r\n    );\r\n};\r\n\r\nexport default QrScannerPage;\r\n","const dummyAntdUploadRequest = ({ onSuccess }: { onSuccess?: (response: string) => void }) => {\n    setTimeout(() => {\n        onSuccess?.('ok');\n    }, 0);\n};\n\nexport default dummyAntdUploadRequest;\n","const promisifyFileReaderMethod = <R extends string | ArrayBuffer>(invocation: (reader: FileReader) => void) => {\n    return new Promise<R>((resolve, reject) => {\n        const reader = new FileReader();\n\n        const handleLoad = (event: FileReaderEventMap['load']) => {\n            reader.removeEventListener('load', handleLoad);\n            resolve(event.target?.result as R);\n        };\n\n        const handleError = (event: FileReaderEventMap['error']) => {\n            reader.removeEventListener('error', handleError);\n            reject(event);\n        };\n\n        reader.addEventListener('load', handleLoad);\n        reader.addEventListener('error', handleError);\n\n        invocation(reader);\n    });\n};\n\nexport default promisifyFileReaderMethod;\n","import promisifyFileReaderMethod from './helper/promisifyFileReaderMethod';\n\nconst readFileAsDataUrl = (blob: Blob) =>\n    promisifyFileReaderMethod<string>((reader) => {\n        reader.readAsDataURL(blob);\n    });\n\nexport default readFileAsDataUrl;\n"],"names":["getQrImage","blob","readFileAsDataUrl","base64","beforeUpload","file","test","type","titleExtra","Text","ExternalLink","href","getNpmPackageLink","useState","isLoading","setIsLoading","isRecognition","setIsRecognition","qrImage","setQrImage","qrContent","setQrContent","useEffect","call","isNil","QrScanner","content","contentText","isString","data","notification","message","String","handleQrImageChange","useCallback","value","status","originFileObj","actualBlob","slice","size","handlePaste","event","clipboardData","files","PageContainer","title","onPaste","className","src","width","height","rotate","maxZoom","listType","showUploadList","onChange","accept","customRequest","dummyAntdUploadRequest","direction","LoadingOutlined","PlusOutlined","xs","lg","spinning","TextArea","readOnly","rows","CopyButton","onSuccess","setTimeout","invocation","Promise","resolve","reject","reader","FileReader","addEventListener","handleLoad","removeEventListener","target","result","handleError","promisifyFileReaderMethod","readAsDataURL"],"sourceRoot":""}