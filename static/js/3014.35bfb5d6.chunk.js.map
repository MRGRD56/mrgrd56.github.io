{"version":3,"file":"static/js/3014.35bfb5d6.chunk.js","mappings":"iKAmBA,IAPA,SAA0BA,GACtB,OAA0BC,EAAAA,EAAAA,UAAoDD,GAA9E,eAAOE,EAAP,KAAcC,EAAd,KAGA,MAAO,CAACD,EAAOC,GAFSC,EAAAA,EAAAA,GAA6BD,M,qCCFzD,IAJqC,SAAIE,GACrC,OAAOC,EAAAA,EAAAA,cANHC,EAM4CF,EALhD,SAACG,GACGD,EAASC,EAAMC,OAAOP,SAIiC,CAACG,IAN5D,IAAIE,I,iJCFR,EAAyB,kC,iCCyBzB,EAjB6C,WACzC,OAAuCG,EAAAA,EAAAA,GAAsB,IAA7D,eAAOC,EAAP,KAAkBC,EAAlB,KAEA,OACI,SAACC,EAAA,EAAD,CAAeC,MAAM,kBAArB,UACI,UAACC,EAAA,EAAD,CAAMC,KAAG,EAACC,IAAK,EAAGC,UAAU,QAA5B,WACI,SAACC,EAAA,QAAD,CAAUC,KAAM,EAAGC,YAAY,WAAWnB,MAAOS,EAASW,SAAUV,IACnED,GACG,mBAAQY,IAAKZ,EAASO,UAAWM,GAAAA,CAAWC,EAAe,kBAE3D,SAACC,EAAA,EAAD,CAAMC,KAAK,YAAX","sources":["hooks/useInputState.ts","hooks/useStateChangeByEventHandler.ts","webpack://mrgrd56.github.io/./src/pages/dataUrlViewerPage/DataUrlViewerPage.module.scss?a7e5","pages/dataUrlViewerPage/DataUrlViewerPage.tsx"],"sourcesContent":["import React, { Dispatch, SetStateAction, useState } from 'react';\nimport useStateChangeByEventHandler from './useStateChangeByEventHandler';\n\ntype PossiblyUndefined<S, V> = V extends undefined ? S | undefined : S;\nexport type SetStateByEventAction<S> = (event: React.ChangeEvent<{ value: S }>) => void;\n\nfunction useInputState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>, SetStateByEventAction<S>];\nfunction useInputState<S = undefined>(): [\n    S | undefined,\n    Dispatch<SetStateAction<S | undefined>>,\n    SetStateByEventAction<S | undefined>\n];\nfunction useInputState<S>(initialState?: S | (() => S)) {\n    const [value, setValue] = useState<PossiblyUndefined<S, typeof initialState>>(initialState);\n    const setValueByEvent = useStateChangeByEventHandler(setValue);\n\n    return [value, setValue, setValueByEvent];\n}\n\nexport default useInputState;\n","import React, { Dispatch, SetStateAction, useCallback } from 'react';\n\nexport const handleEventTargetValueChange =\n    <S>(callback: (value: S) => void) =>\n    (event: React.ChangeEvent<{ value: S }>) => {\n        callback(event.target.value);\n    };\n\nconst useStateChangeByEventHandler = <S>(setState: Dispatch<SetStateAction<S>>) => {\n    return useCallback(handleEventTargetValueChange(setState), [setState]);\n};\n\nexport default useStateChangeByEventHandler;\n","// extracted by mini-css-extract-plugin\nexport default {\"iframe\":\"DataUrlViewerPage_iframe__k2m8u\"};","import React, { FunctionComponent } from 'react';\nimport PageContainer from '../../layouts/pages/pageContainer/PageContainer';\nimport TextArea from 'antd/lib/input/TextArea';\nimport useInputState from '../../hooks/useInputState';\nimport classNames from 'classnames';\nimport styles from './DataUrlViewerPage.module.scss';\nimport Flex from '../../components/flex/Flex';\nimport Text from 'antd/lib/typography/Text';\n\nconst DataUrlViewerPage: FunctionComponent = () => {\n    const [dataUrl, , setDataUrlByEvent] = useInputState<string>('');\n\n    return (\n        <PageContainer title=\"Data URL Viewer\">\n            <Flex col gap={6} className=\"h-100\">\n                <TextArea rows={8} placeholder=\"Data URL\" value={dataUrl} onChange={setDataUrlByEvent} />\n                {dataUrl ? (\n                    <iframe src={dataUrl} className={classNames(styles.iframe, 'view-iframe')} />\n                ) : (\n                    <Text type=\"secondary\">The result will be shown here</Text>\n                )}\n            </Flex>\n        </PageContainer>\n    );\n};\n\nexport default DataUrlViewerPage;\n"],"names":["initialState","useState","value","setValue","useStateChangeByEventHandler","setState","useCallback","callback","event","target","useInputState","dataUrl","setDataUrlByEvent","PageContainer","title","Flex","col","gap","className","TextArea","rows","placeholder","onChange","src","classNames","styles","Text","type"],"sourceRoot":""}