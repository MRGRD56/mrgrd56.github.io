{"version":3,"file":"static/js/2394.9ecb7b1b.chunk.js","mappings":"qQAWA,EAXoB,SAAOA,EAAYC,GACnC,OAAOD,EAAME,QAAqB,SAACC,EAAQC,EAAOC,GAM9C,OALc,IAAVA,GACAF,EAAOG,KAAKL,GAGhBE,EAAOG,KAAKF,GACLD,IACR,K,iCCuHP,EAtH6C,WACzC,OAAgDI,EAAAA,EAAAA,YAAhD,eAAOC,EAAP,KAAyBC,EAAzB,KACA,GAAgDC,EAAAA,EAAAA,IAC5CC,EAAAA,EAAAA,GAAmB,0BAA2B,qBAC9C,GAFJ,eAAOC,EAAP,KAAyBC,EAAzB,KAKMC,GAAeC,EAAAA,EAAAA,QAAuB,MAEtCC,GAAmBC,EAAAA,EAAAA,UAAqB,WAC1C,OAAKT,EAIE,CACHA,EAAiBU,UACb,SAACC,EAAA,EAAD,CAAMC,UAAQ,EAAd,iBAAmB,iBAIvBZ,EAAiBa,SACb,SAACF,EAAA,EAAD,CAAMC,UAAQ,EAAd,gBAAmB,gBAIvBZ,EAAiBc,WACb,SAACH,EAAA,EAAD,CAAMC,UAAQ,EAAd,kBAAmB,kBAIvBZ,EAAiBe,UACb,SAACJ,EAAA,EAAD,CAAMC,UAAQ,EAAd,gBAAmB,kBAIzBI,OAAOC,SAxBE,KAyBZ,CAACjB,IAEEkB,GAAkBT,EAAAA,EAAAA,UAAqB,WACzC,OAAKT,EAIE,kBACAQ,GADA,CAE2B,IAA9BR,EAAiBmB,UAAgD,IAA9BnB,EAAiBmB,WAChD,SAACR,EAAA,EAAD,CAAMC,UAAQ,EAAd,SACKZ,EAAiBoB,IAAIC,eADP,iBAIzBL,OAAOC,SAVE,KAWZ,CAACT,EAAkBR,IAEhBsB,GAAgBC,EAAAA,EAAAA,cAClB,SAACC,GACOpB,GACAoB,EAAMC,iBAEVD,EAAME,2BAENC,QAAQC,IAAI,UAAWJ,GACvBvB,EAAoBuB,KAExB,CAACpB,IAWL,OARAyB,EAAAA,EAAAA,YAAU,WAGN,OAFAC,OAAOC,iBAAiB,UAAWT,GAE5B,WACHQ,OAAOE,oBAAoB,UAAWV,MAE3C,CAACA,KAGA,SAACW,EAAA,EAAD,CAAeC,IAAK5B,EAAc6B,MAAM,0BAA0BC,UAAW,EAA7E,UACI,SAACC,EAAA,EAAD,CAAMC,KAAG,EAACC,SAAS,QAAnB,UACI,SAAC,IAAD,WACI,SAAC,YAAD,CAAcC,IAAI,UAAlB,UACI,UAACH,EAAA,EAAD,CAAMC,KAAG,EAACG,IAAK,GAAf,UACKzC,GACG,SAACW,EAAA,EAAD,CAAM+B,UAAU,OAAhB,UACI,UAACL,EAAA,EAAD,CAAMC,KAAG,EAACG,IAAK,EAAf,WACI,SAAC9B,EAAA,EAAD,CAAMgC,QAAM,EAACD,UAAU,OAAvB,SACKE,EAAY1B,GAAiB,wCAElC,4BACI,SAACP,EAAA,EAAD,CAAMkC,MAAI,EAAV,uBADJ,MACiC,SAAClC,EAAA,EAAD,CAAMC,UAAQ,EAAd,SAAgBZ,EAAiBoB,UAElE,4BACI,SAACT,EAAA,EAAD,CAAMkC,MAAI,EAAV,wBADJ,MACkC,SAAClC,EAAA,EAAD,CAAMC,UAAQ,EAAd,SAAgBZ,EAAiB6C,WAEnE,4BACI,SAAClC,EAAA,EAAD,CAAMkC,MAAI,EAAV,yBADJ,IACmC,KAC/B,SAAClC,EAAA,EAAD,CAAMC,UAAQ,EAAd,SAAgBZ,EAAiB8C,YAErC,4BACI,SAACnC,EAAA,EAAD,CAAMkC,MAAI,EAAV,uBADJ,KACkCrC,WAK1C,SAAC6B,EAAA,EAAD,CAAMC,KAAG,EAACG,IAAK,EAAf,UACI,SAAC9B,EAAA,EAAD,CAAMgC,QAAM,EAAZ,8BAGR,mBAAOD,UAAU,2CAAjB,WACI,SAAC,IAAD,CAAQK,QAAS3C,EAAkB4C,SAAU3C,IADjD","sources":["utils/joinObjects.ts","pages/jsEventTesterPage/JsEventTesterPage.tsx"],"sourcesContent":["const joinObjects = <T, S>(items: T[], separator: S): Array<T | S> => {\n    return items.reduce<Array<T | S>>((result, value, index) => {\n        if (index !== 0) {\n            result.push(separator);\n        }\n\n        result.push(value);\n        return result;\n    }, []);\n};\n\nexport default joinObjects;\n","import React, { FunctionComponent, ReactNode, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport PageContainer from '../../layouts/pages/pageContainer/PageContainer';\nimport Flex from '../../components/flex/Flex';\nimport { Switch, Tabs } from 'antd';\nimport Text from 'antd/lib/typography/Text';\nimport joinObjects from '../../utils/joinObjects';\nimport { useLocalstorageState } from 'rooks';\nimport getLocalStorageKey from '../../utils/getLocalStorageKey';\n\nconst JsEventTesterPage: FunctionComponent = () => {\n    const [lastKeyDownEvent, setLastKeyDownEvent] = useState<KeyboardEvent>();\n    const [doPreventDefault, setDoPreventDefault] = useLocalstorageState<boolean>(\n        getLocalStorageKey('js-event-tester/keydown', 'doPreventDefault'),\n        false\n    );\n\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    const pressedModifiers = useMemo<ReactNode[]>(() => {\n        if (!lastKeyDownEvent) {\n            return [];\n        }\n\n        return [\n            lastKeyDownEvent.ctrlKey && (\n                <Text keyboard key=\"modifier-ctrl\">\n                    Ctrl\n                </Text>\n            ),\n            lastKeyDownEvent.altKey && (\n                <Text keyboard key=\"modifier-alt\">\n                    Alt\n                </Text>\n            ),\n            lastKeyDownEvent.shiftKey && (\n                <Text keyboard key=\"modifier-shift\">\n                    Shift\n                </Text>\n            ),\n            lastKeyDownEvent.metaKey && (\n                <Text keyboard key=\"modifier-meta\">\n                    Win\n                </Text>\n            )\n        ].filter(Boolean);\n    }, [lastKeyDownEvent]);\n\n    const pressedShortcut = useMemo<ReactNode[]>(() => {\n        if (!lastKeyDownEvent) {\n            return [];\n        }\n\n        return [\n            ...pressedModifiers,\n            lastKeyDownEvent.location !== 1 && lastKeyDownEvent.location !== 2 && (\n                <Text keyboard key=\"pressed-key\">\n                    {lastKeyDownEvent.key.toUpperCase()}\n                </Text>\n            )\n        ].filter(Boolean);\n    }, [pressedModifiers, lastKeyDownEvent]);\n\n    const handleKeyDown = useCallback(\n        (event: KeyboardEvent) => {\n            if (doPreventDefault) {\n                event.preventDefault();\n            }\n            event.stopImmediatePropagation();\n\n            console.log('keydown', event);\n            setLastKeyDownEvent(event);\n        },\n        [doPreventDefault]\n    );\n\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [handleKeyDown]);\n\n    return (\n        <PageContainer ref={containerRef} title=\"JavaScript Event Tester\" tabIndex={-1}>\n            <Flex col maxWidth=\"800px\">\n                <Tabs>\n                    <Tabs.TabPane tab=\"keydown\">\n                        <Flex col gap={16}>\n                            {lastKeyDownEvent ? (\n                                <Text className=\"fs-6\">\n                                    <Flex col gap={5}>\n                                        <Text strong className=\"fs-5\">\n                                            {joinObjects(pressedShortcut, <>+</>)}\n                                        </Text>\n                                        <div>\n                                            <Text code>event.key</Text>: <Text keyboard>{lastKeyDownEvent.key}</Text>\n                                        </div>\n                                        <div>\n                                            <Text code>event.code</Text>: <Text keyboard>{lastKeyDownEvent.code}</Text>\n                                        </div>\n                                        <div>\n                                            <Text code>event.which</Text>:{' '}\n                                            <Text keyboard>{lastKeyDownEvent.which}</Text>\n                                        </div>\n                                        <div>\n                                            <Text code>modifiers</Text>: {pressedModifiers}\n                                        </div>\n                                    </Flex>\n                                </Text>\n                            ) : (\n                                <Flex col gap={8}>\n                                    <Text strong>Press any key</Text>\n                                </Flex>\n                            )}\n                            <label className=\"d-flex flex-row align-items-center gap-2\">\n                                <Switch checked={doPreventDefault} onChange={setDoPreventDefault} />\n                                preventDefault\n                            </label>\n                        </Flex>\n                    </Tabs.TabPane>\n                </Tabs>\n            </Flex>\n        </PageContainer>\n    );\n};\n\nexport default JsEventTesterPage;\n"],"names":["items","separator","reduce","result","value","index","push","useState","lastKeyDownEvent","setLastKeyDownEvent","useLocalstorageState","getLocalStorageKey","doPreventDefault","setDoPreventDefault","containerRef","useRef","pressedModifiers","useMemo","ctrlKey","Text","keyboard","altKey","shiftKey","metaKey","filter","Boolean","pressedShortcut","location","key","toUpperCase","handleKeyDown","useCallback","event","preventDefault","stopImmediatePropagation","console","log","useEffect","window","addEventListener","removeEventListener","PageContainer","ref","title","tabIndex","Flex","col","maxWidth","tab","gap","className","strong","joinObjects","code","which","checked","onChange"],"sourceRoot":""}