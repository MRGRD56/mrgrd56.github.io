{"version":3,"file":"static/js/2317.33a8d297.chunk.js","mappings":"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","sources":["utils/copyText.ts","utils/copyBlob.ts","utils/computeValue.ts","components/copyButton/CopyButton.tsx","hooks/useChangeAnyStateHandler.ts","hooks/useChangeState.ts","hooks/useChangeStateHandler.ts","layouts/pages/pageContainer/PageContainer.tsx","layouts/pages/pageContainer/PageContainer.module.scss","components/disqusThread/DisqusThread.tsx","hooks/useDeepEffect.ts","pages/passwordGeneratorPage/PasswordGeneratorPage.tsx","utils/getErrorMessage.ts","utils/getLocalStorageKey.ts","utils/getNpmPackageLink.ts"],"sourcesContent":["const copyText = (text: string | undefined) => {\n    if (!text) {\n        return;\n    }\n\n    return navigator.clipboard.writeText(text);\n};\n\nexport default copyText;\n","const copyBlob = (blob: Blob) => {\n    return navigator.clipboard.write([\n        new ClipboardItem({\n            [blob.type]: blob\n        })\n    ]);\n};\n\nexport default copyBlob;\n","import { isFunction } from 'lodash';\n\nconst computeValue = <T>(value: T | (() => T)): T => {\n    return isFunction(value) ? value() : value;\n};\n\nexport default computeValue;\n","import React, { MouseEvent, MouseEventHandler, useRef, useState } from 'react';\nimport copyText from '../../utils/copyText';\nimport { Button, ButtonProps } from 'antd';\nimport { CheckOutlined, CopyOutlined } from '@ant-design/icons';\nimport { isNil, isString } from 'lodash';\nimport copyBlob from '../../utils/copyBlob';\nimport computeValue from '../../utils/computeValue';\n\ntype ContentType = string | Blob | null | undefined;\n\ninterface Props<T extends ContentType> extends Omit<ButtonProps, 'value'> {\n    value: T | (() => T);\n    copyEmpty?: boolean;\n    onClick?: (event: MouseEvent<HTMLButtonElement>) => T;\n}\n\nfunction CopyButton<T extends ContentType>({ value, copyEmpty, children, onClick, icon, ...props }: Props<T>) {\n    const [isCopied, setIsCopied] = useState<boolean>(false);\n\n    const copiedTimeoutRef = useRef<NodeJS.Timeout>();\n\n    const handleClick: MouseEventHandler<HTMLButtonElement> = async (event) => {\n        const replacedValue = onClick?.(event);\n\n        const actualValue = replacedValue ?? computeValue(value);\n\n        if (!actualValue && !copyEmpty) {\n            return;\n        }\n\n        if (copiedTimeoutRef.current) {\n            clearTimeout(copiedTimeoutRef.current);\n        }\n\n        if (isNil(actualValue) || isString(actualValue)) {\n            await copyText(actualValue ?? '');\n        }\n        if (actualValue instanceof Blob) {\n            await copyBlob(actualValue);\n        }\n\n        setIsCopied(true);\n        copiedTimeoutRef.current = setTimeout(() => {\n            setIsCopied(false);\n        }, 1000);\n    };\n\n    return (\n        <Button onClick={handleClick} icon={icon ?? (isCopied ? <CheckOutlined /> : <CopyOutlined />)} {...props}>\n            {children ?? 'Copy'}\n        </Button>\n    );\n}\n\nexport default CopyButton;\n// export default React.memo(CopyButton, (prevProps, nextProps) => {\n//     return isEqual(omit(prevProps, 'value'), omit(nextProps, 'value')) && isEqualFunctions(prevProps.value, nextProps.value);\n// });\n","import { Dispatch, SetStateAction } from 'react';\nimport { isObject } from 'lodash';\nimport call from '../utils/call';\nimport ObjectKey from '../types/common/ObjectKey';\n\nexport interface TypedChangeEvent<T, P extends ObjectKey> {\n    target: {\n        [key in P]: T;\n    };\n}\n\nexport const isChangeEvent = (value: unknown): value is TypedChangeEvent<unknown, ObjectKey> => {\n    return isObject(value) && 'target' in value;\n};\n\nconst useChangeAnyStateHandler = <S, P extends ObjectKey>(\n    setState: Dispatch<SetStateAction<S>>,\n    property: P = 'value' as P\n) => {\n    return (value: TypedChangeEvent<S, P> | S) => {\n        const actualValue = call(() => {\n            if (isChangeEvent(value)) {\n                const event = value as TypedChangeEvent<S, P>;\n                return event.target[property];\n            }\n\n            return value;\n        });\n\n        setState(actualValue);\n    };\n};\n\nexport default useChangeAnyStateHandler;\n","import { Dispatch, SetStateAction, useCallback } from 'react';\n\nconst useChangeState = <S extends object>(setState: Dispatch<SetStateAction<S>>) => {\n    return useCallback(<K extends keyof S>(key: K, value: S[K]) => {\n        setState((state) => ({\n            ...state,\n            [key]: value\n        }));\n    }, []);\n};\n\nexport default useChangeState;\n","import { Dispatch, SetStateAction, useCallback } from 'react';\nimport call from '../utils/call';\nimport useChangeState from './useChangeState';\nimport { isChangeEvent, TypedChangeEvent } from './useChangeAnyStateHandler';\nimport ObjectKey from '../types/common/ObjectKey';\n\nconst useChangeStateHandler = <S extends object, P extends ObjectKey = 'value'>(\n    setState: Dispatch<SetStateAction<S>>,\n    property: P = 'value' as P\n) => {\n    const changeState = useChangeState(setState);\n\n    return useCallback(\n        <K extends keyof S, T extends S[K]>(key: K) => {\n            return (value: TypedChangeEvent<T, P> | T) => {\n                const actualValue = call(() => {\n                    if (isChangeEvent(value)) {\n                        const event = value as TypedChangeEvent<T, P>;\n                        return event.target[property];\n                    }\n\n                    return value;\n                });\n\n                changeState(key, actualValue);\n            };\n        },\n        [changeState]\n    );\n};\n\nexport default useChangeStateHandler;\n\n// const useChangeStateHandler = <S extends object, P extends ObjectKey = 'value'>(\n//     setState: Dispatch<SetStateAction<S>>,\n//     defaultEventProperty: P = 'value' as P\n// ) => {\n//     const changeState = useChangeState(setState);\n//\n//     return useCallback(\n//         <K extends keyof S, T extends S[K], EP extends ObjectKey = P>(key: K, eventProperty: EP = defaultEventProperty as unknown as EP) => {\n//             return (value: TypedChangeEvent<T, EP> | T) => {\n//                 const actualValue = call(() => {\n//                     if (isChangeEvent(value)) {\n//                         const event = value as TypedChangeEvent<T, EP>;\n//                         return event.target[eventProperty];\n//                     }\n//\n//                     return value;\n//                 });\n//\n//                 changeState(key, actualValue);\n//             };\n//         },\n//         [changeState]\n//     );\n// };\n","import React, { ReactNode, useMemo } from 'react';\nimport styles from './PageContainer.module.scss';\nimport { Space, SpaceProps, Tag } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport { ClockCircleOutlined, WarningOutlined } from '@ant-design/icons';\nimport classNames from 'classnames';\nimport DisqusThread from '../../../components/disqusThread/DisqusThread';\n\nexport enum PageTag {\n    WIP = 'WIP',\n    NOT_WORKING = 'NOT_WORKING'\n}\n\nexport interface PageContainerProps extends Omit<SpaceProps, 'title'> {\n    contentRef?: React.Ref<HTMLDivElement>;\n    contentClassName?: string;\n    title?: ReactNode;\n    description?: ReactNode;\n    titleExtra?: ReactNode;\n    tags?: PageTag[];\n    noPadding?: boolean;\n    noContentPadding?: boolean;\n    withComments?: boolean;\n}\n\nconst getTagNodes = (key: number | string): Readonly<Record<PageTag, ReactNode>> => ({\n    [PageTag.WIP]: (\n        <Tag color=\"blue\" icon={<ClockCircleOutlined />} key={key}>\n            Work In Progress\n        </Tag>\n    ),\n    [PageTag.NOT_WORKING]: (\n        <Tag color=\"red\" icon={<WarningOutlined />} key={key}>\n            Not Working\n        </Tag>\n    )\n});\n\nconst renderTag = (tag: PageTag, index: number) => getTagNodes(index)[tag];\n\nconst PageContainer = React.forwardRef<HTMLDivElement, PageContainerProps>((props, ref) => {\n    const {\n        title,\n        description,\n        titleExtra,\n        tags,\n        noPadding,\n        noContentPadding,\n        children,\n        className,\n        contentClassName,\n        contentRef,\n        withComments,\n        ...restProps\n    } = props;\n\n    const renderedTags = useMemo(() => tags?.map(renderTag), [tags]);\n\n    return (\n        <div\n            ref={ref}\n            className={classNames(\n                styles.container,\n                {\n                    [styles.noPadding]: noPadding,\n                    [styles.noContentPadding]: noContentPadding\n                },\n                className\n            )}\n            {...restProps}\n        >\n            {tags?.length && <div>{renderedTags}</div>}\n            {title && (\n                <Space direction=\"horizontal\" size=\"middle\" className={styles.headingContainer}>\n                    <h1 className=\"mb-0\">{title}</h1>\n                    {titleExtra}\n                </Space>\n            )}\n            {description && <Paragraph className=\"mb-2\">{description}</Paragraph>}\n\n            <div className={classNames(styles.contentContainer, contentClassName)} ref={contentRef}>\n                {children}\n                {withComments && <DisqusThread className=\"mt-4\" />}\n            </div>\n        </div>\n    );\n});\n\nexport default PageContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PageContainer_container__0XdUl\",\"noPadding\":\"PageContainer_noPadding__8qKdC\",\"noContentPadding\":\"PageContainer_noContentPadding__e8KpM\",\"headingContainer\":\"PageContainer_headingContainer__oss+6\",\"contentContainer\":\"PageContainer_contentContainer__1pGdM\"};","import React, { FC, HTMLProps, useMemo, useRef } from 'react';\nimport { DiscussionEmbed } from 'disqus-react';\nimport useAppLocation from '../../hooks/useAppLocation';\nimport useAppSettings from '../../hooks/useAppSettings';\n\ntype Props = HTMLProps<HTMLDivElement>;\n\ntype DiscussionEmbedConfig = DiscussionEmbed['props']['config'];\n\n// const handleReactionClick = (event: MouseEvent) => {\n//     const item = event.target;\n//\n//     console.log('CLICK', {item});\n// };\n\nconst DisqusThread: FC<Props> = ({ children, ...props }) => {\n    const appRoute = useAppLocation();\n    const { isCommentsBlockHidden } = useAppSettings();\n\n    const discussionContainerRef = useRef<HTMLDivElement>(null);\n    const getDiscussion: () => HTMLDivElement | undefined = () => {\n        return (discussionContainerRef.current?.firstElementChild ?? undefined) as HTMLDivElement | undefined;\n    };\n\n    const config = useMemo<DiscussionEmbedConfig>(\n        () => ({\n            url: new URL(appRoute?.path ?? '', window.location.origin).toString(),\n            identifier: appRoute?.path,\n            language: navigator.language\n        }),\n        [appRoute]\n    );\n\n    // useEffect(() => {\n    //     debugger;\n    //     const discussion = getDiscussion();\n    //     if (!discussion) {\n    //         return;\n    //     }\n    //\n    //     const reactionItemsContainer = discussion.querySelector('.reaction-items');\n    //     if (!reactionItemsContainer) {\n    //         return;\n    //     }\n    //\n    //     const reactionItems: NodeListOf<HTMLElement> = reactionItemsContainer.querySelectorAll('.reaction-item.reaction-item__enabled:not(.reaction-item__selected)');\n    //\n    //     reactionItems.forEach(item => {\n    //         item.addEventListener('click', handleReactionClick);\n    //     });\n    //\n    //     return () => {\n    //         reactionItems.forEach(item => {\n    //             item.removeEventListener('click', handleReactionClick);\n    //         });\n    //     };\n    // }, []);\n\n    if (isCommentsBlockHidden) {\n        return null;\n    }\n\n    return (\n        <div {...props} ref={discussionContainerRef}>\n            <DiscussionEmbed shortname=\"mrgrd56\" config={config} />\n            {children}\n        </div>\n    );\n};\n\nexport default DisqusThread;\n","import { DependencyList, EffectCallback, useRef } from 'react';\nimport { isEqual } from 'lodash';\nimport useSpecialEffect, { SpecialEffectOptions } from './useSpecialEffect';\n\nconst useDeepEffect = (effect: EffectCallback, deps: DependencyList, options?: SpecialEffectOptions) => {\n    const previousDepsRef = useRef<DependencyList>();\n\n    useSpecialEffect(\n        () => {\n            const previousDeps = previousDepsRef.current;\n            previousDepsRef.current = deps;\n\n            if (!isEqual(previousDeps, deps)) {\n                return effect();\n            }\n        },\n        deps,\n        options\n    );\n};\n\nexport default useDeepEffect;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\nimport PageContainer from '../../layouts/pages/pageContainer/PageContainer';\nimport { Button, Checkbox, Col, notification, Row, Slider, Space } from 'antd';\nimport Text from 'antd/lib/typography/Text';\nimport CopyButton from '../../components/copyButton/CopyButton';\nimport ExternalLink from '../../components/ExternalLink';\nimport getNpmPackageLink from '../../utils/getNpmPackageLink';\nimport { useDebounce, useDidMount, useLocalstorageState } from 'rooks';\nimport getLocalStorageKey from '../../utils/getLocalStorageKey';\nimport PasswordGenerator, { GenerateOptions } from 'generate-password-browser';\nimport useChangeStateHandler from '../../hooks/useChangeStateHandler';\nimport Flex from '../../components/flex/Flex';\nimport pluralize from 'pluralize';\nimport { SliderMarks } from 'antd/lib/slider';\nimport getErrorMessage from '../../utils/getErrorMessage';\nimport useDeepEffect from '../../hooks/useDeepEffect';\n\nconst titleExtra = (\n    <Text type=\"secondary\">\n        uses{' '}\n        <ExternalLink href={getNpmPackageLink('generate-password-browser')}>generate-password-browser</ExternalLink>\n    </Text>\n);\n\nconst initialOptions: GenerateOptions = {\n    length: 8,\n    lowercase: true,\n    uppercase: true,\n    numbers: true,\n    symbols: true\n};\n\nconst lengthSliderMarks: SliderMarks = {\n    [8]: '8',\n    [16]: '16',\n    [32]: '32',\n    [64]: '64'\n};\n\nconst generatePassword = (options: GenerateOptions) => {\n    try {\n        return PasswordGenerator.generate(options);\n    } catch (e) {\n        const message = getErrorMessage(e);\n        notification.error({\n            message: 'An error occurred',\n            description: message\n        });\n    }\n};\n\nconst PasswordGeneratorPage: FunctionComponent = () => {\n    const [options, setOptions] = useLocalstorageState<GenerateOptions>(\n        getLocalStorageKey('password-generator', 'options'),\n        initialOptions\n    );\n    const handleOptionChange = useChangeStateHandler(setOptions);\n    const handleOptionCheck = useChangeStateHandler(setOptions, 'checked');\n\n    const [password, setPassword] = useState(generatePassword(options));\n\n    const generateManually = useCallback((options: GenerateOptions) => {\n        const newPassword = generatePassword(options);\n        setPassword(newPassword);\n        return newPassword;\n    }, []);\n\n    const generate = useCallback(() => {\n        return generateManually(options);\n    }, [generateManually, options]);\n\n    const generateDebounced = useDebounce(generateManually, 25);\n\n    useDidMount(() => {\n        generate();\n    });\n\n    useDeepEffect(\n        () => {\n            generateDebounced(options);\n        },\n        [options],\n        { skipFirstRender: true }\n    );\n\n    return (\n        <PageContainer title=\"Password Generator\" titleExtra={titleExtra}>\n            <Col>\n                <Row>\n                    <Space className=\"mb-2\">\n                        <Text copyable className=\"fs-6\">\n                            {password}\n                        </Text>\n                    </Space>\n                </Row>\n                <Space className=\"mb-3\">\n                    <Button onClick={generate}>Generate</Button>\n                    <CopyButton value={password} onClick={generate}>\n                        Generate and copy\n                    </CopyButton>\n                </Space>\n                <Flex col>\n                    <Text className=\"text-wrap word-break\">{pluralize('character', options.length, true)}</Text>\n                    <Slider value={options.length} onChange={handleOptionChange('length')} marks={lengthSliderMarks} />\n                    <Checkbox checked={options.lowercase} onChange={handleOptionCheck('lowercase')}>\n                        Lowercase\n                    </Checkbox>\n                    <span />\n                    <Checkbox checked={options.uppercase} onChange={handleOptionCheck('uppercase')}>\n                        Uppercase\n                    </Checkbox>\n                    <span />\n                    <Checkbox checked={options.numbers} onChange={handleOptionCheck('numbers')}>\n                        Numbers\n                    </Checkbox>\n                    <span />\n                    <Checkbox checked={Boolean(options.symbols)} onChange={handleOptionCheck('symbols')}>\n                        Symbols\n                    </Checkbox>\n                    <span />\n                    <Checkbox checked={Boolean(options.strict)} onChange={handleOptionCheck('strict')}>\n                        Strict\n                    </Checkbox>\n                    <span />\n                    <Checkbox\n                        checked={Boolean(options.excludeSimilarCharacters)}\n                        onChange={handleOptionCheck('excludeSimilarCharacters')}\n                    >\n                        Exclude similar characters\n                    </Checkbox>\n                </Flex>\n            </Col>\n        </PageContainer>\n    );\n};\n\nexport default PasswordGeneratorPage;\n","const getErrorMessage = (error: any) => {\n    return error instanceof Error ? error.message : String(error);\n};\n\nexport default getErrorMessage;\n","const getLocalStorageKey = (scope: string, name: string): string => {\n    return `mrgrd56:${scope}/${name}`;\n};\n\nexport const NULL_LOCALSTORAGE_KEY = getLocalStorageKey('global', 'null');\n\nexport default getLocalStorageKey;\n","const getNpmPackageLink = (packageName: string): string => `https://www.npmjs.com/package/${packageName}`;\n\nexport default getNpmPackageLink;\n"],"names":["text","navigator","clipboard","writeText","blob","write","ClipboardItem","type","value","isFunction","copyEmpty","children","onClick","icon","props","useState","isCopied","setIsCopied","copiedTimeoutRef","useRef","handleClick","event","replacedValue","actualValue","computeValue","current","clearTimeout","isNil","isString","copyText","Blob","copyBlob","setTimeout","isChangeEvent","isObject","setState","property","call","target","useCallback","key","state","changeState","useChangeState","PageTag","appRoute","useAppLocation","isCommentsBlockHidden","useAppSettings","discussionContainerRef","config","useMemo","url","URL","path","window","location","origin","toString","identifier","language","ref","shortname","renderTag","tag","index","WIP","color","NOT_WORKING","getTagNodes","React","title","description","titleExtra","tags","noPadding","noContentPadding","className","contentClassName","contentRef","withComments","restProps","renderedTags","map","classNames","styles","length","direction","size","effect","deps","options","previousDepsRef","useSpecialEffect","previousDeps","isEqual","href","getNpmPackageLink","initialOptions","lowercase","uppercase","numbers","symbols","lengthSliderMarks","generatePassword","PasswordGenerator","e","message","getErrorMessage","notification","useLocalstorageState","getLocalStorageKey","setOptions","handleOptionChange","useChangeStateHandler","handleOptionCheck","password","setPassword","generateManually","newPassword","generate","generateDebounced","useDebounce","useDidMount","useDeepEffect","skipFirstRender","copyable","col","pluralize","onChange","marks","checked","Boolean","strict","excludeSimilarCharacters","error","Error","String","scope","name","NULL_LOCALSTORAGE_KEY","packageName"],"sourceRoot":""}