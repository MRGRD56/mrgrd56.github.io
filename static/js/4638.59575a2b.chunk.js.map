{"version":3,"file":"static/js/4638.59575a2b.chunk.js","mappings":"oMASA,EANiB,WACb,IAAQA,GAAWC,EAAAA,EAAAA,MAAXD,OAER,OAAOE,EAAAA,EAAAA,UAAQ,kBAAMC,OAAOC,YAAY,IAAIC,gBAAgBL,MAAiB,CAACA,KCLlF,EAA4B,mCAA5B,EAAwE,gC,2CCoBxE,EAb8B,SAACM,EAAoCC,GAC/D,OAGIC,EAAAA,EAAAA,KAFUC,GADd,SACIC,MADJ,MAEWC,GAFX,SAEIA,KAFJ,OAKAC,EAAAA,EAAAA,YAAU,WACFD,EAAKE,eACLP,EAAOG,KAFN,kBAIFF,GAJE,CAIII,M,sBCkBjB,EAvB2C,WACvC,MAAwBG,IAAhBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAKD,GAILE,GACI,SAACC,IACGC,EAAAA,EAAAA,GAAaD,GAAsB,SAACE,GAChCA,EAAQJ,MAAR,OAAgBA,QAAhB,IAAgBA,EAAAA,EAASK,EAAAA,GAAAA,YAAAA,WAGjC,CAACL,KAID,gBAAKM,UAAWC,EAAhB,UACI,mBAAQD,UAAWC,EAAeC,IAAKT,QAdpC,SAAC,KAAD,CAAUU,GAAIJ,EAAAA,GAAAA,QAAAA,S,qCCL7B,IANqB,SAAIZ,EAAuCiB,GAC5DjB,GAAS,SAACC,GACN,OAAOiB,EAAAA,EAAAA,IAAQjB,EAAOgB","sources":["hooks/useQuery.ts","webpack://mrgrd56.github.io/./src/pages/dataUrlViewPage/DataUrlViewPage.module.scss?5fe7","hooks/useRouteContextEffect.ts","pages/dataUrlViewPage/DataUrlViewPage.tsx","utils/produceState.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nconst useQuery = <T extends object = Record<string, string>>(): T extends any[] ? never : T => {\n    const { search } = useLocation();\n\n    return useMemo(() => Object.fromEntries(new URLSearchParams(search)) as any, [search]);\n};\n\nexport default useQuery;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"DataUrlViewPage_container__pOIpq\",\"iframe\":\"DataUrlViewPage_iframe__Y6Ciu\"};","import useRouteContext from './useRouteContext';\r\nimport { DependencyList, useEffect } from 'react';\r\nimport { RouteContextType } from '../context/RouteContext';\r\n\r\ndeclare const UNDEFINED_VOID_ONLY: unique symbol;\r\ntype Destructor = () => void | { [UNDEFINED_VOID_ONLY]: never };\r\ntype RouteContextEffectCallback = (setState: RouteContextType['state'][1]) => void | Destructor;\r\n\r\nconst useRouteContextEffect = (effect: RouteContextEffectCallback, deps: DependencyList) => {\r\n    const {\r\n        state: [, setState],\r\n        meta: [meta]\r\n    } = useRouteContext();\r\n\r\n    useEffect(() => {\r\n        if (meta.isInitialized) {\r\n            effect(setState);\r\n        }\r\n    }, [...deps, meta]);\r\n};\r\n\r\nexport default useRouteContextEffect;\r\n","import React, { FunctionComponent } from 'react';\r\nimport useQuery from '../../hooks/useQuery';\r\nimport styles from './DataUrlViewPage.module.scss';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { routes } from '../../constants/router/routes';\r\nimport useRouteContextEffect from '../../hooks/useRouteContextEffect';\r\nimport produceState from '../../utils/produceState';\r\n\r\nexport interface DataUrlViewPageQueryParams {\r\n    data?: string;\r\n    title?: string;\r\n}\r\n\r\nconst DataUrlViewPage: FunctionComponent = () => {\r\n    const { data, title } = useQuery<DataUrlViewPageQueryParams>();\r\n\r\n    if (!data) {\r\n        return <Navigate to={routes.dataUrl.path} />;\r\n    }\r\n\r\n    useRouteContextEffect(\r\n        (setRouteContentState) => {\r\n            produceState(setRouteContentState, (context) => {\r\n                context.title = title ?? routes.dataUrlView.title;\r\n            });\r\n        },\r\n        [title]\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <iframe className={styles.iframe} src={data} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DataUrlViewPage;\r\n","import { Dispatch, SetStateAction } from 'react';\nimport produce from 'immer';\n\ntype RecipeReturnType<S> = S | void | undefined;\nexport type StateProducerRecipe<S> = (draft: S) => RecipeReturnType<S>;\n\nconst produceState = <S>(setState: Dispatch<SetStateAction<S>>, recipe: StateProducerRecipe<S>): void => {\n    setState((state) => {\n        return produce(state, recipe);\n    });\n};\n\nexport default produceState;\n"],"names":["search","useLocation","useMemo","Object","fromEntries","URLSearchParams","effect","deps","useRouteContext","setState","state","meta","useEffect","isInitialized","useQuery","data","title","useRouteContextEffect","setRouteContentState","produceState","context","routes","className","styles","src","to","recipe","produce"],"sourceRoot":""}