{"version":3,"file":"static/js/4112.5bdfb391.chunk.js","mappings":"oIAAA","sources":["../node_modules/@types/lodash/common/seq.d.ts"],"sourcesContent":["export default \"import _ = require(\\\"../index\\\");\\ndeclare module \\\"../index\\\" {\\n    // chain\\n    interface LoDashStatic {\\n        /**\\n         * Creates a lodash object that wraps value with explicit method chaining enabled.\\n         *\\n         * @param value The value to wrap.\\n         * @return Returns the new lodash wrapper instance.\\n         */\\n        chain<TrapAny extends { __lodashAnyHack: any }>(value: TrapAny): CollectionChain<any> & FunctionChain<any> & ObjectChain<any> & PrimitiveChain<any> & StringChain;\\n        /**\\n         * @see _.chain\\n         */\\n        chain<T extends null | undefined>(value: T): PrimitiveChain<T>;\\n        /**\\n         * @see _.chain\\n         */\\n        chain(value: string): StringChain;\\n        /**\\n         * @see _.chain\\n         */\\n        chain(value: string | null | undefined): StringNullableChain;\\n        /**\\n         * @see _.chain\\n         */\\n        chain<T extends (...args: any[]) => any>(value: T): FunctionChain<T>;\\n        /**\\n         * @see _.chain\\n         */\\n        chain<T = any>(value: List<T> | null | undefined): CollectionChain<T>;\\n        /**\\n         * @see _.chain\\n         */\\n        chain<T extends object>(value: T | null | undefined): ObjectChain<T>;\\n        /**\\n         * @see _.chain\\n         */\\n        chain<T>(value: T): PrimitiveChain<T>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.chain\\n         */\\n        chain(): CollectionChain<T>;\\n    }\\n    interface String {\\n        /**\\n         * @see _.chain\\n         */\\n        chain(): StringChain;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.chain\\n         */\\n        chain(): ObjectChain<T>;\\n    }\\n    interface Primitive<T> {\\n        /**\\n         * @see _.chain\\n         */\\n        chain(): PrimitiveChain<T>;\\n    }\\n    interface Function<T extends (...args: any) => any> {\\n        /**\\n         * @see _.chain\\n         */\\n        chain(): FunctionChain<T>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.chain\\n         */\\n        chain(): this;\\n    }\\n    // prototype.commit\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.commit\\n         */\\n        commit(): this;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.commit\\n         */\\n        commit(): this;\\n    }\\n    // prototype.plant\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.plant\\n         */\\n        plant(value: unknown): this;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.plant\\n         */\\n        plant(value: unknown): this;\\n    }\\n    // prototype.reverse\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.reverse\\n         */\\n        reverse(): this;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.reverse\\n         */\\n        reverse(): this;\\n    }\\n    // prototype.toJSON\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.toJSON\\n         */\\n        toJSON(): TValue;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.toJSON\\n         */\\n        toJSON(): TValue;\\n    }\\n    // prototype.toString\\n    interface LoDashWrapper<TValue> {\\n        /**\\n         * @see _.toString\\n         */\\n        toString(): string;\\n    }\\n    // prototype.value\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.value\\n         */\\n        value(): TValue;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.value\\n         */\\n        value(): TValue;\\n    }\\n    // prototype.valueOf\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.valueOf\\n         */\\n        valueOf(): TValue;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.valueOf\\n         */\\n        valueOf(): TValue;\\n    }\\n    // tap\\n    interface LoDashStatic {\\n        /**\\n         * This method invokes interceptor and returns value. The interceptor is invoked with one\\n         * argument; (value). The purpose of this method is to \\\"tap into\\\" a method chain in order to perform operations\\n         * on intermediate results within the chain.\\n         *\\n         * @param value The value to provide to interceptor.\\n         * @param interceptor The function to invoke.\\n         * @return Returns value.\\n         */\\n        tap<T>(value: T, interceptor: (value: T) => void): T;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.tap\\n         */\\n        tap(interceptor: (value: TValue) => void): this;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.tap\\n         */\\n        tap(interceptor: (value: TValue) => void): this;\\n    }\\n    // thru\\n    interface LoDashStatic {\\n        /**\\n         * This method is like _.tap except that it returns the result of interceptor.\\n         *\\n         * @param value The value to provide to interceptor.\\n         * @param interceptor The function to invoke.\\n         * @return Returns the result of interceptor.\\n         */\\n        thru<T, TResult>(value: T, interceptor: (value: T) => TResult): TResult;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.thru\\n         */\\n        thru<TResult>(interceptor: (value: TValue) => TResult): ImpChain<TResult>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.thru\\n         */\\n        thru<TResult>(interceptor: (value: TValue) => TResult): ExpChain<TResult>;\\n    }\\n}\\n\";"],"names":[],"sourceRoot":""}