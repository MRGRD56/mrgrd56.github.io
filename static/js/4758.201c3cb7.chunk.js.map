{"version":3,"file":"static/js/4758.201c3cb7.chunk.js","mappings":"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","sources":["layouts/pages/pageContainer/PageContainer.tsx","webpack://mrgrd56.github.io/./src/layouts/pages/pageContainer/PageContainer.module.scss?0d25","pages/snakeGamePage/components/snakeGame/types/SnakeDirection.ts","webpack://mrgrd56.github.io/./src/pages/snakeGamePage/components/snakeGame/SnakeGame.module.scss?436e","pages/snakeGamePage/components/snakeGame/types/SnakeGameAreaSettings.ts","pages/snakeGamePage/components/snakeGame/types/Point2D.ts","pages/snakeGamePage/components/snakeGame/types/SnakePart.ts","pages/snakeGamePage/components/snakeGame/components/snakePartComponent/SnakePartComponent.tsx","pages/snakeGamePage/components/snakeGame/types/Snake.ts","components/focused/Focused.tsx","pages/snakeGamePage/components/snakeGame/SnakeGame.tsx","pages/snakeGamePage/SnakeGamePage.tsx","utils/processRef.ts"],"sourcesContent":["import React, { ReactNode, useMemo } from 'react';\nimport styles from './PageContainer.module.scss';\nimport { Space, SpaceProps, Tag } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport { ClockCircleOutlined, WarningOutlined } from '@ant-design/icons';\nimport classNames from 'classnames';\n\nexport enum PageTag {\n    WIP = 'WIP',\n    NOT_WORKING = 'NOT_WORKING'\n}\n\nexport interface PageContainerProps extends Omit<SpaceProps, 'title'> {\n    contentClassName?: string;\n    title?: ReactNode;\n    description?: ReactNode;\n    titleExtra?: ReactNode;\n    tags?: PageTag[];\n    noPadding?: boolean;\n    noContentPadding?: boolean;\n}\n\nconst getTagNodes = (key: number | string): Readonly<Record<PageTag, ReactNode>> => ({\n    [PageTag.WIP]: (\n        <Tag color=\"blue\" icon={<ClockCircleOutlined />} key={key}>\n            Work In Progress\n        </Tag>\n    ),\n    [PageTag.NOT_WORKING]: (\n        <Tag color=\"red\" icon={<WarningOutlined />} key={key}>\n            Not Working\n        </Tag>\n    )\n});\n\nconst renderTag = (tag: PageTag, index: number) => getTagNodes(index)[tag];\n\nconst PageContainer = React.forwardRef<HTMLDivElement, PageContainerProps>((props, ref) => {\n    const {\n        title,\n        description,\n        titleExtra,\n        tags,\n        noPadding,\n        noContentPadding,\n        children,\n        className,\n        contentClassName,\n        ...restProps\n    } = props;\n\n    const renderedTags = useMemo(() => tags?.map(renderTag), [tags]);\n\n    return (\n        <div\n            ref={ref}\n            className={classNames(\n                styles.container,\n                {\n                    [styles.noPadding]: noPadding,\n                    [styles.noContentPadding]: noContentPadding\n                },\n                className\n            )}\n            {...restProps}\n        >\n            {tags?.length && <div>{renderedTags}</div>}\n            {title && (\n                <Space direction=\"horizontal\" size=\"middle\" className={styles.headingContainer}>\n                    <h1 className=\"mb-0\">{title}</h1>\n                    {titleExtra}\n                </Space>\n            )}\n            {description && <Paragraph className=\"mb-2\">{description}</Paragraph>}\n\n            <div className={classNames(styles.contentContainer, contentClassName)}>{children}</div>\n        </div>\n    );\n});\n\nexport default PageContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PageContainer_container__KmrZF\",\"noPadding\":\"PageContainer_noPadding__74Oon\",\"noContentPadding\":\"PageContainer_noContentPadding__rSQgs\",\"headingContainer\":\"PageContainer_headingContainer__ScW-F\",\"contentContainer\":\"PageContainer_contentContainer__l-gCb\"};","import Point2D from './Point2D';\n\nenum SnakeDirection {\n    UP,\n    RIGHT,\n    DOWN,\n    LEFT\n}\n\nexport const directions: Readonly<Record<SnakeDirection, Point2D>> = {\n    [SnakeDirection.UP]: new Point2D(0, -1),\n    [SnakeDirection.RIGHT]: new Point2D(1, 0),\n    [SnakeDirection.DOWN]: new Point2D(0, 1),\n    [SnakeDirection.LEFT]: new Point2D(-1, 0)\n};\n\nexport default SnakeDirection;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"SnakeGame_container__oNBJn\"};","class SnakeGameAreaSettings {\n    constructor(public readonly rowCells: number) {}\n\n    public getCellSize(areaWidth: number): number {\n        return areaWidth / this.rowCells;\n    }\n}\n\nexport default SnakeGameAreaSettings;\n","class Point2D {\n    public constructor(public readonly x: number, public readonly y: number) {}\n\n    public add(that: Point2D): Point2D {\n        return new Point2D(this.x + that.x, this.y + that.y);\n    }\n\n    public clone(): Point2D {\n        return new Point2D(this.x, this.y);\n    }\n}\n\nexport default Point2D;\n","import SnakeGameAreaSettings from './SnakeGameAreaSettings';\nimport Point2D from './Point2D';\n\nclass SnakePart extends Point2D {\n    public constructor(x: number, y: number) {\n        super(x, y);\n    }\n\n    public add(that: Point2D): SnakePart {\n        return new SnakePart(this.x + that.x, this.y + that.y);\n    }\n\n    public clone(): SnakePart {\n        return new SnakePart(this.x, this.y);\n    }\n\n    public getView(settings: SnakeGameAreaSettings, areaWidth: number) {\n        const size = settings.getCellSize(areaWidth);\n\n        return {\n            size,\n            x: this.x * size,\n            y: this.y * size\n        };\n    }\n}\n\nexport default SnakePart;\n","import React, { FunctionComponent } from 'react';\nimport SnakePart from '../../types/SnakePart';\nimport SnakeGameAreaSettings from '../../types/SnakeGameAreaSettings';\nimport { Rect } from 'react-konva';\n\ninterface Props {\n    settings: SnakeGameAreaSettings;\n    value: SnakePart;\n    areaWidth: number;\n    fill: string;\n}\n\nconst SnakePartComponent: FunctionComponent<Props> = ({ value, settings, areaWidth, fill }) => {\n    const { x, y, size } = value.getView(settings, areaWidth);\n\n    return <Rect x={x} y={y} width={size} height={size} fill={fill} />;\n};\n\nexport default React.memo(SnakePartComponent);\n","import SnakePart from './SnakePart';\nimport SnakeDirection, { directions } from './SnakeDirection';\nimport Point2D from './Point2D';\nimport SnakeGameAreaSettings from './SnakeGameAreaSettings';\n\nclass Snake {\n    public constructor(public readonly parts: SnakePart[] = [], public readonly direction: SnakeDirection) {\n        this.directionCoords = directions[direction];\n    }\n\n    private readonly directionCoords: Point2D;\n\n    public setDirection(value: SnakeDirection): Snake {\n        // const isTopToBottom = this.direction === SnakeDirection.TOP && value === SnakeDirection.BOTTOM;\n        // const isRightToLeft = this.direction === SnakeDirection.RIGHT && value === SnakeDirection.LEFT;\n        // const isBottomToTop = this.direction === SnakeDirection.BOTTOM && value === SnakeDirection.TOP;\n        // const isLeftToRight = this.direction === SnakeDirection.LEFT && value === SnakeDirection.RIGHT;\n\n        const newDirection = directions[value];\n\n        if (this.directionCoords.x + newDirection.x === 0 && this.directionCoords.y + newDirection.y === 0) {\n            return this;\n        }\n\n        return new Snake(this.parts, value);\n    }\n\n    public move({ rowCells }: SnakeGameAreaSettings): Snake {\n        const newParts: SnakePart[] = this.parts.map((value, index) => {\n            if (index === 0) {\n                const possibleValue = value.add(this.directionCoords);\n                const { x, y } = possibleValue;\n\n                if (this.direction === SnakeDirection.LEFT && x < 0) {\n                    return new SnakePart(rowCells - 1, y);\n                }\n\n                if (this.direction === SnakeDirection.RIGHT && x >= rowCells) {\n                    return new SnakePart(0, y);\n                }\n\n                if (this.direction === SnakeDirection.UP && y < 0) {\n                    return new SnakePart(x, rowCells - 1);\n                }\n\n                if (this.direction === SnakeDirection.DOWN && y >= rowCells) {\n                    return new SnakePart(x, 0);\n                }\n\n                return possibleValue;\n            }\n\n            const previous = this.parts[index - 1];\n            return previous.clone();\n        });\n\n        return new Snake(newParts, this.direction);\n    }\n}\n\nexport default Snake;\n","import React, { HTMLProps, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\n\ninterface Props extends HTMLProps<HTMLDivElement> {\n    ref?: React.RefObject<HTMLDivElement>;\n}\n\nconst Focused = React.forwardRef<HTMLDivElement, Props>(({ tabIndex, className, ...props }, ref) => {\n    const divRef = useRef<HTMLDivElement>();\n\n    const wasFocusedRef = useRef<boolean>(false);\n\n    useEffect(() => {\n        if (wasFocusedRef.current) {\n            return;\n        }\n\n        if (divRef.current) {\n            divRef.current.focus();\n            wasFocusedRef.current = true;\n        }\n    }, []);\n\n    const actualRef = (div: HTMLDivElement) => {\n        divRef.current = div;\n\n        if (ref) {\n            if ('current' in ref) {\n                ref.current = div;\n            } else {\n                ref(div);\n            }\n        }\n    };\n\n    return (\n        <div\n            {...props}\n            tabIndex={tabIndex ?? 0}\n            ref={actualRef}\n            className={classNames('focus-visible-unstyled', className)}\n        />\n    );\n});\n\nexport default Focused;\n","import React, { KeyboardEventHandler, useCallback, useEffect, useRef, useState } from 'react';\nimport { Layer, Stage } from 'react-konva';\nimport styles from './SnakeGame.module.scss';\nimport SnakeGameAreaSettings from './types/SnakeGameAreaSettings';\nimport SnakePart from './types/SnakePart';\nimport SnakePartComponent from './components/snakePartComponent/SnakePartComponent';\nimport Snake from './types/Snake';\nimport SnakeDirection from './types/SnakeDirection';\nimport classNames from 'classnames';\nimport './SnakeGame.scss';\nimport Focused from '../../../../components/focused/Focused';\nimport processRef from '../../../../utils/processRef';\n\nconst snakeSpeed = 150;\nconst maxSnakeAreaSize = 500;\n\nconst getInitialSnake = (): Snake =>\n    new Snake(\n        [new SnakePart(6, 2), new SnakePart(5, 2), new SnakePart(4, 2), new SnakePart(3, 2), new SnakePart(2, 2)],\n        SnakeDirection.RIGHT\n    );\n\nconst settings = new SnakeGameAreaSettings(20);\n\nconst SnakeGame = () => {\n    const [snake, setSnake] = useState<Snake>(getInitialSnake());\n    const [areaWidth, setAreaWidth] = useState<number>(0);\n\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    const handleKeyDown = useCallback<KeyboardEventHandler>((event) => {\n        let newDirection: SnakeDirection;\n\n        switch (event.key) {\n            case 'w':\n            case 'ArrowUp':\n                newDirection = SnakeDirection.UP;\n                break;\n            case 'd':\n            case 'ArrowRight':\n                newDirection = SnakeDirection.RIGHT;\n                break;\n            case 's':\n            case 'ArrowDown':\n                newDirection = SnakeDirection.DOWN;\n                break;\n            case 'a':\n            case 'ArrowLeft':\n                newDirection = SnakeDirection.LEFT;\n                break;\n            default:\n                return;\n        }\n\n        event.preventDefault();\n\n        setSnake((snake) => snake.setDirection(newDirection));\n    }, []);\n\n    useEffect(() => {\n        processRef(containerRef, (container) => {\n            setAreaWidth(Math.min(container.clientWidth - 16, maxSnakeAreaSize));\n            container.focus();\n        });\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setSnake((snake) => snake.move(settings));\n        }, snakeSpeed);\n\n        return () => {\n            clearInterval(interval);\n        };\n    }, []);\n\n    return (\n        <Focused\n            className={classNames(styles.container, 'focus-visible-unstyled', 'SnakeGame__container')}\n            ref={containerRef}\n            onKeyDown={handleKeyDown}\n        >\n            <Stage className={styles.canvasContainer} width={areaWidth} height={areaWidth}>\n                <Layer>\n                    {snake.parts.map((part, index) => (\n                        <SnakePartComponent\n                            key={index}\n                            value={part}\n                            settings={settings}\n                            areaWidth={areaWidth}\n                            fill=\"#2196f3\"\n                        />\n                    ))}\n                </Layer>\n            </Stage>\n        </Focused>\n    );\n};\n\nexport default SnakeGame;\n","import React from 'react';\nimport PageContainer, { PageTag } from '../../layouts/pages/pageContainer/PageContainer';\nimport SnakeGame from './components/snakeGame/SnakeGame';\n\nconst tags = [PageTag.WIP];\n\nconst SnakeGamePage = () => {\n    return (\n        <PageContainer title=\"Snake Game\" tags={tags}>\n            <SnakeGame />\n        </PageContainer>\n    );\n};\n\nexport default SnakeGamePage;\n","import { MutableRefObject, RefObject } from 'react';\nimport { isNil } from 'lodash';\nimport NonNil from '../types/common/NonNil';\nimport Nil from '../types/common/Nil';\n\ntype AnyRefObject<T> = RefObject<T> | MutableRefObject<T>;\n\ntype ExtractRefType<R extends AnyRefObject<unknown>> = R extends AnyRefObject<infer T> ? T : never;\n\nfunction processRef<R extends MutableRefObject<unknown>, V1>(\n    ref: R,\n    handler: (value: NonNil<ExtractRefType<R>>) => V1\n): V1 | undefined;\nfunction processRef<R extends MutableRefObject<unknown>, V1, V2>(\n    ref: R,\n    handler: (value: NonNil<ExtractRefType<R>>) => V1,\n    nilHandler: (value: Extract<ExtractRefType<R>, Nil>) => V2\n): V1 | V2;\nfunction processRef<R extends MutableRefObject<unknown>, V1, V2>(\n    ref: R,\n    handler: (value: NonNil<ExtractRefType<R>>) => V1,\n    nilHandler?: (value: Extract<ExtractRefType<R>, Nil>) => V2\n): V1 | V2 | undefined {\n    if (isNil(ref.current)) {\n        if (!nilHandler) {\n            return undefined;\n        }\n\n        return nilHandler(ref.current as Extract<ExtractRefType<R>, Nil>);\n    }\n\n    return handler(ref.current as NonNil<ExtractRefType<R>>);\n}\n\nexport default processRef;\n\n// TRASH\n\n// type RefsToValues<Refs extends Array<MutableRefObject<any>>> =\n//     Refs extends [infer RefType, ...infer RestRefTypes]\n//         ? RefType extends MutableRefObject<infer Type>\n//             ? RestRefTypes extends Array<MutableRefObject<any>>\n//                 ? [NotNil<Type>, ...RefsToValues<RestRefTypes>]\n//                 : [1]\n//             : [2]\n//         : [];\n\n// type TestA = RefsToValues<[MutableRefObject<number | undefined>]>;\n\n// const handleRefs = <Refs extends Array<MutableRefObject<any>>>(refs: Refs, handler: (values: RefsToValues<Refs>) => void): void => {\n//     const values = [];\n//     for (const ref of refs) {\n//         if (isNil(ref.current)) {\n//             return;\n//         }\n//\n//         values.push(ref.current);\n//     }\n//\n//     handler(values as RefsToValues<Refs>);\n// };\n\n// type UndefinedLike = undefined | void | never;\n\n// type Voidy<T extends unknown | UndefinedLike> =\n//     Extract<T, UndefinedLike> extends never\n//         ? never\n//         : T;\n// T extends infer V | UndefinedLike\n//     ? V extends UndefinedLike\n//         ? never\n//         : T\n//     : never;\n\n// type Simplify<T> =\n//     T extends infer T1 | void | undefined\n//         ? T1 extends never\n//             ? T\n//             : Exclude<T, void> | undefined\n//         : T;\n// T extends undefined\n//     ? T extends void\n//         ? T extends void & undefined\n//             ? Exclude<T, void> | undefined\n//         : 2\n//     : 3\n// : 4;\n// T extends infer R | undefined | void\n//     ? R | undefined\n//     : T extends infer R | undefined\n//         ? R extends never\n//             ? void\n//         : T\n//     : T;\n"],"names":["PageTag","getTagNodes","key","WIP","color","icon","ClockCircleOutlined","NOT_WORKING","WarningOutlined","renderTag","tag","index","React","props","ref","title","description","titleExtra","tags","noPadding","noContentPadding","children","className","contentClassName","restProps","renderedTags","useMemo","map","classNames","styles","length","direction","size","Paragraph","SnakeDirection","SnakeGameAreaSettings","rowCells","areaWidth","this","Point2D","x","y","that","SnakePart","settings","getCellSize","SnakePartComponent","value","fill","getView","width","height","directions","UP","RIGHT","DOWN","LEFT","Snake","parts","directionCoords","newDirection","possibleValue","add","clone","tabIndex","divRef","useRef","wasFocusedRef","useEffect","current","focus","div","useState","snake","setSnake","setAreaWidth","containerRef","handleKeyDown","useCallback","event","preventDefault","setDirection","processRef","container","Math","min","clientWidth","interval","setInterval","move","clearInterval","onKeyDown","part","PageContainer","handler","nilHandler","isNil"],"sourceRoot":""}