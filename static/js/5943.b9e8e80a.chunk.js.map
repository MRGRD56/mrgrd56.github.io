{"version":3,"file":"static/js/5943.b9e8e80a.chunk.js","mappings":"8QAQMA,GAAc,SAAC,IAAD,CAAMC,KAAK,UA8B/B,IArB4C,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,UAAWC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAaC,GAAY,YACvFC,GAAeC,EAAAA,EAAAA,KAAfD,WAEFE,GAAeC,EAAAA,EAAAA,cACjB,SAACC,EAAOC,GACI,OAARP,QAAQ,IAARA,GAAAA,EAAQ,OAAGM,QAAH,IAAGA,EAAAA,EAAS,GAAIC,KAE5B,CAACP,IAGL,OACI,SAAC,MAAD,QACID,MAAK,OAAEA,QAAF,IAAEA,EAAAA,EAAUG,EAAa,UAAY,QAC1CL,UAAWW,GAAAA,CAAW,oBAAqBX,GAC3CC,QAAO,OAAEA,QAAF,IAAEA,EAAAA,EAAWH,EACpBK,SAAUI,GACNH,M,oICzBhB,EARiB,SAACQ,GACd,GAAKA,EAIL,OAAOC,UAAUC,UAAUC,UAAUH,I,oDCGzC,EARiB,SAACI,GACd,OAAOH,UAAUC,UAAUG,MAAM,CAC7B,IAAIC,eAAJ,UACKF,EAAKG,KAAOH,O,+DCkDzB,MAtCA,YAA+G,IAAlEP,EAAiE,EAAjEA,MAAOW,EAA0D,EAA1DA,UAAWC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,KAASnB,GAAmB,YAC1G,GAAgCoB,EAAAA,EAAAA,WAAkB,GAAlD,eAAOC,EAAP,KAAiBC,EAAjB,KAEMC,GAAmBC,EAAAA,EAAAA,UAEnBC,EAAiD,mCAAG,WAAOC,GAAP,4EAChDC,EADgD,OAChCT,QADgC,IAChCA,OADgC,EAChCA,EAAUQ,IAE1BE,EAHgD,OAGlCD,QAHkC,IAGlCA,EAAAA,EAAiBtB,IAEhBW,EALiC,oDASlDO,EAAiBM,SACjBC,aAAaP,EAAiBM,WAG9BE,EAAAA,EAAAA,OAAMH,MAAgBI,EAAAA,EAAAA,UAASJ,GAbmB,gCAc5CK,EAAQ,OAACL,QAAD,IAACA,EAAAA,EAAe,IAdoB,YAgBlDA,aAAuBM,MAhB2B,kCAiB5CC,EAASP,GAjBmC,QAoBtDN,GAAY,GACZC,EAAiBM,QAAUO,YAAW,WAClCd,GAAY,KACb,KAvBmD,4CAAH,sDA0BvD,OACI,SAAC,KAAD,gBAAQJ,QAASO,EAAaN,KAAI,OAAEA,QAAF,IAAEA,EAAAA,EAASE,GAAW,SAACgB,EAAA,EAAD,KAAoB,SAACC,EAAA,EAAD,KAAuBtC,GAAnG,oBACKiB,QADL,IACKA,EAAAA,EAAY,Y,wHChCnBsB,EACF,SAACC,GAAD,OACA,SAAIC,EAAyBC,EAAkCC,GAC3D,OAA0BvB,EAAAA,EAAAA,YAA1B,eAAOf,EAAP,KAAcuC,EAAd,KACMC,GAAaC,EAAAA,EAAAA,GAAWL,GAExBM,GAAmBvB,EAAAA,EAAAA,SACrBwB,EAAAA,EAAAA,IAAK,WACD,IAAMC,EAA2BC,OAAOC,OAAO,CAC3CC,WAAWC,EAAAA,EAAAA,OAGf,OAAOb,GAAW,WACd,IAAMnC,EAAQwC,EAAWhB,QAAQoB,IAnBlC,SAAI5C,EAAqBiD,GACxC,OAAOC,EAAAA,EAAAA,UAASlD,IAAU,cAAeA,GAASA,IAAUiD,GAoBvCE,CAAWnD,EAAO4C,IACnBL,EAASvC,KAEdsC,OAETd,QAMF,OAJA4B,EAAAA,EAAAA,YAAU,WACNV,MACDL,GAEIrC,IAGFqD,EAAmBnB,EAAwBoB,EAAAA,UACxBpB,EAAwBqB,EAAAA,W,mGCnCxD,EATuB,SAAmBC,GACtC,OAAOzD,EAAAA,EAAAA,cAAY,SAAoB0D,EAAQzD,GAC3CwD,GAAS,SAACE,GAAD,eAAC,UACHA,GADE,cAEJD,EAAMzD,SAEZ,K,SCJM2D,EAAgB,SAAC3D,GAC1B,OAAO4D,EAAAA,EAAAA,cAAa5D,IAAU,WAAYA,GCsB9C,EAtB8B,SAAmBwD,GAC7C,IAAMK,EAAcC,EAAeN,GAEnC,OAAOzD,EAAAA,EAAAA,cACH,SAAoC0D,GAChC,OAAO,SAACzD,GACJ,IAAMuB,GAAcoB,EAAAA,EAAAA,IAAK,WACrB,OAAIgB,EAAc3D,GACAA,EACD+D,OAAO/D,MAGjBA,KAGX6D,EAAYJ,EAAKlC,MAGzB,CAACsC,M,qGCtBT,GAAgB,oBAAoB,wDAAwD,cAAgB,oDAAoD,UAAY,gDAAgD,IAAM,0CAA0C,QAAU,8CAA8C,UAAY,gDAAgD,SAAW,gD,qKC6D3Y,EA3C+D,SAAClE,GAC5D,IACIqE,EAWArE,EAXAqE,UACAC,EAUAtE,EAVAsE,WACAC,EASAvE,EATAuE,UACAC,EAQAxE,EARAwE,WACAC,EAOAzE,EAPAyE,KACAC,EAMA1E,EANA0E,MACAC,EAKA3E,EALA2E,MACA1D,EAIAjB,EAJAiB,SACArB,EAGAI,EAHAJ,UACAgF,EAEA5E,EAFA4E,UACGC,GAXP,OAYI7E,EAZJ,GAcA,OACI,UAAC8E,EAAA,GAAD,gBACIF,UAAS,OAAEA,QAAF,IAAEA,GAAAA,EACXhF,UAAWW,GAAAA,CAAWwE,EAAAA,cAAsBnF,IACxCiF,GAHR,eAKI,UAAC,IAAD,CAAKjF,UAAWmF,EAAAA,UAAhB,WACI,UAAC,IAAD,CAAKC,GAAI,GAAIpF,UAAWW,GAAAA,CAAWwE,EAAAA,IAAYA,EAAAA,SAA/C,WACI,iBAAKnF,UAAWmF,EAAAA,UAAhB,WACI,eAAInF,UAAWmF,EAAAA,SAAf,SAAiCV,IAChCE,KAEJE,MAEL,UAAC,IAAD,CAAKO,GAAI,GAAIpF,UAAWW,GAAAA,CAAWwE,EAAAA,IAAYA,EAAAA,UAA/C,WACI,iBAAKnF,UAAWmF,EAAAA,UAAhB,WACI,eAAInF,UAAWmF,EAAAA,SAAf,SAAiCT,IAChCE,KAEJE,KAEJC,KAEJ1D,Q,iFClDDgE,E,0CCNZ,EAA4B,iCAA5B,EAAyE,iCAAzE,EAA6H,wCAA7H,EAAwL,wCAAxL,EAAmP,wC,8MDMnP,SAAYA,GAAAA,EAAAA,IAAAA,MAAAA,EAAAA,YAAAA,cAAZ,CAAYA,IAAAA,EAAAA,KAeZ,IAAMC,EAAc,SAACpB,GAAD,4BACfmB,EAAQE,KACL,SAAC,IAAD,CAAKC,MAAM,OAAOjE,MAAM,SAACkE,EAAA,EAAD,IAAxB,6BAAsDvB,KAF1C,SAMfmB,EAAQK,aACL,SAAC,IAAD,CAAKF,MAAM,MAAMjE,MAAM,SAACoE,EAAA,EAAD,IAAvB,wBAAiDzB,IAPrC,GAad0B,EAAY,SAACC,EAAcC,GAAf,OAAiCR,EAAYQ,GAAOD,IA6CtE,EA3CsBE,EAAAA,YAAqD,SAAC3F,EAAO4F,GAAS,IAAD,EAEnFC,EAUA7F,EAVA6F,MACAC,EASA9F,EATA8F,YACAC,EAQA/F,EARA+F,WACAC,EAOAhG,EAPAgG,KACApB,EAMA5E,EANA4E,UACAqB,EAKAjG,EALAiG,iBACAhF,EAIAjB,EAJAiB,SACArB,EAGAI,EAHAJ,UACAsG,EAEAlG,EAFAkG,iBACGC,GAVP,OAWInG,EAXJ,GAaMoG,GAAeC,EAAAA,EAAAA,UAAQ,yBAAML,QAAN,IAAMA,OAAN,EAAMA,EAAMM,IAAId,KAAY,CAACQ,IAE1D,OACI,iCACIJ,IAAKA,EACLhG,UAAWW,GAAAA,CACPwE,GADiB,eAGZA,EAAmBH,IAHP,SAIZG,EAA0BkB,GAJd,GAMjBrG,IAEAuG,GAVR,eAYS,OAAJH,QAAI,IAAJA,OAAA,EAAAA,EAAMO,UAAU,yBAAMH,IACtBP,IACG,UAAC,IAAD,CAAOW,UAAU,aAAa7G,KAAK,SAASC,UAAWmF,EAAvD,WACI,eAAInF,UAAU,OAAd,SAAsBiG,IACrBE,KAGRD,IAAe,SAACW,EAAA,EAAD,CAAW7G,UAAU,OAArB,SAA6BkG,KAE7C,gBAAKlG,UAAWW,GAAAA,CAAWwE,EAAyBmB,GAApD,SAAwEjF,Y,wEE3E/EyF,E,iGCCL,EAAoG,4CAApG,EAAyJ,qCAAzJ,EAAiN,+C,sBDD5MA,SAAAA,GAAAA,EAAAA,KAAAA,OAAAA,EAAAA,UAAAA,YAAAA,EAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,KAML,IEJYC,EAKAC,EAKAC,EFNZ,I,4CGNsBC,GAAtB,QACI,WAAsCC,IAA4B,oBAA5BA,OAAAA,KAGpBC,GAAtB,QACI,WAAsCC,IAAa,oBAAbA,MAAAA,KCD7BC,EAAb,0CACI,WAAmCH,GAAmC,IAAD,yBACjE,cAAMA,IADyBA,OAAAA,EAAkC,EADzE,kBAAgCD,GAMnBK,EAAb,0CACI,WAAmCF,GAAoB,IAAD,yBAClD,cAAMA,IADyBA,MAAAA,EAAmB,EAD1D,kBAA+BD,G,SCM/B,EAZmC,SAACjG,EAAsBqG,GAE5B,IAAD,EADzB,OAAIpF,EAAAA,EAAAA,UAASjB,GACI,SAATA,GACA,UAAOqG,EAAQC,gBAAf,QAGGtG,EAGJA,EAAKuG,mBAAmBF,I,YHXnC,SAAYT,GAAAA,EAAAA,KAAAA,OAAAA,EAAAA,UAAAA,YAAZ,CAAYA,IAAAA,EAAAA,KAKZ,SAAYC,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,IAAAA,MAAZ,CAAYA,IAAAA,EAAAA,KAKZ,SAAYC,GAAAA,EAAAA,UAAAA,YAAAA,EAAAA,KAAAA,OAAZ,CAAYA,IAAAA,EAAAA,KIZZ,ICEYU,EDFNC,EAAsB,SAACnH,GACzB,OAAOoH,EAAMC,KAAKrH,IAGTsH,EAAyB,SAACtH,GACnC,OAAOmH,EAAoBnH,IAAUuH,EAAkBF,KAAKrH,IAGhE,IAGMoH,EACF,q+VACEG,EAAoB,QEQbC,EAAb,WACI,WAAYC,EAAc/G,IAAmD,oBAK7D+G,UAL4D,OAM3D/G,UAN2D,EACxEgH,KAAKD,KAAOA,EACZC,KAAKhH,KAAOA,EAHpB,mDASI,SAAqBqG,GACjB,OAAI7D,EAAAA,EAAAA,UAASwE,KAAKhH,OAAS,yBAA0BgH,KAAKhH,KAC/CgH,KAAKhH,KAAKiH,qBAAqBZ,GAGpC,GAAN,OAAUa,EAAiBb,EAAQc,YAAnC,gBAAsDC,EAClDJ,KAAKD,MADT,cAEOC,KAAKK,yBAAyBhB,GAFrC,OAdR,sCAmBI,SAAyBA,GACrB,OAAIpF,EAAAA,EAAAA,UAAS+F,KAAKhH,MACPsH,EAA2BN,KAAKhH,KAAMqG,GAG1C,6BAA8BW,KAAKhH,KACpCgH,KAAKhH,KAAKqH,yBAAyBhB,GACnC,uBAAwBW,KAAKhH,KAC7BgH,KAAKhH,KAAKuG,mBAAmBF,GAC7B,OA5Bd,KAgCakB,EAAb,6CACoBC,WAAY,EADhC,iDAGI,SAAmBnB,GAAqD,IAAD,EACnE,iBAAOA,EAAQoB,mBAAf,QAA8B,cAJtC,KAQaC,EAAb,WACI,WAAmC1H,GAA2D,IAArB2H,EAAoB,6EAA1D3H,KAAAA,EAA0D,KAApB2H,WAAAA,EAD7E,uDAGI,SAAyBtB,GACrB,MAAM,GAAN,OAAUW,KAAKW,WAAa,IAAM,GAAlC,aAAyCL,EAA2BN,KAAKhH,KAAMqG,QAJvF,KAQauB,EAAb,WACI,WAA0Bb,EAA8Bf,IAAgD,oBAA9Ee,KAAAA,EAA6E,KAA/Cf,OAAAA,EAD5D,mDAGI,SAAqBK,GAAqD,IAAD,IAC/DwB,EAAgBX,EAAiBb,EAAQc,YACzCJ,EAAOC,KAAKT,mBAAmBF,GAC/ByB,EAAkBd,KAAKK,yBAAyBhB,GAEhD0B,EAAe,UAAG1B,EAAQ2B,yBAAX,QAAgClC,EAAkBmC,UAOvE,OAL+D,eAC1DnC,EAAkBmC,UADwC,UACzBJ,EADyB,qBACCd,EADD,YACSe,KADT,SAE1DhC,EAAkBoC,KAFwC,UAE9BL,EAF8B,gBAETd,EAFS,cAECe,EAFD,SAK3CC,KAf5B,sCAkBI,SAAyB1B,GACrB,MACI,OACA8B,EAAAA,EAAAA,GAAUnB,KAAKhB,QAAQ,SAACjD,EAAKqF,GACzB,MAAM,OAAN,OAAcC,EAAmBtF,IAAjC,OAAwCqF,EAAMf,yBAAyBhB,GAAvE,QACDiC,KAAK,MACR,QAxBZ,gCA4BI,SAAmBjC,GACf,OAAOe,EAAkBJ,KAAKD,UA7BtC,KAiCawB,EAAb,WACI,WAAmCvI,IAAuB,oBAAvBA,KAAAA,EADvC,iDAGI,SAAmBqG,GACf,IAAMmC,EAAgBlB,EAA2BN,KAAKhH,KAAMqG,GAE5D,OAAIW,KAAKhH,gBAAgByI,EACf,SAAN,OAAgBD,EAAhB,KAGE,GAAN,OAAUA,EAAV,UAVR,KAcsBE,GAAtB,QACI,WAA6B3B,EAA8Bb,IAA0B,oBAAxDa,KAAAA,EAAuD,KAAzBb,MAAAA,KAKlDuC,EAAb,0CAEI,WAA0B1B,EAA8Bb,GAA0B,IAAD,yBAC7E,cAAMa,EAAMb,IADUa,KAAAA,EAAuD,EAAzBb,MAAAA,EAAyB,EAFrF,uDAUI,SAAyBG,GACrB,OAAOW,KAAKd,MAAMX,KAAI,SAACvF,GAAD,OAAUsH,EAA2BtH,EAAMqG,MAAUiC,KAAK,SAXxF,gCAcI,SAAmBjC,GACf,OAAOW,KAAKK,yBAAyBhB,OAf7C,GAAqCqC,GAmBxBC,EAAb,0CACI,WAA0B5B,EAA8Bb,GAA0B,IAAD,yBAC7E,cAAMa,EAAMb,IADUa,KAAAA,EAAuD,EAAzBb,MAAAA,EAAyB,EADrF,uDAKI,SAAyBG,GACrB,MAAO,IAAMW,KAAKd,MAAMX,KAAI,SAACvF,GAAD,OAAUsH,EAA2BtH,EAAMqG,MAAUiC,KAAK,MAAQ,MANtG,gCASI,SAAmBjC,GACf,OAAOW,KAAKK,yBAAyBhB,OAV7C,GAAqCqC,GAsB/BxB,EAAmB,WAA+C,IAAD,EAA7CC,EAA6C,uDAApBxB,EAAAA,KAC/C,OAAO,eACFA,EAAAA,KAAkB,KADhB,SAEFA,EAAAA,UAAuB,YAFrB,SAGFA,EAAAA,SAAsB,qBAHpB,GAILwB,IAGAkB,EAAqB,SAACtB,GACxB,OAAIH,EAAuBG,GAChBA,EAGL,IAAN,OAAWA,EAAX,MAGEK,EAAoB,SAACL,GAAkB,IAAD,EACxC,GAAIN,EAAoBM,GACpB,OAAOA,EAGX,IAAI6B,EAAS7B,EAUb,OARI,UAAC6B,SAAD,OAAC,EAAQC,SACTD,EAAS,QAGT,OAAOjC,KAAKiC,EAAO,MACnBA,EAAS,IAAMA,IAGZE,EAAAA,EAAAA,QAAOF,EAAQhC,GAAwB0B,KAAK,K,sBChLvD,EAf2B,SAACvB,EAAcb,GAKtC,OAJIA,EAAMV,OAAS,IACfuD,EAAAA,EAAAA,QAAO7C,GAAO,SAAClG,GAAD,OAAUA,aAAgBuH,KAGvB,IAAjBrB,EAAMV,OACC,IAAI+B,EAEM,IAAjBrB,EAAMV,OACCU,EAAM,GAGV,IAAIuC,EAAgB1B,EAAMb,ICwFrC,EA5F6B,SAAvB8C,EACFC,EACAC,EACA7C,GAEA,IAAM8C,EAAaF,EACbG,EAAYC,EAAmB,GAAI,CAACJ,EAAGC,IAE7C,IAAIjI,EAAAA,EAAAA,UAASgI,KAAMhI,EAAAA,EAAAA,UAASiI,GACxB,OAAOD,IAAMC,EAAIC,EAAaC,EAGlC,GAAIH,aAAarB,GAAoBsB,aAAatB,EAAkB,CAChE,IAAM0B,EAAQnH,OAAOoH,KAAKN,EAAEjD,QACtBwD,EAAQrH,OAAOoH,KAAKL,EAAElD,QAEtByD,GAAUC,EAAAA,EAAAA,OAAM,CAACJ,EAAOE,IAAQG,UAAUC,OAAOtK,QAEjDuK,GAAeH,EAAAA,EAAAA,OAAMD,GACtBK,QAAO,SAAClB,EAAQmB,GACb,IAAMC,EAAUV,EAAMW,SAASF,GACzBG,EAAUV,EAAMS,SAASF,GAEzBI,EAASlB,EAAEjD,OAAO+D,GAClBK,EAASlB,EAAElD,OAAO+D,GAExB,IAAKC,IAAYE,EAEb,OADAG,QAAQC,MAAM,2BACP1B,EAGX,GAAIoB,IAAYE,EAEZ,OADAtB,EAAOmB,GAAY,IAAIrC,EAAsByC,EAAOnK,MAAM,GACnD4I,EAGX,IAAKoB,GAAWE,EAEZ,OADAtB,EAAOmB,GAAY,IAAIrC,EAAsB0C,EAAOpK,MAAM,GACnD4I,EAKX,IAAMjB,EAAawC,EAAOxC,YAAcyC,EAAOzC,WAEzC4C,EAAkBvB,EAAqBmB,EAAOnK,KAAMoK,EAAOpK,KAAMqG,GAGvE,OADAuC,EAAOmB,GAAY,IAAIrC,EAAsB6C,EAAiB5C,GACvDiB,IACR,IACFtJ,QAEL,OAAO,IAAIsI,EAAiBqB,EAAElC,KAAM8C,GAGxC,GAAIZ,aAAaV,GAAmBW,aAAaX,EAAiB,CAC9D,IAAMiC,EAAcxB,EAAqBC,EAAEjJ,KAAMkJ,EAAElJ,KAAMqG,GACzD,OAAO,IAAIkC,EAAgBiC,GAG/B,GAAIvB,aAAaR,GAAmBS,aAAaT,EAAiB,CAC9D,GAAIQ,aAAaR,GAAmBS,aAAaT,EAC7C,OAAO,IAAIA,EAAgBQ,EAAElC,MAAM6C,EAAAA,EAAAA,MAAK,GAAD,eAAKX,EAAE/C,QAAP,OAAiBgD,EAAEhD,UAG9D,IAAMuE,EAAQxB,aAAaR,EAAkBQ,EAAIC,aAAaT,EAAkBS,OAAIwB,EAC9EC,EAAW1B,aAAaR,EAAkBS,EAAIA,aAAaT,EAAkBQ,OAAIyB,EAEvF,QAAcA,IAAVD,QAAoCC,IAAbC,EACvB,MAAM,IAAIC,MAGd,IAAMC,EAAgB,IAAIpC,EAAgBgC,EAAM1D,MAAM6C,EAAAA,EAAAA,MAAK,GAAD,eAAKa,EAAMvE,OAAX,CAAkByE,MAE5E,IAAI1J,EAAAA,EAAAA,UAAS0J,GACT,OAAOE,EAGX,IAAMC,EAAqBL,EAAMvE,MAAM6E,WAAU,SAACzL,GAAD,OAAWA,EAAM0L,cAAgBL,EAASK,eAE3F,IAA4B,IAAxBF,EACA,OAAOD,EAGX,IAAMI,EAAcR,EAAMvE,MAAM4E,GAEhC,OADAL,EAAMvE,MAAM4E,GAAsB9B,EAAqBiC,EAAaN,EAAUtE,GACvEoE,EAGX,OAAOrB,GClFX,GAbiC,SAC7BlD,EACAG,GAEA,OAAOH,EAAM4D,QAAO,SAAClB,EAAQtJ,GACzB,YAAeoL,IAAX9B,EACOtJ,EAGJ0J,EAAqBJ,EAAQtJ,EAAO+G,UAC5CqE,ICiDP,GAlD0B,SAApBQ,EACFnE,EACAoE,EACA9E,GACkB,IAAD,IACX+E,EAAa/E,EAAQgF,oBAAsBhF,EAAQgF,oBAAoBtE,GAAQA,EAE/EuE,EAAiB,UAAGjF,EAAQgF,2BAAX,QAAmC,SAACE,GAAD,OAAsBA,GAC1EC,EAAkB,UAAGnF,EAAQoF,4BAAX,QAAoC,SAACF,GAAD,OAAsBA,GAE5EA,EAAWD,EAAkBF,GAC7BM,GAAmBC,EAAAA,EAAAA,UAASJ,GAElC,IAAItK,EAAAA,EAAAA,UAASkK,GACT,OAAOA,EAGX,GAAIA,aAAoB/E,EAAW,CAC/B,GAAIC,EAAQuF,gBAAiB,CACzB,GAA8B,IAA1BT,EAASjF,MAAMV,OACf,OAAO,IAAImD,EAAgB,GAAI,IAGnC,IAAMkD,EAAkBV,EAASjF,MAAMX,KAAI,SAACvF,GAAD,OAAUkL,EAAkBQ,EAAkB1L,EAAMqG,MAG/F,OAAO,IAAIsC,EAAgB+C,EAAkBG,GAE7C,GAA8B,IAA1BV,EAASjF,MAAMV,OACf,OAAO,IAAI+C,EAAgB,IAAIhB,GAGnC,IAAMsE,EAAkBV,EAASjF,MAAMX,KAAI,SAACvF,GAAD,OAAUkL,EAAkBQ,EAAkB1L,EAAMqG,MACzFyF,EAAaC,GAAyBF,EAAiBxF,GAE7D,OAAO,IAAIkC,EAAgBuD,GAInC,OAAO,IAAIlE,EACP2D,GACA7B,EAAAA,EAAAA,OAAMyB,EAASnF,QACVgG,WAAU,SAAC5D,EAAOrB,GACf,OAAO,IAAIW,EAAsBwD,EAAkBM,EAAmBzE,GAAOqB,EAAO/B,OAEvF4F,SAAQ,SAAC3M,EAAOyD,GAAR,OAAgByI,EAAmBzI,MAC3CzD,UCxBb,GAjCoB,SAAd4M,EAAeC,GACjB,IAAI3J,EAAAA,EAAAA,UAAS2J,GACT,OAAIC,EAAAA,EAAAA,SAAQD,GACD,IAAI/F,GAAUsD,EAAAA,EAAAA,OAAMyC,GAAQ5G,IAAI2G,GAAa5M,SAGjD,IAAI6G,GACP6F,EAAAA,EAAAA,WAAUG,GAAQ,SAAC7M,GACf,OAAO4M,EAAY5M,OAK/B,IAAI0B,EAAAA,EAAAA,OAAMmL,GACN,MAAO,OAGX,GAAsB,kBAAXA,GAAyC,kBAAXA,EACrC,MAAO,SAGX,IAAIlL,EAAAA,EAAAA,UAASkL,GACT,MAAO,SAGX,IAAIE,EAAAA,EAAAA,WAAUF,GACV,MAAO,UAIX,MADA9B,QAAQC,MAAM,CAAE6B,OAAAA,IACV,IAAIvB,MAAM,gCCrBd0B,GAA2C,SAA3CA,EACFtM,EACAqG,GAE+B,IAD/BkG,EAC8B,wDAC9B,IAAItL,EAAAA,EAAAA,UAASjB,IAASA,aAAgBuH,EAClC,MAAO,GAGX,GAAIvH,aAAgB0I,EAChB,OAAO1I,EAAKkG,MAAMyD,SAAQ,SAAC6C,GAAD,OAAeF,EAAyCE,EAAWnG,GAAS,MAG1G,GAAIrG,aAAgBuI,EAChB,OAAO+D,EAAyCtM,EAAKA,KAAMqG,GAAS,GAGxE,IAAMuC,GAAST,EAAAA,EAAAA,GAAUnI,EAAKgG,QAAQ,SAACyG,EAAWrE,GAAZ,OAClCkE,EAAyClE,EAAMpI,KAAMqG,GAAS,MAChEsD,SAAQ,SAACrK,GAAD,OAAWA,KAUrB,OARIiN,IACIlG,EAAQqG,gBACR9D,EAAO+D,QAAQ3M,GAEf4I,EAAOgE,KAAK5M,IAIb4I,GCrCLiE,GAAwB,SAAxBA,EACF7M,EACA8M,GAEA,IAAMC,EAAQ,eAAeC,KAAKhN,EAAK+G,MACvC,GAAKgG,EAEE,CACH,cAA8BA,EAA9B,GAASrJ,EAAT,KAAeuJ,EAAf,KACMC,EAAUC,OAAOF,GACvBjN,EAAK+G,KAAL,UAAerD,GAAf,OAAsBwJ,EAAU,QAJhClN,EAAK+G,MAAQ,IAOb+F,EAAc9M,IACd6M,EAAsB7M,EAAM8M,IA6BpC,GAzByC,SACrC9M,EACAoN,EACA/G,GAEA,IAEMgH,EDeyC,SAC/CrN,EACA+G,EACAV,GAEA,IAAMgH,EAA+Cf,GAAyCtM,EAAMqG,GAE9FiH,GACF9K,EAAAA,EAAAA,UAASxC,IAAS,yBAA0BA,EAAOA,EAAO,IAAI8G,EAAyBC,EAAM/G,GAQjG,OANIqG,EAAQqG,gBACRW,EAAgBV,QAAQW,GAExBD,EAAgBT,KAAKU,GAGlBD,EC/BiBE,CAAoCvN,EAFrCqG,EAAQgF,oBAAsBhF,EAAQgF,oBAAoB+B,GAAYA,EAEX/G,GAE5EmH,EAA6D,GAanE,OAXAH,EAAgBI,SAAQ,SAACC,GACrB,IAAMZ,EAAgB,SAAC9M,GAAD,OAClBwN,EAA8BG,MAAK,SAACrO,GAAD,OAAWA,EAAMyH,OAAS/G,EAAK+G,SAElE+F,EAAcY,IACdb,GAAsBa,EAAgBZ,GAG1CU,EAA8BZ,KAAKc,MAGhCL,EAAgB9H,KAAI,SAACqI,GAAD,OAAgBA,EAAW3G,qBAAqBZ,MAAUiC,KAAK,SC7B9F,GAVgC,SAACuF,EAAcxH,GAC3C,IAAMyH,EAAaC,KAAKC,MAAMH,GACxB1C,EAAWe,GAAY4B,GAErBG,EAAiB5H,EAAjB4H,aAEFC,EAAiBhD,GAAkB+C,EAAc9C,EAAU9E,GACjE,OAAO8H,GAAiCD,EAAgBD,EAAc5H,I,6DTV1E,SAAYG,GAAAA,EAAAA,KAAAA,OAAAA,EAAAA,WAAAA,aAAAA,EAAAA,YAAAA,cAAAA,EAAAA,WAAAA,aAAAA,EAAAA,qBAAAA,uBAAAA,EAAAA,WAAAA,aAAZ,CAAYA,IAAAA,EAAAA,KUFZ,I,GAIA,GAJwB,SAAClH,GACrB,OAAOA,EAAM8O,OAAO,GAAGC,cAAgB/O,EAAMgP,MAAM,ICMvD,GAJmB,SAACC,GAChB,OAAOC,IAAgBC,EAAAA,EAAAA,WAAUF,K,wECHrC,GAAgC,gDAAhC,GAAwF,wCAAxF,GAA4I,4CAA5I,GAAmM,2CAAnM,GAAsP,wCAAtP,GAAsS,wC,2DCmItS,GAjH2D,SAAC,GAAsC,IAApClI,EAAmC,EAAnCA,QAASqI,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,QACzEC,GAAqBC,EAAAA,GAAAA,GAAsBH,GAEjD,OACI,WAAC,KAAD,CAAK7P,UAAWmF,GAAhB,WACI,kBAAKnF,UAAWmF,GAAhB,WACI,gBAAInF,UAAU,OAAd,uBACA,iBAAKA,UAAWmF,GAAhB,SAOK2K,IAAW,UAAC,IAAD,CAAQ/P,KAAK,QAAQoB,KAAK,OAAOI,MAAM,UAAC0O,GAAA,EAAD,IAAmB3O,QAASwO,UAGvF,oBAAO9P,UAAWmF,GAAlB,WACI,kBAAMnF,UAAWmF,GAAjB,6BACA,UAAC,KAAD,CACInF,UAAWmF,GACX1E,MAAO+G,EAAQ4H,aACfjP,SAAU4P,EAAmB,sBAGrC,oBAAO/P,UAAWmF,GAAlB,WACI,kBAAMnF,UAAWmF,GAAjB,0BACA,WAAC,KAAD,CAAQnF,UAAWmF,GAAc1E,MAAO+G,EAAQc,WAAYnI,SAAU4P,EAAmB,cAAzF,WACI,UAAC,YAAD,kBAAoBjJ,EAAAA,OACpB,UAAC,YAAD,uBAAoBA,EAAAA,YACpB,UAAC,YAAD,WACI,UAACoJ,GAAA,EAAD,CAAM/O,KAAK,SAAS8E,MAAM,WAA1B,uBADgBa,EAAAA,iBAO5B,oBAAO9G,UAAWmF,GAAlB,WACI,kBAAMnF,UAAWmF,GAAjB,0BACA,WAAC,KAAD,CACInF,UAAWmF,GACX1E,MAAO+G,EAAQoF,qBACfzM,SAAU4P,EAAmB,wBAHjC,WAKI,UAAC,YAAD,wBAAoBpI,EAAgBwI,OACpC,UAAC,YAAD,uBAAoBxI,EAAgByI,aACpC,UAAC,YAAD,wBAAoBzI,EAAgB0I,cACpC,UAAC,YAAD,wBAAoB1I,EAAgB2I,aACpC,UAAC,YAAD,kCAAoB3I,EAAgB4I,uBACpC,UAAC,YAAD,wBAAoB5I,EAAgB6I,mBAG5C,oBAAOxQ,UAAWmF,GAAlB,WACI,kBAAMnF,UAAWmF,GAAjB,yBACA,WAAC,KAAD,CACInF,UAAWmF,GACX1E,MAAO+G,EAAQgF,oBACfrM,SAAU4P,EAAmB,uBAHjC,WAKI,UAAC,YAAD,wBAAoBpI,EAAgBwI,OACpC,UAAC,YAAD,uBAAoBxI,EAAgByI,aACpC,UAAC,YAAD,wBAAoBzI,EAAgB0I,cACpC,UAAC,YAAD,wBAAoB1I,EAAgB2I,aACpC,UAAC,YAAD,kCAAoB3I,EAAgB4I,6BAG5C,oBAAOvQ,UAAWmF,GAAlB,WACI,kBAAMnF,UAAWmF,GAAjB,2BACA,WAAC,KAAD,CACInF,UAAWmF,GACX1E,MAAO+G,EAAQoB,YACfzI,SAAU4P,EAAmB,eAHjC,WAKI,UAAC,YAAD,qBAAoB/I,EAAYyJ,UAChC,UAAC,YAAD,iBAAoBzJ,EAAY0J,YAGxC,oBAAO1Q,UAAWmF,GAAlB,WACI,kBAAMnF,UAAWmF,GAAjB,wBACA,WAAC,KAAD,CAAQnF,UAAWmF,GAAc1E,MAAO+G,EAAQC,SAAUtH,SAAU4P,EAAmB,YAAvF,WACI,UAAC,YAAD,kBAAoBhJ,EAAS4J,OAC7B,UAAC,YAAD,uBAAoB5J,EAAS6J,kBAGrC,oBAAO5Q,UAAWmF,GAAlB,WACI,kBAAMnF,UAAWmF,GAAjB,iCACA,WAAC,KAAD,CACInF,UAAWmF,GACX1E,MAAO+G,EAAQ2B,kBACfhJ,SAAU4P,EAAmB,qBAHjC,WAKI,UAAC,YAAD,uBAAoB9I,EAAkBmC,YACtC,UAAC,YAAD,kBAAoBnC,EAAkBoC,aAI9C,oBAAOrJ,UAAWW,IAAAA,CAAW,OAAQwE,IAArC,WACI,UAAC,KAAD,CAAQ0L,QAASrJ,EAAQqG,gBAAiB1N,SAAU4P,EAAmB,sBACvE,kBAAM/P,UAAU,OAAhB,sCAEJ,oBAAOA,UAAWW,IAAAA,CAAW,OAAQwE,IAArC,WACI,UAAC,KAAD,CAAQ0L,QAASrJ,EAAQuF,gBAAiB5M,SAAU4P,EAAmB,sBACvE,WAACG,GAAA,EAAD,CAAMlQ,UAAU,OAAhB,0BACkB,KACd,UAAC,KAAD,CAAKwF,MAAM,UAAUxF,UAAU,OAA/B,oCCrHpB,GAJ2B,SAAC0P,GACxB,OAAOoB,EAAAA,EAAAA,WAAUpB,GAAQqB,qB,8DCwBvBC,GAAiE,CACnEC,QAAS,CAAEC,SAAS,IAGlBC,GAAuE,CACzEC,UAAU,EACVH,QAAS,CAAEC,SAAS,IAGlBG,GAAkF,CACpFjC,aAAc,OACd9G,WAAYxB,EAAAA,UACZ+G,iBAAiB,EACjBrB,oBAAqB7E,EAAgB0I,YACrCzD,qBAAsBjF,EAAgBwI,KACtCpD,iBAAiB,EACjBtF,SAAUV,EAAS4J,KACnB/H,YAAa5B,EAAYyJ,QACzBtH,kBAAmBlC,EAAkBmC,WAGnCkI,IAA6E,iBAC9E3J,EAAgBwI,MAAO,SAACjI,GAAD,OAAUA,MAD6C,UAE9EP,EAAgByI,WAAaR,EAAAA,YAFiD,UAG9EjI,EAAgB0I,YAAckB,KAHgD,UAI9E5J,EAAgB2I,WAAaQ,EAAAA,YAJiD,UAK9EnJ,EAAgB4I,qBAAuBiB,KALuC,UAM9E7J,EAAgB6I,WAAaiB,EAAAA,WANiD,IAsInF,GAjH6B,WACzB,OAAwBjQ,EAAAA,EAAAA,UAAiB,IAAzC,eAAOwN,EAAP,KAAa0C,EAAb,KACA,GAA0BlQ,EAAAA,EAAAA,YAA1B,eAAOiK,EAAP,KAAckG,EAAd,KACA,GAAgEnQ,EAAAA,EAAAA,WAAkB,GAAlF,eAAOoQ,EAAP,KAAiCC,EAAjC,KACA,GAAkDrQ,EAAAA,EAAAA,WAAkB,GAApE,eAAOsQ,EAAP,KAA0BC,EAA1B,KAEA,GACIC,EAAAA,GAAAA,IACIC,EAAAA,GAAAA,GAAmB,qBAAsB,qBACzCZ,IAHR,eAAOa,EAAP,KAAoCC,EAApC,KAMMC,GAAoB3L,EAAAA,EAAAA,UAAQ,WAC9B,OAzBqB,SACzByL,GAEA,IAAQtF,EAA8DsF,EAA9DtF,qBAAsBJ,EAAwC0F,EAAxC1F,oBAAwB6F,GAAtD,OAAsEH,EAAtE,IAEA,OAAO,kBACAG,GADP,IAEIzF,qBAAsB0E,GAAiB1E,GACvCJ,oBAAqB8E,GAAiB9E,KAiB/B8F,CAAqBJ,KAC7B,CAACA,IAEEK,GAAazO,EAAAA,EAAAA,IACf,SAACJ,GACG,GAAI,OAACsL,QAAD,IAACA,IAAAA,EAAMhF,OAEP,OADA2H,OAAS9F,GACF,GAGX,IACI,IAAM9B,EAASyI,GAAwBxD,EAAMoD,GAI7C,OAFAT,OAAS9F,GAEF9B,EACT,MAAO0I,GAGL,GAFAd,GAASe,EAAAA,GAAAA,GAAgBD,IAErBA,aAAaE,YACb,OAAOjP,EAEP,MAAM+O,KAIlB,CAACzD,EAAMoD,GACP,IAGEQ,GAAsBpS,EAAAA,EAAAA,cAAY,WACpCuR,GAAqB,SAACc,GAAD,OAAgBA,KACrChB,GAA4B,KAC7B,IAEGiB,GAAqCtS,EAAAA,EAAAA,cACvC,SAACC,GACQqR,GACDD,EAA4BpR,KAGpC,CAACqR,IAGL,OACI,UAACiB,GAAA,EAAD,CACI/S,UAAWmF,EACXV,UAAU,OACVE,WACI,UAAC,IAAD,CACIqO,QAAQ,QACRC,QAASnB,EACToB,gBAAiBnB,EACjBoB,SACI,UAAC,GAAD,CACI3L,QAAS0K,EACTrC,WAAYsC,EACZrC,QAAS8C,IAGjBQ,UAAU,cAXd,UAaI,UAAC,IAAD,CACInN,MAAM,WACNmN,UAAU,cACVH,SAASnB,GAA4BF,EACrCsB,gBAAiBJ,EAJrB,UAMI,UAAC,IAAD,CAAQ3R,KAAK,OAAOI,MAAM,UAAC8R,GAAA,EAAD,IAAqB/R,QAASsR,QAIpE/N,MACI,UAACyO,EAAA,EAAD,CACItT,UAAWmF,EACXoO,SAAS,OACT/L,QAASwJ,GACTvQ,MAAOuO,EACP7O,SAAUuR,IAGlBhN,WAAW,aACXE,YACI,UAAC,IAAD,CAASqB,MAAM,OAAOmN,UAAU,aAAhC,UACI,UAACI,GAAA,EAAD,CAAY/S,MAAO8R,EAAYpR,KAAK,OAAOE,SAAS,OAG5DyD,OACI,UAACwO,EAAA,EAAD,CACItT,UAAWmF,EACXoO,SAAS,aACT/L,QAAS2J,GACT1Q,MAAO8R,IAGfxN,MAAO0G,IAAS,UAAC,IAAD,CAAOzL,UAAWmF,EAAyBhE,KAAK,QAAQsS,UAAQ,EAACC,QAASjI,Q,oBC7KtG,IAJwB,SAACA,GACrB,OAAOA,aAAiBM,MAAQN,EAAMiI,QAAUC,OAAOlI,K,oBCG3D,IAJ2B,SAACmI,EAAe1L,GACvC,MAAM,WAAN,OAAkB0L,EAAlB,YAA2B1L,K,oBCW/B,IAVkB,SACdoF,EACAuG,GAEA,OAAOvQ,OAAOoH,KAAK4C,GAAQ5G,KAAI,SAACxC,EAAK4B,GAEjC,OAAO+N,EADW3P,EACSoJ,EADTpJ,GAC4B4B","sources":["components/appEditor/AppEditor.tsx","utils/copyText.ts","utils/copyBlob.ts","components/copyButton/CopyButton.tsx","hooks/debouncedMemo.ts","hooks/useChangeState.ts","hooks/useChangeAnyStateHandler.ts","hooks/useChangeStateHandler.ts","webpack://mrgrd56.github.io/./src/layouts/pages/doubleConverterPageContainer/DoubleConverterPageContainer.module.scss?ae25","layouts/pages/doubleConverterPageContainer/DoubleConverterPageContainer.tsx","layouts/pages/pageContainer/PageContainer.tsx","webpack://mrgrd56.github.io/./src/layouts/pages/pageContainer/PageContainer.module.scss?0d25","pages/jsonToTypeScriptPage/types/ExportType.ts","webpack://mrgrd56.github.io/./src/pages/jsonToTypeScriptPage/JsonToTypeScriptPage.module.scss?decc","pages/jsonToTypeScriptPage/types/JsonToTypeScriptConversionOptions.ts","pages/jsonToTypeScriptPage/types/common.ts","pages/jsonToTypeScriptPage/types/json.ts","pages/jsonToTypeScriptPage/utils/getTypeScriptTypeReference.ts","utils/isValidJsIdentifier.ts","pages/jsonToTypeScriptPage/types/JsonToTypeScriptConversionSelectableOptions.ts","pages/jsonToTypeScriptPage/types/typescript.ts","pages/jsonToTypeScriptPage/utils/getTypeScriptUnion.ts","pages/jsonToTypeScriptPage/utils/mergeTypeScriptTypes.ts","pages/jsonToTypeScriptPage/utils/mergeTypeScriptTypesList.ts","pages/jsonToTypeScriptPage/utils/getTypeScriptType.ts","pages/jsonToTypeScriptPage/utils/getJsonType.ts","pages/jsonToTypeScriptPage/utils/getAllTypeScriptTypeInnerDeclarableTypes.ts","pages/jsonToTypeScriptPage/utils/getAllTypeScriptTypeDeclarations.ts","pages/jsonToTypeScriptPage/utils/convertJsonToTypeScript.ts","utils/capitalizeFirst.ts","utils/pascalCase.ts","webpack://mrgrd56.github.io/./src/pages/jsonToTypeScriptPage/components/JsonToTypeScriptSettings.module.scss?33dc","pages/jsonToTypeScriptPage/components/JsonToTypeScriptSettings.tsx","utils/screamingSnakeCase.ts","pages/jsonToTypeScriptPage/JsonToTypeScriptPage.tsx","utils/getErrorMessage.ts","utils/getLocalStorageKey.ts","utils/mapObject.ts"],"sourcesContent":["import React, { FunctionComponent, useCallback } from 'react';\r\nimport Editor, { EditorProps, OnChange } from '@monaco-editor/react';\r\nimport useAppTheme from '../../hooks/useAppTheme';\r\nimport { Spin } from 'antd';\r\nimport classNames from 'classnames';\r\nimport * as monaco from 'monaco-editor';\r\nimport MonacoLanguage from '../../types/MonacoLanguage';\r\n\r\nconst loadingNode = <Spin size=\"large\" />;\r\n\r\nexport type AppOnChange = (value: string, ev: monaco.editor.IModelContentChangedEvent) => void;\r\n\r\ninterface Props extends Omit<EditorProps, 'onChange'> {\r\n    onChange?: AppOnChange;\r\n    language?: MonacoLanguage;\r\n}\r\n\r\nconst AppEditor: FunctionComponent<Props> = ({ className, loading, theme, onChange, ...props }) => {\r\n    const { isDarkMode } = useAppTheme();\r\n\r\n    const handleChange = useCallback<OnChange>(\r\n        (value, ev) => {\r\n            onChange?.(value ?? '', ev);\r\n        },\r\n        [onChange]\r\n    );\r\n\r\n    return (\r\n        <Editor\r\n            theme={theme ?? (isDarkMode ? 'vs-dark' : 'light')}\r\n            className={classNames('app-monaco-editor', className)}\r\n            loading={loading ?? loadingNode}\r\n            onChange={handleChange}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\nexport default AppEditor;\r\n","const copyText = (text: string | undefined) => {\n    if (!text) {\n        return;\n    }\n\n    return navigator.clipboard.writeText(text);\n};\n\nexport default copyText;\n","const copyBlob = (blob: Blob) => {\n    return navigator.clipboard.write([\n        new ClipboardItem({\n            [blob.type]: blob\n        })\n    ]);\n};\n\nexport default copyBlob;\n","import React, { MouseEvent, MouseEventHandler, useRef, useState } from 'react';\nimport copyText from '../../utils/copyText';\nimport { Button, ButtonProps } from 'antd';\nimport { CheckOutlined, CopyOutlined } from '@ant-design/icons';\nimport { isNil, isString } from 'lodash';\nimport copyBlob from '../../utils/copyBlob';\n\ntype ContentType = string | Blob | null | undefined;\n\ninterface Props<T extends ContentType> extends Omit<ButtonProps, 'value'> {\n    value: T;\n    copyEmpty?: boolean;\n    onClick?: (event: MouseEvent<HTMLButtonElement>) => T;\n}\n\nfunction CopyButton<T extends ContentType>({ value, copyEmpty, children, onClick, icon, ...props }: Props<T>) {\n    const [isCopied, setIsCopied] = useState<boolean>(false);\n\n    const copiedTimeoutRef = useRef<NodeJS.Timeout>();\n\n    const handleClick: MouseEventHandler<HTMLButtonElement> = async (event) => {\n        const replacedValue = onClick?.(event);\n\n        const actualValue = replacedValue ?? value;\n\n        if (!actualValue && !copyEmpty) {\n            return;\n        }\n\n        if (copiedTimeoutRef.current) {\n            clearTimeout(copiedTimeoutRef.current);\n        }\n\n        if (isNil(actualValue) || isString(actualValue)) {\n            await copyText(actualValue ?? '');\n        }\n        if (actualValue instanceof Blob) {\n            await copyBlob(actualValue);\n        }\n\n        setIsCopied(true);\n        copiedTimeoutRef.current = setTimeout(() => {\n            setIsCopied(false);\n        }, 1000);\n    };\n\n    return (\n        <Button onClick={handleClick} icon={icon ?? (isCopied ? <CheckOutlined /> : <CopyOutlined />)} {...props}>\n            {children ?? 'Copy'}\n        </Button>\n    );\n}\n\nexport default CopyButton;\n","import { DependencyList, useEffect, useRef, useState } from 'react';\nimport { debounce, isObject, throttle } from 'lodash';\nimport { v4 } from 'uuid';\nimport call from '../utils/call';\nimport useAutoRef from './useAutoRef';\n\ninterface NoResult {\n    readonly _noResult: string;\n}\n\nconst isNoResult = <T>(value: T | NoResult, noResult: NoResult): value is NoResult => {\n    return isObject(value) && '_noResult' in value && value === noResult; //TODO just value === noResult ?\n};\n\ntype MemoFactory<R> = (noResult: NoResult) => R | NoResult;\n\nconst createDebouncedMemoHook =\n    (debounceFn: typeof debounce) =>\n    <R>(factory: MemoFactory<R>, deps: DependencyList | undefined, wait?: number) => {\n        const [value, setValue] = useState<R>();\n        const factoryRef = useAutoRef(factory);\n\n        const debounceFunction = useRef(\n            call(() => {\n                const actualNoResult: NoResult = Object.freeze({\n                    _noResult: v4()\n                });\n\n                return debounceFn(() => {\n                    const value = factoryRef.current(actualNoResult);\n\n                    if (!isNoResult(value, actualNoResult)) {\n                        setValue(value);\n                    }\n                }, wait);\n            })\n        ).current;\n\n        useEffect(() => {\n            debounceFunction();\n        }, deps);\n\n        return value;\n    };\n\nexport const useDebouncedMemo = createDebouncedMemoHook(debounce);\nexport const useThrottledMemo = createDebouncedMemoHook(throttle);\n\n// const useDebouncedMemo = <T>(factory: () => T, deps: DependencyList | undefined, wait?: number) => {\n//     const [value, setValue] = useState<T>();\n//\n//     const timeoutRef = useRef<NodeJS.Timeout>();\n//\n//\n// };\n","import { Dispatch, SetStateAction, useCallback } from 'react';\n\nconst useChangeState = <S extends object>(setState: Dispatch<SetStateAction<S>>) => {\n    return useCallback(<K extends keyof S>(key: K, value: S[K]) => {\n        setState((state) => ({\n            ...state,\n            [key]: value\n        }));\n    }, []);\n};\n\nexport default useChangeState;\n","import { ChangeEvent, Dispatch, SetStateAction } from 'react';\nimport { isObjectLike } from 'lodash';\nimport call from '../utils/call';\n\nexport const isChangeEvent = (value: any): value is ChangeEvent<unknown> => {\n    return isObjectLike(value) && 'target' in value;\n};\n\nconst useChangeAnyStateHandler = <S>(setState: Dispatch<SetStateAction<S>>) => {\n    return (value: ChangeEvent<{ value: S }> | S) => {\n        const actualValue = call(() => {\n            if (isChangeEvent(value)) {\n                const event = value as ChangeEvent<{ value: S }>;\n                return event.target.value;\n            }\n\n            return value;\n        });\n\n        setState(actualValue);\n    };\n};\n\nexport default useChangeAnyStateHandler;\n","import { ChangeEvent, Dispatch, SetStateAction, useCallback } from 'react';\nimport call from '../utils/call';\nimport useChangeState from './useChangeState';\nimport { isChangeEvent } from './useChangeAnyStateHandler';\n\nconst useChangeStateHandler = <S extends object>(setState: Dispatch<SetStateAction<S>>) => {\n    const changeState = useChangeState(setState);\n\n    return useCallback(\n        <K extends keyof S, T extends S[K]>(key: K) => {\n            return (value: ChangeEvent<{ value: T }> | T) => {\n                const actualValue = call(() => {\n                    if (isChangeEvent(value)) {\n                        const event = value as ChangeEvent<{ value: T }>;\n                        return event.target.value;\n                    }\n\n                    return value;\n                });\n\n                changeState(key, actualValue);\n            };\n        },\n        [changeState]\n    );\n};\n\nexport default useChangeStateHandler;\n","// extracted by mini-css-extract-plugin\nexport default {\"antd-text-primary\":\"DoubleConverterPageContainer_antd-text-primary__rXdf6\",\"pageContainer\":\"DoubleConverterPageContainer_pageContainer__gIcEi\",\"container\":\"DoubleConverterPageContainer_container__Ar28J\",\"col\":\"DoubleConverterPageContainer_col__lNxxv\",\"colLeft\":\"DoubleConverterPageContainer_colLeft__rxqd0\",\"colHeader\":\"DoubleConverterPageContainer_colHeader__KSbvT\",\"colTitle\":\"DoubleConverterPageContainer_colTitle__Rtp4D\"};","import React, { FunctionComponent, ReactNode } from 'react';\nimport PageContainer, { PageContainerProps } from '../pageContainer/PageContainer';\nimport styles from './DoubleConverterPageContainer.module.scss';\nimport { Col, Row } from 'antd';\nimport classNames from 'classnames';\n\ninterface Props extends PageContainerProps {\n    leftTitle?: ReactNode;\n    rightTitle?: ReactNode;\n\n    leftExtra?: ReactNode;\n    rightExtra?: ReactNode;\n\n    left?: ReactNode;\n    right?: ReactNode;\n\n    extra?: ReactNode;\n}\n\nconst DoubleConverterPageContainer: FunctionComponent<Props> = (props) => {\n    const {\n        leftTitle,\n        rightTitle,\n        leftExtra,\n        rightExtra,\n        left,\n        right,\n        extra,\n        children,\n        className,\n        noPadding,\n        ...pageProps\n    } = props;\n\n    return (\n        <PageContainer\n            noPadding={noPadding ?? true}\n            className={classNames(styles.pageContainer, className)}\n            {...pageProps}\n        >\n            <Row className={styles.container}>\n                <Col xs={12} className={classNames(styles.col, styles.colLeft)}>\n                    <div className={styles.colHeader}>\n                        <h3 className={styles.colTitle}>{leftTitle}</h3>\n                        {leftExtra}\n                    </div>\n                    {left}\n                </Col>\n                <Col xs={12} className={classNames(styles.col, styles.colRight)}>\n                    <div className={styles.colHeader}>\n                        <h3 className={styles.colTitle}>{rightTitle}</h3>\n                        {rightExtra}\n                    </div>\n                    {right}\n                </Col>\n                {extra}\n            </Row>\n            {children}\n        </PageContainer>\n    );\n};\n\nexport default DoubleConverterPageContainer;\n","import React, { ReactNode, useMemo } from 'react';\nimport styles from './PageContainer.module.scss';\nimport { Space, SpaceProps, Tag } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport { ClockCircleOutlined, WarningOutlined } from '@ant-design/icons';\nimport classNames from 'classnames';\n\nexport enum PageTag {\n    WIP = 'WIP',\n    NOT_WORKING = 'NOT_WORKING'\n}\n\nexport interface PageContainerProps extends Omit<SpaceProps, 'title'> {\n    contentClassName?: string;\n    title?: ReactNode;\n    description?: ReactNode;\n    titleExtra?: ReactNode;\n    tags?: PageTag[];\n    noPadding?: boolean;\n    noContentPadding?: boolean;\n}\n\nconst getTagNodes = (key: number | string): Readonly<Record<PageTag, ReactNode>> => ({\n    [PageTag.WIP]: (\n        <Tag color=\"blue\" icon={<ClockCircleOutlined />} key={key}>\n            Work In Progress\n        </Tag>\n    ),\n    [PageTag.NOT_WORKING]: (\n        <Tag color=\"red\" icon={<WarningOutlined />} key={key}>\n            Not Working\n        </Tag>\n    )\n});\n\nconst renderTag = (tag: PageTag, index: number) => getTagNodes(index)[tag];\n\nconst PageContainer = React.forwardRef<HTMLDivElement, PageContainerProps>((props, ref) => {\n    const {\n        title,\n        description,\n        titleExtra,\n        tags,\n        noPadding,\n        noContentPadding,\n        children,\n        className,\n        contentClassName,\n        ...restProps\n    } = props;\n\n    const renderedTags = useMemo(() => tags?.map(renderTag), [tags]);\n\n    return (\n        <div\n            ref={ref}\n            className={classNames(\n                styles.container,\n                {\n                    [styles.noPadding]: noPadding,\n                    [styles.noContentPadding]: noContentPadding\n                },\n                className\n            )}\n            {...restProps}\n        >\n            {tags?.length && <div>{renderedTags}</div>}\n            {title && (\n                <Space direction=\"horizontal\" size=\"middle\" className={styles.headingContainer}>\n                    <h1 className=\"mb-0\">{title}</h1>\n                    {titleExtra}\n                </Space>\n            )}\n            {description && <Paragraph className=\"mb-2\">{description}</Paragraph>}\n\n            <div className={classNames(styles.contentContainer, contentClassName)}>{children}</div>\n        </div>\n    );\n});\n\nexport default PageContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PageContainer_container__KmrZF\",\"noPadding\":\"PageContainer_noPadding__74Oon\",\"noContentPadding\":\"PageContainer_noContentPadding__rSQgs\",\"headingContainer\":\"PageContainer_headingContainer__ScW-F\",\"contentContainer\":\"PageContainer_contentContainer__l-gCb\"};","enum ExportType {\n    NONE = 'NONE',\n    ES_MODULE = 'ES_MODULE',\n    COMMONJS = 'COMMONJS'\n}\n\nexport default ExportType;\n","// extracted by mini-css-extract-plugin\nexport default {\"antd-text-primary\":\"JsonToTypeScriptPage_antd-text-primary__krz0H\",\"pageContainer\":\"JsonToTypeScriptPage_pageContainer__5n144\",\"editor\":\"JsonToTypeScriptPage_editor__3ILUY\",\"messageContainer\":\"JsonToTypeScriptPage_messageContainer__1aIbf\"};","import ExportType from './ExportType';\n\nexport enum NullType {\n    NULL = 'null',\n    UNDEFINED = 'undefined'\n}\n\nexport enum UnknownType {\n    UNKNOWN = 'unknown',\n    ANY = 'any'\n}\n\nexport enum ObjectDeclaration {\n    INTERFACE = 'INTERFACE',\n    TYPE = 'TYPE'\n}\n\ninterface JsonToTypeScriptConversionOptions {\n    exportType?: ExportType;\n    isReversedOrder?: boolean;\n    fieldNameTransformer?: (fieldName: string) => string;\n    typeNameTransformer?: (typeName: string) => string;\n    rootTypeName: string;\n    isTuplesEnabled?: boolean;\n    nullType?: NullType;\n    unknownType?: UnknownType;\n    objectDeclaration?: ObjectDeclaration;\n}\n\nexport default JsonToTypeScriptConversionOptions;\n","export abstract class IObject<T> {\n    protected constructor(public readonly fields: Record<string, T>) {}\n}\n\nexport abstract class IArray<T> {\n    protected constructor(public readonly types: T[]) {}\n}\n\nexport type IType<\n    TPrimitive,\n    TObject extends IObject<IType<TPrimitive, TObject, TArray>>,\n    TArray extends IArray<IType<TPrimitive, TObject, TArray>>\n> = TPrimitive | TObject | TArray;\n","import { IArray, IObject, IType } from './common';\n\nexport type JsonPrimitive = 'string' | 'number' | 'boolean' | 'null';\n\nexport class JsonObject extends IObject<JsonType> {\n    public constructor(public readonly fields: Record<string, JsonType>) {\n        super(fields);\n    }\n}\n\nexport class JsonArray extends IArray<JsonType> {\n    public constructor(public readonly types: JsonType[]) {\n        super(types);\n    }\n}\n\nexport type JsonType = IType<JsonPrimitive, JsonObject, JsonArray>;\n","import { TypeScriptType } from '../types/typescript';\nimport { isString } from 'lodash';\nimport JsonToTypeScriptConversionOptions from '../types/JsonToTypeScriptConversionOptions';\n\nconst getTypeScriptTypeReference = (type: TypeScriptType, options: JsonToTypeScriptConversionOptions): string => {\n    if (isString(type)) {\n        if (type === 'null') {\n            return options.nullType ?? type;\n        }\n\n        return type;\n    }\n\n    return type.stringifyReference(options);\n};\n\nexport default getTypeScriptTypeReference;\n","const isValidJsIdentifier = (value: string) => {\n    return regex.test(value);\n};\n\nexport const isValidTsTypeFieldName = (value: string) => {\n    return isValidJsIdentifier(value) || additionalTsRegex.test(value);\n};\n\nexport default isValidJsIdentifier;\n\n/* eslint-disable */\nconst regex =\n    /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/;\nconst additionalTsRegex = /^\\d+$/;\n","import JsonToTypeScriptConversionOptions from './JsonToTypeScriptConversionOptions';\n\nexport enum NameTransformer {\n    NONE = 'NONE',\n    CAMEL_CASE = 'CAMEL_CASE',\n    PASCAL_CASE = 'PASCAL_CASE',\n    SNAKE_CASE = 'SNAKE_CASE',\n    SCREAMING_SNAKE_CASE = 'SCREAMING_SNAKE_CASE',\n    KEBAB_CASE = 'KEBAB_CASE'\n}\n\ninterface JsonToTypeScriptConversionSelectableOptions\n    extends Required<Omit<JsonToTypeScriptConversionOptions, 'typeNameTransformer' | 'fieldNameTransformer'>> {\n    fieldNameTransformer: NameTransformer;\n    typeNameTransformer: NameTransformer;\n}\n\nexport default JsonToTypeScriptConversionSelectableOptions;\n","import { JsonPrimitive } from './json';\nimport getTypeScriptTypeReference from '../utils/getTypeScriptTypeReference';\nimport mapObject from '../../../utils/mapObject';\nimport ExportType from './ExportType';\nimport { filter, isObject, isString } from 'lodash';\nimport JsonToTypeScriptConversionOptions, { ObjectDeclaration } from './JsonToTypeScriptConversionOptions';\nimport isValidJsIdentifier, { isValidTsTypeFieldName } from '../../../utils/isValidJsIdentifier';\n\nexport interface ITypeScriptType {\n    stringifyReference(options: JsonToTypeScriptConversionOptions): string;\n}\n\nexport interface IDeclarable {\n    stringifyDeclarationBody(options: JsonToTypeScriptConversionOptions): string;\n}\n\nexport interface IDeclarableTypeScriptType extends IDeclarable {\n    name: string;\n    stringifyDeclaration(options: JsonToTypeScriptConversionOptions): string;\n}\n\nexport class DeclarableTypeScriptType implements IDeclarableTypeScriptType {\n    constructor(name: string, type: IDeclarableTypeScriptType | TypeScriptType) {\n        this.name = name;\n        this.type = type;\n    }\n\n    public readonly name: string;\n    private readonly type: IDeclarableTypeScriptType | TypeScriptType;\n\n    stringifyDeclaration(options: JsonToTypeScriptConversionOptions): string {\n        if (isObject(this.type) && 'stringifyDeclaration' in this.type) {\n            return this.type.stringifyDeclaration(options);\n        }\n\n        return `${getExportKeyword(options.exportType)}type ${stringifyTypeName(\n            this.name\n        )} = ${this.stringifyDeclarationBody(options)};`;\n    }\n\n    stringifyDeclarationBody(options: JsonToTypeScriptConversionOptions): string {\n        if (isString(this.type)) {\n            return getTypeScriptTypeReference(this.type, options);\n        }\n\n        return 'stringifyDeclarationBody' in this.type\n            ? this.type.stringifyDeclarationBody(options)\n            : 'stringifyReference' in this.type\n            ? this.type.stringifyReference(options)\n            : '';\n    }\n}\n\nexport class TypeScriptUnknown implements ITypeScriptType {\n    public readonly isUnknown = true;\n\n    stringifyReference(options: JsonToTypeScriptConversionOptions): string {\n        return options.unknownType ?? 'unknown';\n    }\n}\n\nexport class TypeScriptObjectField implements IDeclarable {\n    public constructor(public readonly type: TypeScriptType, public readonly isOptional = false) {}\n\n    stringifyDeclarationBody(options: JsonToTypeScriptConversionOptions): string {\n        return `${this.isOptional ? '?' : ''}: ${getTypeScriptTypeReference(this.type, options)}`;\n    }\n}\n\nexport class TypeScriptObject implements ITypeScriptType, IDeclarableTypeScriptType {\n    public constructor(public name: string, public readonly fields: Record<string, TypeScriptObjectField>) {}\n\n    stringifyDeclaration(options: JsonToTypeScriptConversionOptions): string {\n        const exportKeyword = getExportKeyword(options.exportType);\n        const name = this.stringifyReference(options);\n        const declarationBody = this.stringifyDeclarationBody(options);\n\n        const declarationType = options.objectDeclaration ?? ObjectDeclaration.INTERFACE;\n\n        const declarations: Readonly<Record<ObjectDeclaration, string>> = {\n            [ObjectDeclaration.INTERFACE]: `${exportKeyword}interface ${name} ${declarationBody}`,\n            [ObjectDeclaration.TYPE]: `${exportKeyword}type ${name} = ${declarationBody};`\n        };\n\n        return declarations[declarationType];\n    }\n\n    stringifyDeclarationBody(options: JsonToTypeScriptConversionOptions): string {\n        return (\n            '{\\n' +\n            mapObject(this.fields, (key, field) => {\n                return `    ${stringifyFieldName(key)}${field.stringifyDeclarationBody(options)};`;\n            }).join('\\n') +\n            '\\n}'\n        );\n    }\n\n    stringifyReference(options: JsonToTypeScriptConversionOptions): string {\n        return stringifyTypeName(this.name);\n    }\n}\n\nexport class TypeScriptArray implements ITypeScriptType {\n    public constructor(public readonly type: TypeScriptType) {}\n\n    stringifyReference(options: JsonToTypeScriptConversionOptions): string {\n        const typeReference = getTypeScriptTypeReference(this.type, options);\n\n        if (this.type instanceof TypeScriptUnion) {\n            return `Array<${typeReference}>`;\n        }\n\n        return `${typeReference}[]`;\n    }\n}\n\nexport abstract class TypeScriptTypesCombination implements ITypeScriptType {\n    protected constructor(public name: string, public readonly types: TypeScriptType[]) {}\n\n    abstract stringifyReference(options: JsonToTypeScriptConversionOptions): string;\n}\n\nexport class TypeScriptUnion extends TypeScriptTypesCombination {\n    //, IDeclarableTypeScriptType {\n    public constructor(public name: string, public readonly types: TypeScriptType[]) {\n        super(name, types);\n    }\n\n    // stringifyDeclaration(exportType?: ExportType): string {\n    //     return `${getExportKeyword(exportType)}type ${this.name} = ${this.stringifyDeclarationBody()};`;\n    // }\n\n    stringifyDeclarationBody(options: JsonToTypeScriptConversionOptions): string {\n        return this.types.map((type) => getTypeScriptTypeReference(type, options)).join(' | ');\n    }\n\n    stringifyReference(options: JsonToTypeScriptConversionOptions): string {\n        return this.stringifyDeclarationBody(options);\n    }\n}\n\nexport class TypeScriptTuple extends TypeScriptTypesCombination {\n    public constructor(public name: string, public readonly types: TypeScriptType[]) {\n        super(name, types);\n    }\n\n    stringifyDeclarationBody(options: JsonToTypeScriptConversionOptions): string {\n        return '[' + this.types.map((type) => getTypeScriptTypeReference(type, options)).join(', ') + ']';\n    }\n\n    stringifyReference(options: JsonToTypeScriptConversionOptions): string {\n        return this.stringifyDeclarationBody(options);\n    }\n}\n\nexport type TypeScriptType =\n    | JsonPrimitive\n    | TypeScriptObject\n    | TypeScriptArray\n    | TypeScriptUnion\n    | TypeScriptTuple\n    | TypeScriptUnknown;\n\nconst getExportKeyword = (exportType: ExportType = ExportType.NONE) => {\n    return {\n        [ExportType.NONE]: '',\n        [ExportType.ES_MODULE]: 'export ',\n        [ExportType.COMMONJS]: 'module.exports = '\n    }[exportType];\n};\n\nconst stringifyFieldName = (name: string) => {\n    if (isValidTsTypeFieldName(name)) {\n        return name;\n    }\n\n    return `'${name}'`;\n};\n\nconst stringifyTypeName = (name: string) => {\n    if (isValidJsIdentifier(name)) {\n        return name;\n    }\n\n    let result = name;\n\n    if (!result?.trim()) {\n        result = 'Type';\n    }\n\n    if (/^\\d$/.test(result[0])) {\n        result = 'N' + result;\n    }\n\n    return filter(result, isValidTsTypeFieldName).join('');\n};\n","import { TypeScriptType, TypeScriptUnion, TypeScriptUnknown } from '../types/typescript';\nimport { remove } from 'lodash';\n\nconst getTypeScriptUnion = (name: string, types: TypeScriptType[]): TypeScriptType => {\n    if (types.length > 1) {\n        remove(types, (type) => type instanceof TypeScriptUnknown);\n    }\n\n    if (types.length === 0) {\n        return new TypeScriptUnknown();\n    }\n    if (types.length === 1) {\n        return types[0];\n    }\n\n    return new TypeScriptUnion(name, types);\n};\n\nexport default getTypeScriptUnion;\n","import { chain, isString, uniq } from 'lodash';\nimport {\n    TypeScriptArray,\n    TypeScriptObject,\n    TypeScriptObjectField,\n    TypeScriptType,\n    TypeScriptUnion\n} from '../types/typescript';\nimport getTypeScriptUnion from './getTypeScriptUnion';\nimport JsonToTypeScriptConversionOptions from '../types/JsonToTypeScriptConversionOptions';\n\nconst mergeTypeScriptTypes = (\n    a: TypeScriptType,\n    b: TypeScriptType,\n    options: JsonToTypeScriptConversionOptions\n): TypeScriptType => {\n    const singleType = a;\n    const bothTypes = getTypeScriptUnion('', [a, b]);\n\n    if (isString(a) && isString(b)) {\n        return a === b ? singleType : bothTypes;\n    }\n\n    if (a instanceof TypeScriptObject && b instanceof TypeScriptObject) {\n        const aKeys = Object.keys(a.fields);\n        const bKeys = Object.keys(b.fields);\n\n        const allKeys = chain([aKeys, bKeys]).flatMap().uniq().value();\n\n        const mergedFields = chain(allKeys)\n            .reduce((result, fieldKey) => {\n                const aHasKey = aKeys.includes(fieldKey);\n                const bHasKey = bKeys.includes(fieldKey);\n\n                const aField = a.fields[fieldKey];\n                const bField = b.fields[fieldKey];\n\n                if (!aHasKey && !bHasKey) {\n                    console.error('Both keys are undefined');\n                    return result;\n                }\n\n                if (aHasKey && !bHasKey) {\n                    result[fieldKey] = new TypeScriptObjectField(aField.type, true);\n                    return result;\n                }\n\n                if (!aHasKey && bHasKey) {\n                    result[fieldKey] = new TypeScriptObjectField(bField.type, true);\n                    return result;\n                }\n\n                //has both keys\n\n                const isOptional = aField.isOptional || bField.isOptional;\n\n                const mergedFieldType = mergeTypeScriptTypes(aField.type, bField.type, options);\n\n                result[fieldKey] = new TypeScriptObjectField(mergedFieldType, isOptional);\n                return result;\n            }, {} as Record<string, TypeScriptObjectField>)\n            .value();\n\n        return new TypeScriptObject(a.name, mergedFields);\n    }\n\n    if (a instanceof TypeScriptArray && b instanceof TypeScriptArray) {\n        const mergedTypes = mergeTypeScriptTypes(a.type, b.type, options);\n        return new TypeScriptArray(mergedTypes);\n    }\n\n    if (a instanceof TypeScriptUnion || b instanceof TypeScriptUnion) {\n        if (a instanceof TypeScriptUnion && b instanceof TypeScriptUnion) {\n            return new TypeScriptUnion(a.name, uniq([...a.types, ...b.types]));\n        }\n\n        const union = a instanceof TypeScriptUnion ? a : b instanceof TypeScriptUnion ? b : undefined;\n        const notUnion = a instanceof TypeScriptUnion ? b : b instanceof TypeScriptUnion ? a : undefined;\n\n        if (union === undefined || notUnion === undefined) {\n            throw new Error();\n        }\n\n        const defaultResult = new TypeScriptUnion(union.name, uniq([...union.types, notUnion]));\n\n        if (isString(notUnion)) {\n            return defaultResult;\n        }\n\n        const unionSameTypeIndex = union.types.findIndex((value) => value.constructor === notUnion.constructor);\n\n        if (unionSameTypeIndex === -1) {\n            return defaultResult;\n        }\n\n        const unionObject = union.types[unionSameTypeIndex];\n        union.types[unionSameTypeIndex] = mergeTypeScriptTypes(unionObject, notUnion, options);\n        return union;\n    }\n\n    return bothTypes; //TODO\n};\n\nexport default mergeTypeScriptTypes;\n","import { TypeScriptType } from '../types/typescript';\nimport mergeTypeScriptTypes from './mergeTypeScriptTypes';\nimport JsonToTypeScriptConversionOptions from '../types/JsonToTypeScriptConversionOptions';\n\n//TODO\nconst getMergedTypeScriptTypes = (\n    types: TypeScriptType[],\n    options: JsonToTypeScriptConversionOptions\n): TypeScriptType => {\n    return types.reduce((result, value) => {\n        if (result === undefined) {\n            return value;\n        }\n\n        return mergeTypeScriptTypes(result, value, options);\n    }, undefined as unknown as TypeScriptType);\n};\n\nexport default getMergedTypeScriptTypes;\n","import { JsonArray, JsonType } from '../types/json';\nimport {\n    TypeScriptArray,\n    TypeScriptObject,\n    TypeScriptObjectField,\n    TypeScriptTuple,\n    TypeScriptType,\n    TypeScriptUnknown\n} from '../types/typescript';\nimport { chain, isString } from 'lodash';\nimport { singular } from 'pluralize';\nimport getMergedTypeScriptTypes from './mergeTypeScriptTypesList';\nimport JsonToTypeScriptConversionOptions from '../types/JsonToTypeScriptConversionOptions';\n\nconst getTypeScriptType = (\n    name: string,\n    jsonType: JsonType,\n    options: JsonToTypeScriptConversionOptions\n): TypeScriptType => {\n    const actualName = options.typeNameTransformer ? options.typeNameTransformer(name) : name;\n\n    const transformTypeName = options.typeNameTransformer ?? ((typeName: string) => typeName);\n    const transformFieldName = options.fieldNameTransformer ?? ((typeName: string) => typeName);\n\n    const typeName = transformTypeName(actualName);\n    const arrayElementName = singular(typeName);\n\n    if (isString(jsonType)) {\n        return jsonType;\n    }\n\n    if (jsonType instanceof JsonArray) {\n        if (options.isTuplesEnabled) {\n            if (jsonType.types.length === 0) {\n                return new TypeScriptTuple('', []);\n            }\n\n            const typeScriptTypes = jsonType.types.map((type) => getTypeScriptType(arrayElementName, type, options));\n            // const mergedType = getMergedTypeScriptTypes(typeScriptTypes, options);\n\n            return new TypeScriptTuple(arrayElementName, typeScriptTypes);\n        } else {\n            if (jsonType.types.length === 0) {\n                return new TypeScriptArray(new TypeScriptUnknown());\n            }\n\n            const typeScriptTypes = jsonType.types.map((type) => getTypeScriptType(arrayElementName, type, options));\n            const mergedType = getMergedTypeScriptTypes(typeScriptTypes, options);\n\n            return new TypeScriptArray(mergedType);\n        }\n    }\n\n    return new TypeScriptObject(\n        typeName,\n        chain(jsonType.fields)\n            .mapValues((field, name) => {\n                return new TypeScriptObjectField(getTypeScriptType(transformFieldName(name), field, options));\n            })\n            .mapKeys((value, key) => transformFieldName(key))\n            .value()\n    );\n};\n\nexport default getTypeScriptType;\n","import { JsonArray, JsonObject, JsonType } from '../types/json';\nimport { chain, isArray, isBoolean, isNil, isObject, isString, mapValues } from 'lodash';\n\nconst getJsonType = (object: unknown): JsonType => {\n    if (isObject(object)) {\n        if (isArray(object)) {\n            return new JsonArray(chain(object).map(getJsonType).value());\n        }\n\n        return new JsonObject(\n            mapValues(object, (value) => {\n                return getJsonType(value);\n            }) as Record<string, JsonType>\n        );\n    }\n\n    if (isNil(object)) {\n        return 'null';\n    }\n\n    if (typeof object === 'number' || typeof object === 'bigint') {\n        return 'number';\n    }\n\n    if (isString(object)) {\n        return 'string';\n    }\n\n    if (isBoolean(object)) {\n        return 'boolean';\n    }\n\n    console.error({ object });\n    throw new Error('Unable to parse JSON object');\n};\n\nexport default getJsonType;\n","import {\n    DeclarableTypeScriptType,\n    IDeclarableTypeScriptType,\n    TypeScriptArray,\n    TypeScriptType,\n    TypeScriptTypesCombination,\n    TypeScriptUnknown\n} from '../types/typescript';\nimport { isObject, isString } from 'lodash';\nimport mapObject from '../../../utils/mapObject';\nimport JsonToTypeScriptConversionOptions from '../types/JsonToTypeScriptConversionOptions';\n\nconst getAllTypeScriptTypeInnerDeclarableTypes = (\n    type: TypeScriptType,\n    options: JsonToTypeScriptConversionOptions,\n    includeSelf = false\n): IDeclarableTypeScriptType[] => {\n    if (isString(type) || type instanceof TypeScriptUnknown) {\n        return []; //getTypeScriptTypeDeclaration(type, name, exportType)\n    }\n\n    if (type instanceof TypeScriptTypesCombination) {\n        return type.types.flatMap((innerType) => getAllTypeScriptTypeInnerDeclarableTypes(innerType, options, true));\n    }\n\n    if (type instanceof TypeScriptArray) {\n        return getAllTypeScriptTypeInnerDeclarableTypes(type.type, options, true);\n    }\n\n    const result = mapObject(type.fields, (fieldName, field) =>\n        getAllTypeScriptTypeInnerDeclarableTypes(field.type, options, true)\n    ).flatMap((value) => value);\n\n    if (includeSelf) {\n        if (options.isReversedOrder) {\n            result.unshift(type);\n        } else {\n            result.push(type);\n        }\n    }\n\n    return result;\n};\n\nexport const getAllTypeScriptTypeDeclarableTypes = (\n    type: TypeScriptType,\n    name: string,\n    options: JsonToTypeScriptConversionOptions\n): IDeclarableTypeScriptType[] => {\n    const declarableTypes: IDeclarableTypeScriptType[] = getAllTypeScriptTypeInnerDeclarableTypes(type, options);\n\n    const declarableSelf: IDeclarableTypeScriptType =\n        isObject(type) && 'stringifyDeclaration' in type ? type : new DeclarableTypeScriptType(name, type);\n\n    if (options.isReversedOrder) {\n        declarableTypes.unshift(declarableSelf);\n    } else {\n        declarableTypes.push(declarableSelf);\n    }\n\n    return declarableTypes;\n};\n\nexport default getAllTypeScriptTypeInnerDeclarableTypes;\n","import { getAllTypeScriptTypeDeclarableTypes } from './getAllTypeScriptTypeInnerDeclarableTypes';\nimport { IDeclarableTypeScriptType, TypeScriptType } from '../types/typescript';\nimport JsonToTypeScriptConversionOptions from '../types/JsonToTypeScriptConversionOptions';\n\nconst renameConflictingType = (\n    type: IDeclarableTypeScriptType,\n    isConflicting: (type: IDeclarableTypeScriptType) => boolean\n): void => {\n    const match = /^(.*?)(\\d+)$/.exec(type.name);\n    if (!match) {\n        type.name += '2';\n    } else {\n        const [, left, numericPart] = match;\n        const numeric = Number(numericPart);\n        type.name = `${left}${numeric + 1}`;\n    }\n\n    if (isConflicting(type)) {\n        renameConflictingType(type, isConflicting);\n    }\n};\n\nconst getAllTypeScriptTypeDeclarations = (\n    type: TypeScriptType,\n    rootName: string,\n    options: JsonToTypeScriptConversionOptions\n): string => {\n    const actualRootName = options.typeNameTransformer ? options.typeNameTransformer(rootName) : rootName;\n\n    const declarableTypes = getAllTypeScriptTypeDeclarableTypes(type, actualRootName, options);\n\n    const correctlyNamedDeclarableTypes: IDeclarableTypeScriptType[] = [];\n\n    declarableTypes.forEach((declarableType) => {\n        const isConflicting = (type: IDeclarableTypeScriptType) =>\n            correctlyNamedDeclarableTypes.some((value) => value.name === type.name);\n\n        if (isConflicting(declarableType)) {\n            renameConflictingType(declarableType, isConflicting);\n        }\n\n        correctlyNamedDeclarableTypes.push(declarableType);\n    });\n\n    return declarableTypes.map((declarable) => declarable.stringifyDeclaration(options)).join('\\n\\n');\n};\n\nexport default getAllTypeScriptTypeDeclarations;\n","import getTypeScriptType from './getTypeScriptType';\nimport getJsonType from './getJsonType';\nimport getAllTypeScriptTypeDeclarations from './getAllTypeScriptTypeDeclarations';\nimport JsonToTypeScriptConversionOptions from '../types/JsonToTypeScriptConversionOptions';\n\nconst convertJsonToTypeScript = (json: string, options: JsonToTypeScriptConversionOptions): string => {\n    const jsonObject = JSON.parse(json);\n    const jsonType = getJsonType(jsonObject);\n\n    const { rootTypeName } = options;\n\n    const typeScriptType = getTypeScriptType(rootTypeName, jsonType, options);\n    return getAllTypeScriptTypeDeclarations(typeScriptType, rootTypeName, options);\n};\n\nexport default convertJsonToTypeScript;\n","const capitalizeFirst = (value: string): string => {\n    return value.charAt(0).toUpperCase() + value.slice(1);\n};\n\nexport default capitalizeFirst;\n","import { camelCase } from 'lodash';\nimport capitalizeFirst from './capitalizeFirst';\n\nconst pascalCase = (string: string) => {\n    return capitalizeFirst(camelCase(string));\n};\n\nexport default pascalCase;\n","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"JsonToTypeScriptSettings_formContainer__p0cEG\",\"title\":\"JsonToTypeScriptSettings_title__QCy6M\",\"rightSide\":\"JsonToTypeScriptSettings_rightSide__O8OfP\",\"formItem\":\"JsonToTypeScriptSettings_formItem__P5IOE\",\"label\":\"JsonToTypeScriptSettings_label__Xq4Wf\",\"input\":\"JsonToTypeScriptSettings_input__Fm3KT\"};","import React, { Dispatch, FunctionComponent, SetStateAction } from 'react';\nimport JsonToTypeScriptConversionSelectableOptions, {\n    NameTransformer\n} from '../types/JsonToTypeScriptConversionSelectableOptions';\nimport { Button, Col, Input, Select, Switch, Tag } from 'antd';\nimport useChangeStateHandler from '../../../hooks/useChangeStateHandler';\nimport styles from './JsonToTypeScriptSettings.module.scss';\nimport ExportType from '../types/ExportType';\nimport Text from 'antd/lib/typography/Text';\nimport classNames from 'classnames';\nimport { CloseOutlined } from '@ant-design/icons';\nimport { NullType, ObjectDeclaration, UnknownType } from '../types/JsonToTypeScriptConversionOptions';\n\ninterface Props {\n    options: JsonToTypeScriptConversionSelectableOptions;\n    setOptions: Dispatch<SetStateAction<JsonToTypeScriptConversionSelectableOptions>>;\n    onClose?: () => void;\n}\n\nconst JsonToTypeScriptSettings: FunctionComponent<Props> = ({ options, setOptions, onClose }) => {\n    const handleOptionChange = useChangeStateHandler(setOptions);\n\n    return (\n        <Col className={styles.formContainer}>\n            <div className={styles.title}>\n                <h3 className=\"mb-0\">Settings</h3>\n                <div className={styles.rightSide}>\n                    {/*<Button*/}\n                    {/*    size=\"small\"*/}\n                    {/*    type=\"dashed\"*/}\n                    {/*>*/}\n                    {/*    Reset*/}\n                    {/*</Button>*/}\n                    {onClose && <Button size=\"small\" type=\"text\" icon={<CloseOutlined />} onClick={onClose} />}\n                </div>\n            </div>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Root type name</span>\n                <Input\n                    className={styles.input}\n                    value={options.rootTypeName}\n                    onChange={handleOptionChange('rootTypeName')}\n                />\n            </label>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Export type</span>\n                <Select className={styles.input} value={options.exportType} onChange={handleOptionChange('exportType')}>\n                    <Select.Option key={ExportType.NONE}>None</Select.Option>\n                    <Select.Option key={ExportType.ES_MODULE}>ES Module</Select.Option>\n                    <Select.Option key={ExportType.COMMONJS}>\n                        <Text type=\"danger\" title=\"CommonJS\">\n                            CommonJS\n                        </Text>\n                    </Select.Option>\n                </Select>\n            </label>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Field names</span>\n                <Select\n                    className={styles.input}\n                    value={options.fieldNameTransformer}\n                    onChange={handleOptionChange('fieldNameTransformer')}\n                >\n                    <Select.Option key={NameTransformer.NONE}>Not change</Select.Option>\n                    <Select.Option key={NameTransformer.CAMEL_CASE}>camelCase</Select.Option>\n                    <Select.Option key={NameTransformer.PASCAL_CASE}>PascalCase</Select.Option>\n                    <Select.Option key={NameTransformer.SNAKE_CASE}>snake_case</Select.Option>\n                    <Select.Option key={NameTransformer.SCREAMING_SNAKE_CASE}>SCREAMING_SNAKE_CASE</Select.Option>\n                    <Select.Option key={NameTransformer.KEBAB_CASE}>kebab-case</Select.Option>\n                </Select>\n            </label>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Type names</span>\n                <Select\n                    className={styles.input}\n                    value={options.typeNameTransformer}\n                    onChange={handleOptionChange('typeNameTransformer')}\n                >\n                    <Select.Option key={NameTransformer.NONE}>Not change</Select.Option>\n                    <Select.Option key={NameTransformer.CAMEL_CASE}>camelCase</Select.Option>\n                    <Select.Option key={NameTransformer.PASCAL_CASE}>PascalCase</Select.Option>\n                    <Select.Option key={NameTransformer.SNAKE_CASE}>snake_case</Select.Option>\n                    <Select.Option key={NameTransformer.SCREAMING_SNAKE_CASE}>SCREAMING_SNAKE_CASE</Select.Option>\n                </Select>\n            </label>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Unknown type</span>\n                <Select\n                    className={styles.input}\n                    value={options.unknownType}\n                    onChange={handleOptionChange('unknownType')}\n                >\n                    <Select.Option key={UnknownType.UNKNOWN}>unknown</Select.Option>\n                    <Select.Option key={UnknownType.ANY}>any</Select.Option>\n                </Select>\n            </label>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Null type</span>\n                <Select className={styles.input} value={options.nullType} onChange={handleOptionChange('nullType')}>\n                    <Select.Option key={NullType.NULL}>null</Select.Option>\n                    <Select.Option key={NullType.UNDEFINED}>undefined</Select.Option>\n                </Select>\n            </label>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Object declaration</span>\n                <Select\n                    className={styles.input}\n                    value={options.objectDeclaration}\n                    onChange={handleOptionChange('objectDeclaration')}\n                >\n                    <Select.Option key={ObjectDeclaration.INTERFACE}>Interface</Select.Option>\n                    <Select.Option key={ObjectDeclaration.TYPE}>Type</Select.Option>\n                </Select>\n            </label>\n\n            <label className={classNames('mt-1', styles.formItem)}>\n                <Switch checked={options.isReversedOrder} onChange={handleOptionChange('isReversedOrder')} />\n                <span className=\"ms-3\">Reverse declarations</span>\n            </label>\n            <label className={classNames('mt-1', styles.formItem)}>\n                <Switch checked={options.isTuplesEnabled} onChange={handleOptionChange('isTuplesEnabled')} />\n                <Text className=\"ms-3\">\n                    Enable tuples{' '}\n                    <Tag color=\"warning\" className=\"ms-1\">\n                        experimental\n                    </Tag>\n                </Text>\n            </label>\n        </Col>\n    );\n};\n\nexport default JsonToTypeScriptSettings;\n","import { snakeCase } from 'lodash';\n\nconst screamingSnakeCase = (string: string) => {\n    return snakeCase(string).toLocaleUpperCase();\n};\n\nexport default screamingSnakeCase;\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { Alert, Button, Popover, Tooltip } from 'antd';\nimport styles from './JsonToTypeScriptPage.module.scss';\nimport AppEditor from '../../components/appEditor/AppEditor';\nimport { editor } from 'monaco-editor';\nimport { useDebouncedMemo } from '../../hooks/debouncedMemo';\nimport ExportType from './types/ExportType';\nimport convertJsonToTypeScript from './utils/convertJsonToTypeScript';\nimport { SettingOutlined } from '@ant-design/icons';\nimport getErrorMessage from '../../utils/getErrorMessage';\nimport CopyButton from '../../components/copyButton/CopyButton';\nimport { useLocalstorageState } from 'rooks';\nimport getLocalStorageKey from '../../utils/getLocalStorageKey';\nimport JsonToTypeScriptConversionSelectableOptions, {\n    NameTransformer\n} from './types/JsonToTypeScriptConversionSelectableOptions';\nimport JsonToTypeScriptConversionOptions, {\n    NullType,\n    ObjectDeclaration,\n    UnknownType\n} from './types/JsonToTypeScriptConversionOptions';\nimport { camelCase, kebabCase, snakeCase } from 'lodash';\nimport pascalCase from '../../utils/pascalCase';\nimport JsonToTypeScriptSettings from './components/JsonToTypeScriptSettings';\nimport screamingSnakeCase from '../../utils/screamingSnakeCase';\nimport DoubleConverterPageContainer from '../../layouts/pages/doubleConverterPageContainer/DoubleConverterPageContainer';\n\nconst jsonEditorOptions: editor.IStandaloneEditorConstructionOptions = {\n    minimap: { enabled: false }\n};\n\nconst typescriptEditorOptions: editor.IStandaloneEditorConstructionOptions = {\n    readOnly: true,\n    minimap: { enabled: false }\n};\n\nconst defaultSelectableConversionOptions: JsonToTypeScriptConversionSelectableOptions = {\n    rootTypeName: 'Root',\n    exportType: ExportType.ES_MODULE,\n    isReversedOrder: true,\n    typeNameTransformer: NameTransformer.PASCAL_CASE,\n    fieldNameTransformer: NameTransformer.NONE,\n    isTuplesEnabled: false,\n    nullType: NullType.NULL,\n    unknownType: UnknownType.UNKNOWN,\n    objectDeclaration: ObjectDeclaration.INTERFACE\n};\n\nconst nameTransformers: Readonly<Record<NameTransformer, (name: string) => string>> = {\n    [NameTransformer.NONE]: (name) => name,\n    [NameTransformer.CAMEL_CASE]: camelCase,\n    [NameTransformer.PASCAL_CASE]: pascalCase,\n    [NameTransformer.SNAKE_CASE]: snakeCase,\n    [NameTransformer.SCREAMING_SNAKE_CASE]: screamingSnakeCase,\n    [NameTransformer.KEBAB_CASE]: kebabCase\n};\n\nconst getConversionOptions = (\n    selectableConversionOptions: JsonToTypeScriptConversionSelectableOptions\n): JsonToTypeScriptConversionOptions => {\n    const { fieldNameTransformer, typeNameTransformer, ...restOptions } = selectableConversionOptions;\n\n    return {\n        ...restOptions,\n        fieldNameTransformer: nameTransformers[fieldNameTransformer],\n        typeNameTransformer: nameTransformers[typeNameTransformer]\n    };\n};\n\nconst JsonToTypeScriptPage = () => {\n    const [json, setJson] = useState<string>('');\n    const [error, setError] = useState<string>();\n    const [isSettingsTooltipVisible, setIsSettingsTooltipVisible] = useState<boolean>(false);\n    const [isSettingsVisible, setIsSettingsVisible] = useState<boolean>(false);\n\n    const [selectableConversionOptions, setSelectableConversionOptions] =\n        useLocalstorageState<JsonToTypeScriptConversionSelectableOptions>(\n            getLocalStorageKey('json-to-typescript', 'conversionOptions'),\n            defaultSelectableConversionOptions\n        );\n\n    const conversionOptions = useMemo(() => {\n        return getConversionOptions(selectableConversionOptions);\n    }, [selectableConversionOptions]);\n\n    const typeScript = useDebouncedMemo(\n        (noResult) => {\n            if (!json?.trim()) {\n                setError(undefined);\n                return '';\n            }\n\n            try {\n                const result = convertJsonToTypeScript(json, conversionOptions);\n\n                setError(undefined);\n\n                return result;\n            } catch (e) {\n                setError(getErrorMessage(e));\n\n                if (e instanceof SyntaxError) {\n                    return noResult;\n                } else {\n                    throw e;\n                }\n            }\n        },\n        [json, conversionOptions],\n        50\n    );\n\n    const handleSettingsClick = useCallback(() => {\n        setIsSettingsVisible((isVisible) => !isVisible);\n        setIsSettingsTooltipVisible(false);\n    }, []);\n\n    const handleSettingsTooltipVisibleChange = useCallback(\n        (value: boolean) => {\n            if (!isSettingsVisible) {\n                setIsSettingsTooltipVisible(value);\n            }\n        },\n        [isSettingsVisible]\n    );\n\n    return (\n        <DoubleConverterPageContainer\n            className={styles.pageContainer}\n            leftTitle=\"JSON\"\n            leftExtra={\n                <Popover\n                    trigger=\"click\"\n                    visible={isSettingsVisible}\n                    onVisibleChange={setIsSettingsVisible}\n                    content={\n                        <JsonToTypeScriptSettings\n                            options={selectableConversionOptions}\n                            setOptions={setSelectableConversionOptions}\n                            onClose={handleSettingsClick}\n                        />\n                    }\n                    placement=\"bottomRight\"\n                >\n                    <Tooltip\n                        title=\"Settings\"\n                        placement=\"bottomRight\"\n                        visible={isSettingsVisible ? false : isSettingsTooltipVisible}\n                        onVisibleChange={handleSettingsTooltipVisibleChange}\n                    >\n                        <Button type=\"text\" icon={<SettingOutlined />} onClick={handleSettingsClick} />\n                    </Tooltip>\n                </Popover>\n            }\n            left={\n                <AppEditor\n                    className={styles.editor}\n                    language=\"json\"\n                    options={jsonEditorOptions}\n                    value={json}\n                    onChange={setJson}\n                />\n            }\n            rightTitle=\"TypeScript\"\n            rightExtra={\n                <Tooltip title=\"Copy\" placement=\"bottomLeft\">\n                    <CopyButton value={typeScript} type=\"text\" children=\"\" />\n                </Tooltip>\n            }\n            right={\n                <AppEditor\n                    className={styles.editor}\n                    language=\"typescript\"\n                    options={typescriptEditorOptions}\n                    value={typeScript}\n                />\n            }\n            extra={error && <Alert className={styles.messageContainer} type=\"error\" showIcon message={error} />}\n        />\n    );\n};\n\nexport default JsonToTypeScriptPage;\n","const getErrorMessage = (error: any) => {\n    return error instanceof Error ? error.message : String(error);\n};\n\nexport default getErrorMessage;\n","const getLocalStorageKey = (scope: string, name: string): string => {\n    return `mrgrd56:${scope}/${name}`;\n};\n\nexport default getLocalStorageKey;\n","import ObjectKey from '../types/common/ObjectKey';\n\nconst mapObject = <K extends ObjectKey, V, R>(\n    object: Record<K, V>,\n    iteratee: (key: K, value: V, index: number) => R\n): R[] => {\n    return Object.keys(object).map((key, index) => {\n        const actualKey = key as K;\n        return iteratee(actualKey, object[actualKey], index);\n    });\n};\n\nexport default mapObject;\n"],"names":["loadingNode","size","className","loading","theme","onChange","props","isDarkMode","useAppTheme","handleChange","useCallback","value","ev","classNames","text","navigator","clipboard","writeText","blob","write","ClipboardItem","type","copyEmpty","children","onClick","icon","useState","isCopied","setIsCopied","copiedTimeoutRef","useRef","handleClick","event","replacedValue","actualValue","current","clearTimeout","isNil","isString","copyText","Blob","copyBlob","setTimeout","CheckOutlined","CopyOutlined","createDebouncedMemoHook","debounceFn","factory","deps","wait","setValue","factoryRef","useAutoRef","debounceFunction","call","actualNoResult","Object","freeze","_noResult","v4","noResult","isObject","isNoResult","useEffect","useDebouncedMemo","debounce","throttle","setState","key","state","isChangeEvent","isObjectLike","changeState","useChangeState","target","leftTitle","rightTitle","leftExtra","rightExtra","left","right","extra","noPadding","pageProps","PageContainer","styles","xs","PageTag","getTagNodes","WIP","color","ClockCircleOutlined","NOT_WORKING","WarningOutlined","renderTag","tag","index","React","ref","title","description","titleExtra","tags","noContentPadding","contentClassName","restProps","renderedTags","useMemo","map","length","direction","Paragraph","ExportType","NullType","UnknownType","ObjectDeclaration","IObject","fields","IArray","types","JsonObject","JsonArray","options","nullType","stringifyReference","NameTransformer","isValidJsIdentifier","regex","test","isValidTsTypeFieldName","additionalTsRegex","DeclarableTypeScriptType","name","this","stringifyDeclaration","getExportKeyword","exportType","stringifyTypeName","stringifyDeclarationBody","getTypeScriptTypeReference","TypeScriptUnknown","isUnknown","unknownType","TypeScriptObjectField","isOptional","TypeScriptObject","exportKeyword","declarationBody","declarationType","objectDeclaration","INTERFACE","TYPE","mapObject","field","stringifyFieldName","join","TypeScriptArray","typeReference","TypeScriptUnion","TypeScriptTypesCombination","TypeScriptTuple","result","trim","filter","remove","mergeTypeScriptTypes","a","b","singleType","bothTypes","getTypeScriptUnion","aKeys","keys","bKeys","allKeys","chain","flatMap","uniq","mergedFields","reduce","fieldKey","aHasKey","includes","bHasKey","aField","bField","console","error","mergedFieldType","mergedTypes","union","undefined","notUnion","Error","defaultResult","unionSameTypeIndex","findIndex","constructor","unionObject","getTypeScriptType","jsonType","actualName","typeNameTransformer","transformTypeName","typeName","transformFieldName","fieldNameTransformer","arrayElementName","singular","isTuplesEnabled","typeScriptTypes","mergedType","getMergedTypeScriptTypes","mapValues","mapKeys","getJsonType","object","isArray","isBoolean","getAllTypeScriptTypeInnerDeclarableTypes","includeSelf","innerType","fieldName","isReversedOrder","unshift","push","renameConflictingType","isConflicting","match","exec","numericPart","numeric","Number","rootName","declarableTypes","declarableSelf","getAllTypeScriptTypeDeclarableTypes","correctlyNamedDeclarableTypes","forEach","declarableType","some","declarable","json","jsonObject","JSON","parse","rootTypeName","typeScriptType","getAllTypeScriptTypeDeclarations","charAt","toUpperCase","slice","string","capitalizeFirst","camelCase","setOptions","onClose","handleOptionChange","useChangeStateHandler","CloseOutlined","Text","NONE","CAMEL_CASE","PASCAL_CASE","SNAKE_CASE","SCREAMING_SNAKE_CASE","KEBAB_CASE","UNKNOWN","ANY","NULL","UNDEFINED","checked","snakeCase","toLocaleUpperCase","jsonEditorOptions","minimap","enabled","typescriptEditorOptions","readOnly","defaultSelectableConversionOptions","nameTransformers","pascalCase","screamingSnakeCase","kebabCase","setJson","setError","isSettingsTooltipVisible","setIsSettingsTooltipVisible","isSettingsVisible","setIsSettingsVisible","useLocalstorageState","getLocalStorageKey","selectableConversionOptions","setSelectableConversionOptions","conversionOptions","restOptions","getConversionOptions","typeScript","convertJsonToTypeScript","e","getErrorMessage","SyntaxError","handleSettingsClick","isVisible","handleSettingsTooltipVisibleChange","DoubleConverterPageContainer","trigger","visible","onVisibleChange","content","placement","SettingOutlined","AppEditor","language","CopyButton","showIcon","message","String","scope","iteratee"],"sourceRoot":""}