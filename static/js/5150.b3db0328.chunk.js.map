{"version":3,"file":"static/js/5150.b3db0328.chunk.js","mappings":"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","sources":["hooks/useChangeState.ts","hooks/useChangeAnyStateHandler.ts","hooks/useChangeStateHandler.ts","hooks/useSpecialEffect.ts","hooks/useDeepEffect.ts","pages/passwordGeneratorPage/PasswordGeneratorPage.tsx","utils/getNpmPackageLink.ts"],"sourcesContent":["import { Dispatch, SetStateAction, useCallback } from 'react';\n\nconst useChangeState = <S extends object>(setState: Dispatch<SetStateAction<S>>) => {\n    return useCallback(<K extends keyof S>(key: K, value: S[K]) => {\n        setState((state) => ({\n            ...state,\n            [key]: value\n        }));\n    }, []);\n};\n\nexport default useChangeState;\n","import { Dispatch, SetStateAction } from 'react';\nimport { isObject } from 'lodash';\nimport call from '../utils/call';\nimport ObjectKey from '../types/common/ObjectKey';\n\nexport interface TypedChangeEvent<T, P extends ObjectKey> {\n    target: {\n        [key in P]: T;\n    };\n}\n\nexport const isChangeEvent = (value: unknown): value is TypedChangeEvent<unknown, ObjectKey> => {\n    return isObject(value) && 'target' in value;\n};\n\nconst useChangeAnyStateHandler = <S, P extends ObjectKey>(\n    setState: Dispatch<SetStateAction<S>>,\n    property: P = 'value' as P\n) => {\n    return (value: TypedChangeEvent<S, P> | S) => {\n        const actualValue = call(() => {\n            if (isChangeEvent(value)) {\n                const event = value as TypedChangeEvent<S, P>;\n                return event.target[property];\n            }\n\n            return value;\n        });\n\n        setState(actualValue);\n    };\n};\n\nexport default useChangeAnyStateHandler;\n","import { Dispatch, SetStateAction, useCallback } from 'react';\nimport call from '../utils/call';\nimport useChangeState from './useChangeState';\nimport { isChangeEvent, TypedChangeEvent } from './useChangeAnyStateHandler';\nimport ObjectKey from '../types/common/ObjectKey';\n\nconst useChangeStateHandler = <S extends object, P extends ObjectKey = 'value'>(\n    setState: Dispatch<SetStateAction<S>>,\n    property: P = 'value' as P\n) => {\n    const changeState = useChangeState(setState);\n\n    return useCallback(\n        <K extends keyof S, T extends S[K]>(key: K) => {\n            return (value: TypedChangeEvent<T, P> | T) => {\n                const actualValue = call(() => {\n                    if (isChangeEvent(value)) {\n                        const event = value as TypedChangeEvent<T, P>;\n                        return event.target[property];\n                    }\n\n                    return value;\n                });\n\n                changeState(key, actualValue);\n            };\n        },\n        [changeState]\n    );\n};\n\nexport default useChangeStateHandler;\n","import { DependencyList, EffectCallback, useEffect, useRef } from 'react';\n\nexport interface SpecialEffectOptions {\n    skipFirstRender?: boolean;\n}\n\nconst useSpecialEffect = (effect: EffectCallback, deps: DependencyList, options?: SpecialEffectOptions) => {\n    const { skipFirstRender } = options ?? {};\n\n    const wasRenderedRef = useRef<boolean>(false);\n\n    useEffect(() => {\n        const wasRendered = wasRenderedRef.current;\n        wasRenderedRef.current = true;\n\n        if (skipFirstRender && !wasRendered) {\n            return;\n        }\n\n        effect();\n    }, deps);\n};\n\nexport default useSpecialEffect;\n","import { DependencyList, EffectCallback, useRef } from 'react';\nimport { isEqual } from 'lodash';\nimport useSpecialEffect, { SpecialEffectOptions } from './useSpecialEffect';\n\nconst useDeepEffect = (effect: EffectCallback, deps: DependencyList, options?: SpecialEffectOptions) => {\n    const previousDepsRef = useRef<DependencyList>();\n\n    useSpecialEffect(\n        () => {\n            const previousDeps = previousDepsRef.current;\n            previousDepsRef.current = deps;\n\n            if (!isEqual(previousDeps, deps)) {\n                return effect();\n            }\n        },\n        deps,\n        options\n    );\n};\n\nexport default useDeepEffect;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\nimport PageContainer from '../../layouts/pages/pageContainer/PageContainer';\nimport { Button, Checkbox, Col, notification, Row, Slider, Space } from 'antd';\nimport Text from 'antd/lib/typography/Text';\nimport CopyButton from '../../components/copyButton/CopyButton';\nimport ExternalLink from '../../components/ExternalLink';\nimport getNpmPackageLink from '../../utils/getNpmPackageLink';\nimport { useDebounce, useDidMount, useLocalstorageState } from 'rooks';\nimport getLocalStorageKey from '../../utils/getLocalStorageKey';\nimport PasswordGenerator, { GenerateOptions } from 'generate-password-browser';\nimport useChangeStateHandler from '../../hooks/useChangeStateHandler';\nimport Flex from '../../components/flex/Flex';\nimport pluralize from 'pluralize';\nimport { SliderMarks } from 'antd/lib/slider';\nimport getErrorMessage from '../../utils/getErrorMessage';\nimport useDeepEffect from '../../hooks/useDeepEffect';\n\nconst titleExtra = (\n    <Text type=\"secondary\">\n        uses{' '}\n        <ExternalLink href={getNpmPackageLink('generate-password-browser')}>generate-password-browser</ExternalLink>\n    </Text>\n);\n\nconst initialOptions: GenerateOptions = {\n    length: 8,\n    lowercase: true,\n    uppercase: true,\n    numbers: true,\n    symbols: true\n};\n\nconst lengthSliderMarks: SliderMarks = {\n    [8]: '8',\n    [16]: '16',\n    [32]: '32',\n    [64]: '64'\n};\n\nconst generatePassword = (options: GenerateOptions) => {\n    try {\n        return PasswordGenerator.generate(options);\n    } catch (e) {\n        const message = getErrorMessage(e);\n        notification.error({\n            message: 'An error occurred',\n            description: message\n        });\n    }\n};\n\nconst PasswordGeneratorPage: FunctionComponent = () => {\n    const [options, setOptions] = useLocalstorageState<GenerateOptions>(\n        getLocalStorageKey('password-generator', 'options'),\n        initialOptions\n    );\n    const handleOptionChange = useChangeStateHandler(setOptions);\n    const handleOptionCheck = useChangeStateHandler(setOptions, 'checked');\n\n    const [password, setPassword] = useState(generatePassword(options));\n\n    const generateManually = useCallback((options: GenerateOptions) => {\n        const newPassword = generatePassword(options);\n        setPassword(newPassword);\n        return newPassword;\n    }, []);\n\n    const generate = useCallback(() => {\n        return generateManually(options);\n    }, [generateManually, options]);\n\n    const generateDebounced = useDebounce(generateManually, 25);\n\n    useDidMount(() => {\n        generate();\n    });\n\n    useDeepEffect(\n        () => {\n            generateDebounced(options);\n        },\n        [options],\n        { skipFirstRender: true }\n    );\n\n    return (\n        <PageContainer title=\"Password Generator\" titleExtra={titleExtra}>\n            <Col>\n                <Row>\n                    <Space className=\"mb-2\">\n                        <Text copyable className=\"fs-6\">\n                            {password}\n                        </Text>\n                    </Space>\n                </Row>\n                <Space className=\"mb-3\">\n                    <Button onClick={generate}>Generate</Button>\n                    <CopyButton value={password} onClick={generate}>\n                        Generate and copy\n                    </CopyButton>\n                </Space>\n                <Flex col>\n                    <Text className=\"text-wrap word-break\">{pluralize('character', options.length, true)}</Text>\n                    <Slider value={options.length} onChange={handleOptionChange('length')} marks={lengthSliderMarks} />\n                    <Checkbox checked={options.lowercase} onChange={handleOptionCheck('lowercase')}>\n                        Lowercase\n                    </Checkbox>\n                    <span />\n                    <Checkbox checked={options.uppercase} onChange={handleOptionCheck('uppercase')}>\n                        Uppercase\n                    </Checkbox>\n                    <span />\n                    <Checkbox checked={options.numbers} onChange={handleOptionCheck('numbers')}>\n                        Numbers\n                    </Checkbox>\n                    <span />\n                    <Checkbox checked={Boolean(options.symbols)} onChange={handleOptionCheck('symbols')}>\n                        Symbols\n                    </Checkbox>\n                    <span />\n                    <Checkbox checked={Boolean(options.strict)} onChange={handleOptionCheck('strict')}>\n                        Strict\n                    </Checkbox>\n                    <span />\n                    <Checkbox\n                        checked={Boolean(options.excludeSimilarCharacters)}\n                        onChange={handleOptionCheck('excludeSimilarCharacters')}\n                    >\n                        Exclude similar characters\n                    </Checkbox>\n                </Flex>\n            </Col>\n        </PageContainer>\n    );\n};\n\nexport default PasswordGeneratorPage;\n","const getNpmPackageLink = (packageName: string): string => `https://www.npmjs.com/package/${packageName}`;\n\nexport default getNpmPackageLink;\n"],"names":["setState","useCallback","key","value","state","isChangeEvent","isObject","property","changeState","useChangeState","actualValue","call","target","effect","deps","options","skipFirstRender","wasRenderedRef","useRef","useEffect","wasRendered","current","previousDepsRef","useSpecialEffect","previousDeps","isEqual","titleExtra","Text","type","ExternalLink","href","getNpmPackageLink","initialOptions","length","lowercase","uppercase","numbers","symbols","lengthSliderMarks","generatePassword","PasswordGenerator","e","message","getErrorMessage","notification","description","useLocalstorageState","getLocalStorageKey","setOptions","handleOptionChange","useChangeStateHandler","handleOptionCheck","useState","password","setPassword","generateManually","newPassword","generate","generateDebounced","useDebounce","useDidMount","useDeepEffect","PageContainer","title","className","copyable","onClick","CopyButton","Flex","col","pluralize","onChange","marks","checked","Boolean","strict","excludeSimilarCharacters","packageName"],"sourceRoot":""}