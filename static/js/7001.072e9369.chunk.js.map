{"version":3,"file":"static/js/7001.072e9369.chunk.js","mappings":"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","sources":["webpack://mrgrd56.github.io/./src/pages/bgGeneratorPage/BgGeneratorPage.module.scss?56cf","utils/stringifySize.ts","utils/getWindowSize.ts","pages/bgGeneratorPage/BgGeneratorPage.tsx","utils/getScaledScreenSize.ts","utils/getScreenSize.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"antd-text-primary\":\"BgGeneratorPage_antd-text-primary__e4nyv\",\"resultImage\":\"BgGeneratorPage_resultImage__M-RJS\",\"sizeButtonsContainer\":\"BgGeneratorPage_sizeButtonsContainer__EJ6-H\"};","import { Size } from '../types';\n\nconst stringifySize = ({ width, height }: Size): string => `${width}x${height}`;\n\nexport default stringifySize;\n","import { Size } from '../types';\n\nconst getWindowSize = (): Size => {\n    const { innerWidth, innerHeight } = window;\n\n    return {\n        width: innerWidth,\n        height: innerHeight\n    };\n};\n\nexport default getWindowSize;\n","import React, { useCallback, useRef, useState } from 'react';\nimport styles from './BgGeneratorPage.module.scss';\nimport PageContainer from '../../layouts/pages/pageContainer/PageContainer';\nimport ExternalLink from '../../components/ExternalLink';\nimport { Button, Col, Image, InputNumber, Row, Space } from 'antd';\nimport { Size } from '../../types';\nimport getScaledScreenSize from '../../utils/getScaledScreenSize';\nimport { ColorChangeHandler, SketchPicker } from 'react-color';\nimport stringifySize from '../../utils/stringifySize';\nimport { useDebouncedMemo } from '../../hooks/debouncedMemo';\nimport getWindowSize from '../../utils/getWindowSize';\nimport getScreenSize from '../../utils/getScreenSize';\nimport './BgGeneratorPage.scss';\n\nconst generateImage = ({ width, height }: Size, color: string, imgCanvas: HTMLCanvasElement): string | undefined => {\n    if (width < 0 || height < 0) {\n        return;\n    }\n\n    const imgCanvasContext = imgCanvas.getContext('2d');\n\n    if (!imgCanvasContext) {\n        return;\n    }\n\n    imgCanvas.width = width;\n    imgCanvas.height = height;\n    imgCanvasContext.fillStyle = color;\n    imgCanvasContext.fillRect(0, 0, width, height);\n    return imgCanvas.toDataURL('image/png');\n};\n\nconst BgGeneratorPage = () => {\n    const imgCanvasRef = useRef<HTMLCanvasElement>(null);\n\n    const [size, setSize] = useState<Size>(getScaledScreenSize());\n    const [color, setColor] = useState<string>('#42a5f5');\n    const imgSource = useDebouncedMemo(\n        () => {\n            if (!imgCanvasRef.current) {\n                return;\n            }\n\n            return generateImage(size, color, imgCanvasRef.current);\n        },\n        [size, color],\n        50\n    );\n\n    const handleColorChange = useCallback<ColorChangeHandler>(({ rgb }) => {\n        const { r, g, b, a } = rgb;\n        setColor(`rgba(${r}, ${g}, ${b}, ${a})`);\n    }, []);\n\n    const handleSizeChange = useCallback(\n        (sizeKey: keyof Size) => (value: number) => {\n            setSize((currentSize) => ({\n                ...currentSize,\n                [sizeKey]: value\n            }));\n        },\n        []\n    );\n\n    const handleUseSize = (sizeFunction: () => Size) => () => {\n        setSize(sizeFunction());\n    };\n\n    return (\n        <PageContainer\n            title=\"Background Generator\"\n            description=\"Generates a simple background of the specified size and color\"\n            titleExtra={\n                <ExternalLink href=\"https://mrgrd56.github.io/bg-generator\">Check out old version</ExternalLink>\n            }\n        >\n            <canvas className=\"d-none\" ref={imgCanvasRef} />\n            <Col>\n                <Row gutter={16}>\n                    <Col className=\"mb-3\">\n                        <SketchPicker\n                            color={color}\n                            onChange={handleColorChange}\n                            className=\"BgGeneratorPage_color-picker\"\n                        />\n                    </Col>\n                    <Col className=\"mb-3\">\n                        <Space direction=\"vertical\">\n                            <Row gutter={10} align=\"middle\">\n                                <Col span={8}>\n                                    <label htmlFor=\"width-input\">Width</label>\n                                </Col>\n                                <Col>\n                                    <InputNumber\n                                        id=\"width-input\"\n                                        value={size.width}\n                                        onChange={handleSizeChange('width')}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row gutter={10} align=\"middle\">\n                                <Col span={8}>\n                                    <label htmlFor=\"height-input\">Height</label>\n                                </Col>\n                                <Col>\n                                    <InputNumber\n                                        id=\"height-input\"\n                                        value={size.height}\n                                        onChange={handleSizeChange('height')}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className={styles.sizeButtonsContainer}>\n                                <Button onClick={handleUseSize(getScaledScreenSize)}>\n                                    Use scaled screen size {stringifySize(getScaledScreenSize())}\n                                </Button>\n                                <Button onClick={handleUseSize(getScreenSize)}>\n                                    Use screen size {stringifySize(getScreenSize())}\n                                </Button>\n                                <Button onClick={handleUseSize(getWindowSize)}>\n                                    Use window size {stringifySize(getWindowSize())}\n                                </Button>\n                            </Row>\n                        </Space>\n                    </Col>\n                </Row>\n                <Col>\n                    <Image src={imgSource} className={styles.resultImage} />\n                </Col>\n            </Col>\n        </PageContainer>\n    );\n};\n\nexport default BgGeneratorPage;\n","import { Size } from '../types';\nimport { round } from 'lodash';\n\nconst getScaledScreenSize = (): Size => {\n    const { devicePixelRatio } = window;\n    const { width, height } = window.screen;\n\n    return {\n        width: round(width * devicePixelRatio),\n        height: round(height * devicePixelRatio)\n    };\n};\n\nexport default getScaledScreenSize;\n","import { Size } from '../types';\nimport { pick } from 'lodash';\n\nconst getScreenSize = (): Size => pick(window.screen, ['width', 'height']);\n\nexport default getScreenSize;\n"],"names":["width","height","window","innerWidth","innerHeight","imgCanvasRef","useRef","useState","getScaledScreenSize","size","setSize","color","setColor","imgSource","useDebouncedMemo","current","imgCanvas","imgCanvasContext","getContext","fillStyle","fillRect","toDataURL","generateImage","handleColorChange","useCallback","rgb","r","g","b","a","handleSizeChange","sizeKey","value","currentSize","handleUseSize","sizeFunction","PageContainer","title","description","titleExtra","ExternalLink","href","className","ref","gutter","onChange","direction","align","span","htmlFor","id","styles","onClick","stringifySize","getScreenSize","getWindowSize","src","devicePixelRatio","screen","round","pick"],"sourceRoot":""}