{"version":3,"file":"static/js/6575.474f8e7d.chunk.js","mappings":"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","sources":["types/MonacoLanguage.ts","components/MonacoLanguageSelect.tsx","webpack://mrgrd56.github.io/./src/pages/codeFormatterPage/CodeFormatterPage.module.scss?d21c","utils/formatCode/formatXml.ts","utils/formatCode/index.ts","pages/codeFormatterPage/CodeFormatterPage.tsx"],"sourcesContent":["export const monacoLanguages = [\n    'abap',\n    'aes',\n    'apex',\n    'azcli',\n    'bat',\n    'bicep',\n    'c',\n    'cameligo',\n    'clojure',\n    'coffeescript',\n    'cpp',\n    'csharp',\n    'csp',\n    'css',\n    'dart',\n    'dockerfile',\n    'ecl',\n    'elixir',\n    'flow9',\n    'freemarker2',\n    'freemarker2.tag-angle.interpolation-bracket',\n    'freemarker2.tag-angle.interpolation-dollar',\n    'freemarker2.tag-auto.interpolation-bracket',\n    'freemarker2.tag-auto.interpolation-dollar',\n    'freemarker2.tag-bracket.interpolation-bracket',\n    'freemarker2.tag-bracket.interpolation-dollar',\n    'fsharp',\n    'go',\n    'graphql',\n    'handlebars',\n    'hcl',\n    'html',\n    'ini',\n    'java',\n    'javascript',\n    'json',\n    'julia',\n    'kotlin',\n    'less',\n    'lexon',\n    'liquid',\n    'lua',\n    'm3',\n    'markdown',\n    'mips',\n    'msdax',\n    'mysql',\n    'objective-c',\n    'pascal',\n    'pascaligo',\n    'perl',\n    'pgsql',\n    'php',\n    'pla',\n    'plaintext',\n    'postiats',\n    'powerquery',\n    'powershell',\n    'proto',\n    'pug',\n    'python',\n    'qsharp',\n    'r',\n    'razor',\n    'redis',\n    'redshift',\n    'restructuredtext',\n    'ruby',\n    'rust',\n    'sb',\n    'scala',\n    'scheme',\n    'scss',\n    'shell',\n    'sol',\n    'sparql',\n    'sql',\n    'st',\n    'swift',\n    'systemverilog',\n    'tcl',\n    'twig',\n    'typescript',\n    'vb',\n    'verilog',\n    'xml',\n    'yaml'\n] as const;\n\ntype MonacoLanguage = typeof monacoLanguages[number];\n\nexport default MonacoLanguage;\n","import React, { FunctionComponent } from 'react';\nimport { monacoLanguages } from '../types/MonacoLanguage';\nimport { Select, SelectProps } from 'antd';\n\ntype Props = SelectProps;\n\nconst MonacoLanguageSelect: FunctionComponent<Props> = ({ children, ...props }) => {\n    return (\n        <Select {...props}>\n            {monacoLanguages.map((language) => (\n                <Select.Option key={language}>{language}</Select.Option>\n            ))}\n            {children}\n        </Select>\n    );\n};\n\nexport default MonacoLanguageSelect;\n","// extracted by mini-css-extract-plugin\nexport default {\"antd-text-primary\":\"CodeFormatterPage_antd-text-primary__Jn6ta\",\"page\":\"CodeFormatterPage_page__USQLf\",\"container\":\"CodeFormatterPage_container__f9Z+o\",\"controlsContainer\":\"CodeFormatterPage_controlsContainer__gB0vb\",\"formatContainer\":\"CodeFormatterPage_formatContainer__0OaVd\",\"languageSelect\":\"CodeFormatterPage_languageSelect__T7F-h\",\"editor\":\"CodeFormatterPage_editor__GSZ17\"};","import CodeFormatter from './types/CodeFormatter';\n\nconst XML_MIME = 'application/xml';\n\nconst domParser = new DOMParser();\nconst xmlSerializer = new XMLSerializer();\n\nconst stylesheet = domParser.parseFromString(\n    [\n        '<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">',\n        '  <xsl:strip-space elements=\"*\"/>',\n        '  <xsl:template match=\"para[content-style][not(text())]\">', // change to just text() to strip space in text nodes\n        '    <xsl:value-of select=\"normalize-space(.)\"/>',\n        '  </xsl:template>',\n        '  <xsl:template match=\"node()|@*\">',\n        '    <xsl:copy><xsl:apply-templates select=\"node()|@*\"/></xsl:copy>',\n        '  </xsl:template>',\n        '  <xsl:output indent=\"yes\"/>',\n        '</xsl:stylesheet>'\n    ].join('\\n'),\n    'application/xml'\n);\n\nconst formatXml: CodeFormatter = (source) => {\n    const sourceDocument = domParser.parseFromString(source, XML_MIME);\n    const xsltProcessor = new XSLTProcessor();\n    xsltProcessor.importStylesheet(stylesheet);\n    const resultDocument = xsltProcessor.transformToDocument(sourceDocument);\n    return xmlSerializer.serializeToString(resultDocument);\n};\n\nexport default formatXml;\n","import FormattedLanguage from './types/FormattedLanguage';\nimport CodeFormatter from './types/CodeFormatter';\nimport formatXml from './formatXml';\n\nconst formatters: Readonly<Record<FormattedLanguage, CodeFormatter>> = {\n    xml: formatXml\n};\n\nconst formatCode = (language: FormattedLanguage, source: string): string => formatters[language](source);\n\nexport default formatCode;\n","import React, { FunctionComponent, useCallback, useRef, useState } from 'react';\nimport PageContainer from '../../layouts/pages/pageContainer/PageContainer';\nimport { OnMount } from '@monaco-editor/react';\nimport { Button, Col, Row } from 'antd';\nimport styles from './CodeFormatterPage.module.scss';\nimport MonacoLanguage from '../../types/MonacoLanguage';\nimport { useLocalstorageState } from 'rooks';\nimport { editor, languages } from 'monaco-editor';\nimport CopyButton from '../../components/copyButton/CopyButton';\nimport formatCode from '../../utils/formatCode';\nimport AppEditor from '../../components/appEditor/AppEditor';\nimport getLocalStorageKey from '../../utils/getLocalStorageKey';\nimport MonacoLanguageSelect from '../../components/MonacoLanguageSelect';\n\n// interface FormattedLanguage {\n//     prettierParser: prettier.BuiltInParserName,\n//     monacoLanguage: MonacoLanguage\n// }\n\n// type FormattedLanguagesMap = Record<BuiltInParserName, MonacoLanguage>;\n//\n// const formatterLanguagesMap: FormattedLanguagesMap = {\n//     'angular': 'typescript',\n//     'babel-flow': 'flow9',\n//     'babel-ts': 'typescript',\n//     'babel': 'javascript',\n//     'css': 'css',\n//     'espree': 'plaintext',\n//     'flow': 'flow9',\n//     'glimmer': 'plaintext',\n//     'graphql': 'graphql',\n//     'html': 'html',\n//     'json-stringify': 'json',\n//     'json': 'json',\n//     'json5': 'json',\n//     'less': 'less',\n//     'lwc': 'plaintext',\n//     'markdown': 'markdown',\n//     'mdx': 'markdown',\n//     'meriyah': 'plaintext',\n//     'scss': 'scss',\n//     'typescript': 'typescript',\n//     'vue': 'typescript',\n//     'yaml': 'yaml'\n// };\n//\n// window.prettier = prettier;\n\nconst monacoOptions: editor.IStandaloneEditorConstructionOptions = {\n    formatOnPaste: true\n};\n\nconst CodeFormatterPage: FunctionComponent = () => {\n    const [selectedLanguage, setSelectedLanguage] = useLocalstorageState<MonacoLanguage>(\n        getLocalStorageKey('code-formatter', 'selectedLanguage'),\n        'typescript'\n    );\n    const [code, setCode] = useState<string>('');\n\n    const monacoEditorRef = useRef<editor.IStandaloneCodeEditor>();\n\n    const handleMonacoMount = useCallback<OnMount>((editor, monaco) => {\n        monacoEditorRef.current = editor;\n\n        monaco.languages.registerDocumentFormattingEditProvider('xml', {\n            provideDocumentFormattingEdits(\n                model: editor.ITextModel,\n                options: languages.FormattingOptions\n            ): languages.ProviderResult<languages.TextEdit[]> {\n                return [\n                    {\n                        text: formatCode('xml', model.getValue()),\n                        range: model.getFullModelRange()\n                    }\n                ];\n            }\n        });\n    }, []);\n\n    const handleFormatClick = useCallback(() => {\n        monacoEditorRef.current?.getAction('editor.action.formatDocument').run();\n    }, []);\n\n    return (\n        <PageContainer title=\"Code Formatter\" className={styles.page} noContentPadding>\n            <div className={styles.container}>\n                <Col className={styles.controlsContainer}>\n                    <Row className={styles.formatContainer}>\n                        <MonacoLanguageSelect\n                            className={styles.languageSelect}\n                            value={selectedLanguage}\n                            onChange={setSelectedLanguage}\n                        />\n                        <Button type=\"primary\" className={styles.formatButton} onClick={handleFormatClick}>\n                            Format\n                        </Button>\n                        <CopyButton value={code} type=\"default\" />\n                    </Row>\n                </Col>\n                <AppEditor\n                    className={styles.editor}\n                    language={selectedLanguage}\n                    value={code}\n                    onChange={setCode}\n                    options={monacoOptions}\n                    onMount={handleMonacoMount}\n                />\n            </div>\n        </PageContainer>\n    );\n};\n\nexport default CodeFormatterPage;\n"],"names":["monacoLanguages","children","props","map","language","domParser","DOMParser","xmlSerializer","XMLSerializer","stylesheet","parseFromString","join","formatters","xml","source","sourceDocument","xsltProcessor","XSLTProcessor","importStylesheet","resultDocument","transformToDocument","serializeToString","monacoOptions","formatOnPaste","useLocalstorageState","getLocalStorageKey","selectedLanguage","setSelectedLanguage","useState","code","setCode","monacoEditorRef","useRef","handleMonacoMount","useCallback","editor","monaco","current","languages","registerDocumentFormattingEditProvider","provideDocumentFormattingEdits","model","options","text","formatCode","getValue","range","getFullModelRange","handleFormatClick","getAction","run","PageContainer","title","className","styles","noContentPadding","MonacoLanguageSelect","value","onChange","type","onClick","CopyButton","AppEditor","onMount"],"sourceRoot":""}