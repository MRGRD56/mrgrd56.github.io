{"version":3,"file":"static/js/1482.c5542648.chunk.js","mappings":"oIAAA","sources":["../node_modules/@types/lodash/common/util.d.ts"],"sourcesContent":["export default \"import _ = require(\\\"../index\\\");\\ndeclare module \\\"../index\\\" {\\n    interface LoDashStatic {\\n        /**\\n         * Attempts to invoke func, returning either the result or the caught error object. Any additional arguments\\n         * are provided to func when itâ€™s invoked.\\n         *\\n         * @param func The function to attempt.\\n         * @return Returns the func result or error object.\\n         */\\n        attempt<TResult>(func: (...args: any[]) => TResult, ...args: any[]): TResult | Error;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.attempt\\n         */\\n        attempt<TResult>(...args: any[]): TResult | Error;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.attempt\\n         */\\n        attempt<TResult>(...args: any[]): ExpChain<TResult | Error>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Binds methods of an object to the object itself, overwriting the existing method. Method names may be\\n         * specified as individual arguments or as arrays of method names. If no method names are provided all\\n         * enumerable function properties, own and inherited, of object are bound.\\n         *\\n         * Note: This method does not set the \\\"length\\\" property of bound functions.\\n         *\\n         * @param object The object to bind and assign the bound methods to.\\n         * @param methodNames The object method names to bind, specified as individual method names or arrays of\\n         * method names.\\n         * @return Returns object.\\n         */\\n        bindAll<T>(object: T, ...methodNames: Array<Many<string>>): T;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.bindAll\\n         */\\n        bindAll(...methodNames: Array<Many<string>>): this;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.bindAll\\n         */\\n        bindAll(...methodNames: Array<Many<string>>): this;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Creates a function that iterates over `pairs` and invokes the corresponding\\n         * function of the first predicate to return truthy. The predicate-function\\n         * pairs are invoked with the `this` binding and arguments of the created\\n         * function.\\n         *\\n         * @since 4.0.0\\n         * @category Util\\n         * @param pairs The predicate-function pairs.\\n         * @returns Returns the new composite function.\\n         * @example\\n         *\\n         * var func = _.cond([\\n         *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\\n         *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\\n         *   [_.stubTrue,                      _.constant('no match')]\\n         * ]);\\n         *\\n         * func({ 'a': 1, 'b': 2 });\\n         * // => 'matches A'\\n         *\\n         * func({ 'a': 0, 'b': 1 });\\n         * // => 'matches B'\\n         *\\n         * func({ 'a': '1', 'b': '2' });\\n         * // => 'no match'\\n         */\\n        cond<R>(pairs: Array<CondPairNullary<R>>): () => R;\\n        cond<T, R>(pairs: Array<CondPairUnary<T, R>>): (Target: T) => R;\\n    }\\n\\n    type ConformsPredicateObject<T> = {\\n        [P in keyof T]: T[P] extends (arg: infer A) => any ? A : any\\n    };\\n    interface LoDashStatic {\\n        /**\\n         * Creates a function that invokes the predicate properties of `source` with the corresponding\\n         * property values of a given object, returning true if all predicates return truthy, else false.\\n         */\\n        conforms<T>(source: ConformsPredicateObject<T>): (value: T) => boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.conforms\\n         */\\n        conforms(): Function<(value: ConformsPredicateObject<TValue>) => boolean>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.conforms\\n         */\\n        conforms(): FunctionChain<(value: ConformsPredicateObject<TValue>) => boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Creates a function that returns value.\\n         *\\n         * @param value The value to return from the new function.\\n         * @return Returns the new function.\\n         */\\n        constant<T>(value: T): () => T;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.constant\\n         */\\n        constant(): Function<() => TValue>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.constant\\n         */\\n        constant(): FunctionChain<() => TValue>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks `value` to determine whether a default value should be returned in\\n         * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\\n         * or `undefined`.\\n         *\\n         * @param value The value to check.\\n         * @param defaultValue The default value.\\n         * @returns Returns the resolved value.\\n         */\\n        defaultTo<T>(value: T | null | undefined, defaultValue: T): T;\\n        /**\\n         * @see _.defaultTo\\n         */\\n        defaultTo<T, TDefault>(value: T | null | undefined, defaultValue: TDefault): T | TDefault;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.defaultTo\\n         */\\n        defaultTo(defaultValue: TValue): TValue;\\n        /**\\n         * @see _.defaultTo\\n         */\\n        defaultTo<TDefault>(defaultValue: TDefault): TValue extends null | undefined ? TDefault : TValue | TDefault;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.defaultTo\\n         */\\n        defaultTo(defaultValue: TValue): ExpChain<TValue>;\\n        /**\\n         * @see _.defaultTo\\n         */\\n        defaultTo<TDefault>(defaultValue: TDefault): ExpChain<TValue extends null | undefined ? TDefault : TValue | TDefault>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Creates a function that returns the result of invoking the provided functions with the this binding of the\\n         * created function, where each successive invocation is supplied the return value of the previous.\\n         *\\n         * @param funcs Functions to invoke.\\n         * @return Returns the new function.\\n         */\\n        flow<A extends any[], R1, R2, R3, R4, R5, R6, R7>(f1: (...args: A) => R1, f2: (a: R1) => R2, f3: (a: R2) => R3, f4: (a: R3) => R4, f5: (a: R4) => R5, f6: (a: R5) => R6, f7: (a: R6) => R7): (...args: A) => R7;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<A extends any[], R1, R2, R3, R4, R5, R6, R7>(f1: (...args: A) => R1, f2: (a: R1) => R2, f3: (a: R2) => R3, f4: (a: R3) => R4, f5: (a: R4) => R5, f6: (a: R5) => R6, f7: (a: R6) => R7, ...func: Array<Many<(a: any) => any>>): (...args: A) => any;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<A extends any[], R1, R2, R3, R4, R5, R6>(f1: (...args: A) => R1, f2: (a: R1) => R2, f3: (a: R2) => R3, f4: (a: R3) => R4, f5: (a: R4) => R5, f6: (a: R5) => R6): (...args: A) => R6;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<A extends any[], R1, R2, R3, R4, R5>(f1: (...args: A) => R1, f2: (a: R1) => R2, f3: (a: R2) => R3, f4: (a: R3) => R4, f5: (a: R4) => R5): (...args: A) => R5;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<A extends any[], R1, R2, R3, R4>(f1: (...args: A) => R1, f2: (a: R1) => R2, f3: (a: R2) => R3, f4: (a: R3) => R4): (...args: A) => R4;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<A extends any[], R1, R2, R3>(f1: (...args: A) => R1, f2: (a: R1) => R2, f3: (a: R2) => R3): (...args: A) => R3;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<A extends any[], R1, R2>(f1: (...args: A) => R1, f2: (a: R1) => R2): (...args: A) => R2;\\n        /**\\n         * @see _.flow\\n         */\\n        flow(...func: Array<Many<(...args: any[]) => any>>): (...args: any[]) => any;\\n    }\\n    interface Function<T extends (...arg: any) => any> {\\n        /**\\n         * @see _.flow\\n         */\\n        flow<R2, R3, R4, R5, R6, R7>(f2: (a: ReturnType<T>) => R2, f3: (a: R2) => R3, f4: (a: R3) => R4, f5: (a: R4) => R5, f6: (a: R5) => R6, f7: (a: R6) => R7): Function<(...args: Parameters<T>) => R7>;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<R2, R3, R4, R5, R6, R7>(f2: (a: ReturnType<T>) => R2, f3: (a: R2) => R3, f4: (a: R3) => R4, f5: (a: R4) => R5, f6: (a: R5) => R6, f7: (a: R6) => R7, ...func: Array<Many<(a: any) => any>>): Function<(...args: Parameters<T>) => any>;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<R2, R3, R4, R5, R6>(f2: (a: ReturnType<T>) => R2, f3: (a: R2) => R3, f4: (a: R3) => R4, f5: (a: R4) => R5, f6: (a: R5) => R6): Function<(...args: Parameters<T>) => R6>;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<R2, R3, R4, R5>(f2: (a: ReturnType<T>) => R2, f3: (a: R2) => R3, f4: (a: R3) => R4, f5: (a: R4) => R5): Function<(...args: Parameters<T>) => R5>;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<R2, R3, R4>(f2: (a: ReturnType<T>) => R2, f3: (a: R2) => R3, f4: (a: R3) => R4): Function<(...args: Parameters<T>) => R4>;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<R2, R3>(f2: (a: ReturnType<T>) => R2, f3: (a: R2) => R3): Function<(...args: Parameters<T>) => R3>;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<R2>(f2: (a: ReturnType<T>) => R2): Function<(...args: Parameters<T>) => R2>;\\n        /**\\n         * @see _.flow\\n         */\\n        flow(...func: Array<Many<(...args: any[]) => any>>): Function<(...args: any[]) => any>;\\n    }\\n    interface FunctionChain<T> {\\n        /**\\n         * @see _.flow\\n         */\\n        flow<R2, R3, R4, R5, R6, R7>(f2: (a: ReturnType<T>) => R2, f3: (a: R2) => R3, f4: (a: R3) => R4, f5: (a: R4) => R5, f6: (a: R5) => R6, f7: (a: R6) => R7): FunctionChain<(...args: Parameters<T>) => R7>;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<R2, R3, R4, R5, R6, R7>(f2: (a: ReturnType<T>) => R2, f3: (a: R2) => R3, f4: (a: R3) => R4, f5: (a: R4) => R5, f6: (a: R5) => R6, f7: (a: R6) => R7, ...func: Array<Many<(a: any) => any>>): FunctionChain<(...args: Parameters<T>) => any>;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<R2, R3, R4, R5, R6>(f2: (a: ReturnType<T>) => R2, f3: (a: R2) => R3, f4: (a: R3) => R4, f5: (a: R4) => R5, f6: (a: R5) => R6): FunctionChain<(...args: Parameters<T>) => R6>;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<R2, R3, R4, R5>(f2: (a: ReturnType<T>) => R2, f3: (a: R2) => R3, f4: (a: R3) => R4, f5: (a: R4) => R5): FunctionChain<(...args: Parameters<T>) => R5>;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<R2, R3, R4>(f2: (a: ReturnType<T>) => R2, f3: (a: R2) => R3, f4: (a: R3) => R4): FunctionChain<(...args: Parameters<T>) => R4>;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<R2, R3>(f2: (a: ReturnType<T>) => R2, f3: (a: R2) => R3): FunctionChain<(...args: Parameters<T>) => R3>;\\n        /**\\n         * @see _.flow\\n         */\\n        flow<R2>(f2: (a: ReturnType<T>) => R2): FunctionChain<(...args: Parameters<T>) => R2>;\\n        /**\\n         * @see _.flow\\n         */\\n        flow(...func: Array<Many<(...args: any[]) => any>>): FunctionChain<(...args: any[]) => any>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * This method is like _.flow except that it creates a function that invokes the provided functions from right\\n         * to left.\\n         *\\n         * @param funcs Functions to invoke.\\n         * @return Returns the new function.\\n         */\\n        flowRight<A extends any[], R1, R2, R3, R4, R5, R6, R7>(f7: (a: R6) => R7, f6: (a: R5) => R6, f5: (a: R4) => R5, f4: (a: R3) => R4, f3: (a: R2) => R3, f2: (a: R1) => R2, f1: (...args: A) => R1): (...args: A) => R7;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[], R1, R2, R3, R4, R5, R6>(f6: (a: R5) => R6, f5: (a: R4) => R5, f4: (a: R3) => R4, f3: (a: R2) => R3, f2: (a: R1) => R2, f1: (...args: A) => R1): (...args: A) => R6;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[], R1, R2, R3, R4, R5>(f5: (a: R4) => R5, f4: (a: R3) => R4, f3: (a: R2) => R3, f2: (a: R1) => R2, f1: (...args: A) => R1): (...args: A) => R5;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[], R1, R2, R3, R4>(f4: (a: R3) => R4, f3: (a: R2) => R3, f2: (a: R1) => R2, f1: (...args: A) => R1): (...args: A) => R4;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[], R1, R2, R3>(f3: (a: R2) => R3, f2: (a: R1) => R2, f1: (...args: A) => R1): (...args: A) => R3;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[], R1, R2>(f2: (a: R1) => R2, f1: (...args: A) => R1): (...args: A) => R2;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight(...func: Array<Many<(...args: any[]) => any>>): (...args: any[]) => any;\\n    }\\n    interface Function<T> {\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[], R1, R2, R3, R4, R5>(f6: (a: R5) => Parameters<T>[\\\"0\\\"], f5: (a: R4) => R5, f4: (a: R3) => R4, f3: (a: R2) => R3, f2: (a: R1) => R2, f1: (...args: A) => R1): Function<(...args: A) => ReturnType<T>>;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[], R1, R2, R3, R4>(f5: (a: R4) => Parameters<T>[\\\"0\\\"], f4: (a: R3) => R4, f3: (a: R2) => R3, f2: (a: R1) => R2, f1: (...args: A) => R1): Function<(...args: A) => ReturnType<T>>;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[], R1, R2, R3>(f4: (a: R3) => Parameters<T>[\\\"0\\\"], f3: (a: R2) => R3, f2: (a: R1) => R2, f1: (...args: A) => R1): Function<(...args: A) => ReturnType<T>>;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[], R1, R2>(f3: (a: R2) => Parameters<T>[\\\"0\\\"], f2: (a: R1) => R2, f1: (...args: A) => R1): Function<(...args: A) => ReturnType<T>>;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[], R1>(f2: (a: R1) => Parameters<T>[\\\"0\\\"], f1: (...args: A) => R1): Function<(...args: A) => ReturnType<T>>;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[]>(f1: (...args: A) => Parameters<T>[\\\"0\\\"]): Function<(...args: A) => ReturnType<T>>;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight(...func: Array<Many<(...args: any[]) => any>>): Function<(...args: any[]) => any>;\\n    }\\n    interface FunctionChain<T> {\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[], R1, R2, R3, R4, R5>(f6: (a: R5) => Parameters<T>[\\\"0\\\"], f5: (a: R4) => R5, f4: (a: R3) => R4, f3: (a: R2) => R3, f2: (a: R1) => R2, f1: (...args: A) => R1): FunctionChain<(...args: A) => ReturnType<T>>;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[], R1, R2, R3, R4>(f5: (a: R4) => Parameters<T>[\\\"0\\\"], f4: (a: R3) => R4, f3: (a: R2) => R3, f2: (a: R1) => R2, f1: (...args: A) => R1): FunctionChain<(...args: A) => ReturnType<T>>;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[], R1, R2, R3>(f4: (a: R3) => Parameters<T>[\\\"0\\\"], f3: (a: R2) => R3, f2: (a: R1) => R2, f1: (...args: A) => R1): FunctionChain<(...args: A) => ReturnType<T>>;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[], R1, R2>(f3: (a: R2) => Parameters<T>[\\\"0\\\"], f2: (a: R1) => R2, f1: (...args: A) => R1): FunctionChain<(...args: A) => ReturnType<T>>;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[], R1>(f2: (a: R1) => Parameters<T>[\\\"0\\\"], f1: (...args: A) => R1): FunctionChain<(...args: A) => ReturnType<T>>;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight<A extends any[]>(f1: (...args: A) => Parameters<T>[\\\"0\\\"]): FunctionChain<(...args: A) => ReturnType<T>>;\\n        /**\\n         * @see _.flowRight\\n         */\\n        flowRight(...func: Array<Many<(...args: any[]) => any>>): FunctionChain<(...args: any[]) => any>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * This method returns the first argument provided to it.\\n         *\\n         * @param value Any value.\\n         * @return Returns value.\\n         */\\n        identity<T>(value: T): T;\\n        /**\\n         * @see _.identity\\n         */\\n        identity(): undefined;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.identity\\n         */\\n        identity(): TValue;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.identity\\n         */\\n        identity(): this;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Creates a function that invokes `func` with the arguments of the created\\n         * function. If `func` is a property name the created callback returns the\\n         * property value for a given element. If `func` is an object the created\\n         * callback returns `true` for elements that contain the equivalent object properties, otherwise it returns `false`.\\n         *\\n         * @category Util\\n         * @param [func=_.identity] The value to convert to a callback.\\n         * @returns Returns the callback.\\n         * @example\\n         *\\n         * var users = [\\n         *   { 'user': 'barney', 'age': 36 },\\n         *   { 'user': 'fred',   'age': 40 }\\n         * ];\\n         *\\n         * // create custom iteratee shorthands\\n         * _.iteratee = _.wrap(_.iteratee, function(callback, func) {\\n         *   var p = /^(\\\\S+)\\\\s*([<>])\\\\s*(\\\\S+)$/.exec(func);\\n         *   return !p ? callback(func) : function(object) {\\n         *     return (p[2] == '>' ? object[p[1]] > p[3] : object[p[1]] < p[3]);\\n         *   };\\n         * });\\n         *\\n         * _.filter(users, 'age > 36');\\n         * // => [{ 'user': 'fred', 'age': 40 }]\\n         */\\n        iteratee<TFunction extends (...args: any[]) => any>(func: TFunction): TFunction;\\n        /**\\n         * @see _.iteratee\\n         */\\n        iteratee(func: symbol | number | string | object): (...args: any[]) => any;\\n    }\\n    interface Function<T extends (...args: any) => any> {\\n        /**\\n         * @see _.iteratee\\n         */\\n        iteratee(): Function<T>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.iteratee\\n         */\\n        iteratee(): Function<(o: object) => boolean>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.iteratee\\n         */\\n        iteratee(): Function<(o: T) => boolean>;\\n    }\\n    interface String {\\n        /**\\n         * @see _.iteratee\\n         */\\n        iteratee(): Function<(o: object) => any>;\\n    }\\n    interface FunctionChain<T extends (...args: any) => any> {\\n        /**\\n         * @see _.iteratee\\n         */\\n        iteratee(): FunctionChain<T>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.iteratee\\n         */\\n        iteratee(): FunctionChain<(o: object) => boolean>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.iteratee\\n         */\\n        iteratee(): FunctionChain<(o: T) => boolean>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.iteratee\\n         */\\n        iteratee(): FunctionChain<(o: object) => any>;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.iteratee\\n         */\\n        iteratee(): FunctionChain<(o: object) => any>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Creates a function that performs a deep comparison between a given object and source, returning true if the\\n         * given object has equivalent property values, else false.\\n         *\\n         * Note: This method supports comparing arrays, booleans, Date objects, numbers, Object objects, regexes, and\\n         * strings. Objects are compared by their own, not inherited, enumerable properties. For comparing a single own\\n         * or inherited property value see _.matchesProperty.\\n         *\\n         * @param source The object of property values to match.\\n         * @return Returns the new function.\\n         */\\n        matches<T>(source: T): (value: any) => boolean;\\n        /**\\n         * @see _.matches\\n         */\\n        matches<T, V>(source: T): (value: V) => boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.matches\\n         */\\n        matches<V>(): Function<(value: V) => boolean>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.matches\\n         */\\n        matches<V>(): FunctionChain<(value: V) => boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Creates a function that compares the property value of path on a given object to value.\\n         *\\n         * Note: This method supports comparing arrays, booleans, Date objects, numbers, Object objects, regexes, and\\n         * strings. Objects are compared by their own, not inherited, enumerable properties.\\n         *\\n         * @param path The path of the property to get.\\n         * @param srcValue The value to match.\\n         * @return Returns the new function.\\n         */\\n        matchesProperty<T>(path: PropertyPath, srcValue: T): (value: any) => boolean;\\n        /**\\n         * @see _.matchesProperty\\n         */\\n        matchesProperty<T, V>(path: PropertyPath, srcValue: T): (value: V) => boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.matchesProperty\\n         */\\n        matchesProperty<SrcValue>(srcValue: SrcValue): Function<(value: any) => boolean>;\\n        /**\\n         * @see _.matchesProperty\\n         */\\n        matchesProperty<SrcValue, Value>(srcValue: SrcValue): Function<(value: Value) => boolean>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.matchesProperty\\n         */\\n        matchesProperty<SrcValue>(srcValue: SrcValue): FunctionChain<(value: any) => boolean>;\\n        /**\\n         * @see _.matchesProperty\\n         */\\n        matchesProperty<SrcValue, Value>(srcValue: SrcValue): FunctionChain<(value: Value) => boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Creates a function that invokes the method at path on a given object. Any additional arguments are provided\\n         * to the invoked method.\\n         *\\n         * @param path The path of the method to invoke.\\n         * @param args The arguments to invoke the method with.\\n         * @return Returns the new function.\\n         */\\n        method(path: PropertyPath, ...args: any[]): (object: any) => any;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.method\\n         */\\n        method(...args: any[]): Function<(object: any) => any>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.method\\n         */\\n        method(...args: any[]): FunctionChain<(object: any) => any>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * The opposite of _.method; this method creates a function that invokes the method at a given path on object.\\n         * Any additional arguments are provided to the invoked method.\\n         *\\n         * @param object The object to query.\\n         * @param args The arguments to invoke the method with.\\n         * @return Returns the new function.\\n         */\\n        methodOf(object: object, ...args: any[]): (path: PropertyPath) => any;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.methodOf\\n         */\\n        methodOf(...args: any[]): LoDashImplicitWrapper<(path: PropertyPath) => any>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.methodOf\\n         */\\n        methodOf(...args: any[]): LoDashExplicitWrapper<(path: PropertyPath) => any>;\\n    }\\n\\n    interface MixinOptions {\\n        /**\\n         * @see _.chain\\n         */\\n        chain?: boolean | undefined;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Adds all own enumerable function properties of a source object to the destination object. If object is a\\n         * function then methods are added to its prototype as well.\\n         *\\n         * Note: Use _.runInContext to create a pristine lodash function to avoid conflicts caused by modifying\\n         * the original.\\n         *\\n         * @param object The destination object.\\n         * @param source The object of functions to add.\\n         * @param options The options object.\\n         * @param options.chain Specify whether the functions added are chainable.\\n         * @return Returns object.\\n         */\\n        mixin<TObject>(object: TObject, source: Dictionary<(...args: any[]) => any>, options?: MixinOptions): TObject;\\n        /**\\n         * @see _.mixin\\n         */\\n        mixin<TResult>(source: Dictionary<(...args: any[]) => any>, options?: MixinOptions): LoDashStatic;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.mixin\\n         */\\n        mixin(source: Dictionary<(...args: any[]) => any>, options?: MixinOptions): this;\\n        /**\\n         * @see _.mixin\\n         */\\n        mixin(options?: MixinOptions): LoDashImplicitWrapper<LoDashStatic>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.mixin\\n         */\\n        mixin(source: Dictionary<(...args: any[]) => any>, options?: MixinOptions): this;\\n        /**\\n         * @see _.mixin\\n         */\\n        mixin(options?: MixinOptions): LoDashExplicitWrapper<LoDashStatic>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Reverts the _ variable to its previous value and returns a reference to the lodash function.\\n         *\\n         * @return Returns the lodash function.\\n         */\\n        noConflict(): typeof _;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.noConflict\\n         */\\n        noConflict(): typeof _;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.noConflict\\n         */\\n        noConflict(): LoDashExplicitWrapper<typeof _>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * A no-operation function that returns undefined regardless of the arguments it receives.\\n         *\\n         * @return undefined\\n         */\\n        noop(...args: any[]): void;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.noop\\n         */\\n        noop(...args: any[]): void;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.noop\\n         */\\n        noop(...args: any[]): PrimitiveChain<undefined>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Creates a function that returns its nth argument.\\n         *\\n         * @param n The index of the argument to return.\\n         * @return Returns the new function.\\n         */\\n        nthArg(n?: number): (...args: any[]) => any;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.nthArg\\n         */\\n        nthArg(): Function<(...args: any[]) => any>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.nthArg\\n         */\\n        nthArg(): FunctionChain<(...args: any[]) => any>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Creates a function that invokes iteratees with the arguments provided to the created function and returns\\n         * their results.\\n         *\\n         * @param iteratees The iteratees to invoke.\\n         * @return Returns the new function.\\n         */\\n        over<TResult>(...iteratees: Array<Many<(...args: any[]) => TResult>>): (...args: any[]) => TResult[];\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.over\\n         */\\n        over<TResult>(...iteratees: Array<Many<(...args: any[]) => TResult>>): Function<(...args: any[]) => TResult[]>;\\n    }\\n    interface Function<T> {\\n        /**\\n         * @see _.over\\n         */\\n        over<TResult>(...iteratees: Array<Many<(...args: any[]) => TResult>>): Function<(...args: any[]) => Array<ReturnType<T> | TResult>>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.over\\n         */\\n        over<TResult>(...iteratees: Array<Many<(...args: any[]) => TResult>>): FunctionChain<(...args: any[]) => TResult[]>;\\n    }\\n    interface FunctionChain<T> {\\n        /**\\n         * @see _.over\\n         */\\n        over<TResult>(...iteratees: Array<Many<(...args: any[]) => TResult>>): FunctionChain<(...args: any[]) => Array<ReturnType<T> | TResult>>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Creates a function that checks if all of the predicates return truthy when invoked with the arguments\\n         * provided to the created function.\\n         *\\n         * @param predicates The predicates to check.\\n         * @return Returns the new function.\\n         */\\n        overEvery<T, Result1 extends T, Result2 extends T>(...predicates: [\\n            (arg: T) => arg is Result1,\\n            (arg: T) => arg is Result2\\n        ]): (arg: T) => arg is Result1 & Result2;\\n        overEvery<T>(...predicates: Array<Many<(...args: T[]) => boolean>>): (...args: T[]) => boolean;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.overEvery\\n         */\\n        overEvery<TArgs>(...iteratees: Array<Many<(...args: TArgs[]) => boolean>>): Function<(...args: TArgs[]) => boolean>;\\n    }\\n    interface Function<T> {\\n        /**\\n         * @see _.overEvery\\n         */\\n        overEvery<TArgs>(...iteratees: Array<Many<(...args: TArgs[]) => boolean>>): Function<(...args: Parameters<T> | TArgs[]) => boolean>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.overEvery\\n         */\\n        overEvery<TArgs>(...iteratees: Array<Many<(...args: TArgs[]) => boolean>>): FunctionChain<(...args:  TArgs[]) => boolean>;\\n    }\\n    interface FunctionChain<T> {\\n        /**\\n         * @see _.overEvery\\n         */\\n        overEvery<TArgs>(...iteratees: Array<Many<(...args: TArgs[]) => boolean>>): FunctionChain<(...args: Parameters<T> | TArgs[]) => boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Creates a function that checks if any of the predicates return truthy when invoked with the arguments\\n         * provided to the created function.\\n         *\\n         * @param predicates The predicates to check.\\n         * @return Returns the new function.\\n         */\\n        overSome<T, Result1 extends T, Result2 extends T>(...predicates: [\\n            (arg: T) => arg is Result1,\\n            (arg: T) => arg is Result2\\n        ]): (arg: T) => arg is Result1 | Result2;\\n        overSome<T>(...predicates: Array<Many<(...args: T[]) => boolean>>): (...args: T[]) => boolean;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.overSome\\n         */\\n        overSome<TArgs>(...iteratees: Array<Many<(...args: TArgs[]) => boolean>>): Function<(...args: TArgs[]) => boolean>;\\n    }\\n    interface Function<T> {\\n        /**\\n         * @see _.overSome\\n         */\\n        overSome<TArgs>(...iteratees: Array<Many<(...args: TArgs[]) => boolean>>): Function<(...args: Parameters<T> | TArgs[]) => boolean>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.overSome\\n         */\\n        overSome<TArgs>(...iteratees: Array<Many<(...args: TArgs[]) => boolean>>): FunctionChain<(...args: TArgs[]) => boolean>;\\n    }\\n    interface FunctionChain<T> {\\n        /**\\n         * @see _.overSome\\n         */\\n        overSome<TArgs>(...iteratees: Array<Many<(...args: TArgs[]) => boolean>>): FunctionChain<(...args: Parameters<T> | TArgs[]) => boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Creates a function that returns the property value at path on a given object.\\n         *\\n         * @param path The path of the property to get.\\n         * @return Returns the new function.\\n         */\\n        property<TObj, TResult>(path: PropertyPath): (obj: TObj) => TResult;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.property\\n         */\\n        property<TObj, TResult>(): Function<(obj: TObj) => TResult>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.property\\n         */\\n        property<TObj, TResult>(): FunctionChain<(obj: TObj) => TResult>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * The opposite of _.property; this method creates a function that returns the property value at a given path\\n         * on object.\\n         *\\n         * @param object The object to query.\\n         * @return Returns the new function.\\n         */\\n        propertyOf<T extends {}>(object: T): (path: PropertyPath) => any;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.propertyOf\\n         */\\n        propertyOf(): LoDashImplicitWrapper<(path: PropertyPath) => any>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.propertyOf\\n         */\\n        propertyOf(): LoDashExplicitWrapper<(path: PropertyPath) => any>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Creates an array of numbers (positive and/or negative) progressing from start up to, but not including, end.\\n         * If end is not specified itâ€™s set to start with start then set to 0. If end is less than start a zero-length\\n         * range is created unless a negative step is specified.\\n         *\\n         * @param start The start of the range.\\n         * @param end The end of the range.\\n         * @param step The value to increment or decrement by.\\n         * @return Returns a new range array.\\n         */\\n        range(start: number, end?: number, step?: number): number[];\\n        /**\\n         * @see _.range\\n         */\\n        range(end: number, index: string | number, guard: object): number[];\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.range\\n         */\\n        range(end?: number, step?: number): Collection<number>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.range\\n         */\\n        range(end?: number, step?: number): CollectionChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * This method is like `_.range` except that it populates values in\\n         * descending order.\\n         *\\n         * @category Util\\n         * @param start The start of the range.\\n         * @param end The end of the range.\\n         * @param step The value to increment or decrement by.\\n         * @returns Returns the new array of numbers.\\n         * @example\\n         *\\n         * _.rangeRight(4);\\n         * // => [3, 2, 1, 0]\\n         *\\n         * _.rangeRight(-4);\\n         * // => [-3, -2, -1, 0]\\n         *\\n         * _.rangeRight(1, 5);\\n         * // => [4, 3, 2, 1]\\n         *\\n         * _.rangeRight(0, 20, 5);\\n         * // => [15, 10, 5, 0]\\n         *\\n         * _.rangeRight(0, -4, -1);\\n         * // => [-3, -2, -1, 0]\\n         *\\n         * _.rangeRight(1, 4, 0);\\n         * // => [1, 1, 1]\\n         *\\n         * _.rangeRight(0);\\n         * // => []\\n         */\\n        rangeRight(start: number, end?: number, step?: number): number[];\\n        /**\\n         * @see _.rangeRight\\n         */\\n        rangeRight(end: number, index: string | number, guard: object): number[];\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.rangeRight\\n         */\\n        rangeRight(end?: number, step?: number): Collection<number>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.rangeRight\\n         */\\n        rangeRight(end?: number, step?: number): CollectionChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Create a new pristine lodash function using the given context object.\\n         *\\n         * @param context The context object.\\n         * @return Returns a new lodash function.\\n         */\\n        runInContext(context?: object): LoDashStatic;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.runInContext\\n         */\\n        runInContext(): LoDashStatic;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * This method returns a new empty array.\\n         *\\n         * @returns Returns the new empty array.\\n         */\\n        stubArray(): any[];\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.stubArray\\n         */\\n        stubArray(): any[];\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.stubArray\\n         */\\n        stubArray(): CollectionChain<any>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * This method returns `false`.\\n         *\\n         * @returns Returns `false`.\\n         */\\n        stubFalse(): false;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.stubFalse\\n         */\\n        stubFalse(): false;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.stubFalse\\n         */\\n        stubFalse(): PrimitiveChain<false>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * This method returns a new empty object.\\n         *\\n         * @returns Returns the new empty object.\\n         */\\n        stubObject(): any;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.stubObject\\n         */\\n        stubObject(): any;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.stubObject\\n         */\\n        stubObject(): LoDashExplicitWrapper<any>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * This method returns an empty string.\\n         *\\n         * @returns Returns the empty string.\\n         */\\n        stubString(): string;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.stubString\\n         */\\n        stubString(): string;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.stubString\\n         */\\n        stubString(): StringChain;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * This method returns `true`.\\n         *\\n         * @returns Returns `true`.\\n         */\\n        stubTrue(): true;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.stubTrue\\n         */\\n        stubTrue(): true;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.stubTrue\\n         */\\n        stubTrue(): PrimitiveChain<true>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Invokes the iteratee function n times, returning an array of the results of each invocation. The iteratee\\n         * is invoked with one argument; (index).\\n         *\\n         * @param n The number of times to invoke iteratee.\\n         * @param iteratee The function invoked per iteration.\\n         * @return Returns the array of results.\\n         */\\n        times<TResult>(n: number, iteratee: (num: number) => TResult): TResult[];\\n        /**\\n         * @see _.times\\n         */\\n        times(n: number): number[];\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.times\\n         */\\n        times<TResult>(iteratee: (num: number) => TResult): TResult[];\\n        /**\\n         * @see _.times\\n         */\\n        times(): number[];\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.times\\n         */\\n        times<TResult>(iteratee: (num: number) => TResult): CollectionChain<TResult>;\\n        /**\\n         * @see _.times\\n         */\\n        times(): CollectionChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Converts `value` to a property path array.\\n         *\\n         * @category Util\\n         * @param value The value to convert.\\n         * @returns Returns the new property path array.\\n         * @example\\n         *\\n         * _.toPath('a.b.c');\\n         * // => ['a', 'b', 'c']\\n         *\\n         * _.toPath('a[0].b.c');\\n         * // => ['a', '0', 'b', 'c']\\n         *\\n         * var path = ['a', 'b', 'c'],\\n         *     newPath = _.toPath(path);\\n         *\\n         * console.log(newPath);\\n         * // => ['a', 'b', 'c']\\n         *\\n         * console.log(path === newPath);\\n         * // => false\\n         */\\n        toPath(value: any): string[];\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.toPath\\n         */\\n        toPath(): Collection<string>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.toPath\\n         */\\n        toPath(): CollectionChain<string>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Generates a unique ID. If prefix is provided the ID is appended to it.\\n         *\\n         * @param prefix The value to prefix the ID with.\\n         * @return Returns the unique ID.\\n         */\\n        uniqueId(prefix?: string): string;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.uniqueId\\n         */\\n        uniqueId(): string;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.uniqueId\\n         */\\n        uniqueId(): StringChain;\\n    }\\n\\n    // stubTrue\\n\\n    interface LoDashStatic {\\n        /**\\n         * This method returns true.\\n         *\\n         * @return Returns true.\\n         */\\n        stubTrue(): true;\\n    }\\n\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.stubTrue\\n         */\\n        stubTrue(): true;\\n    }\\n\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.stubTrue\\n         */\\n        stubTrue(): LoDashExplicitWrapper<true>;\\n    }\\n\\n    // stubFalse\\n\\n    interface LoDashStatic {\\n        /**\\n         * This method returns false.\\n         *\\n         * @return Returns false.\\n         */\\n        stubFalse(): false;\\n    }\\n\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.stubFalse\\n         */\\n        stubFalse(): false;\\n    }\\n\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.stubFalse\\n         */\\n        stubFalse(): LoDashExplicitWrapper<false>;\\n    }\\n}\\n\";"],"names":[],"sourceRoot":""}