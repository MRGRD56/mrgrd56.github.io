{"version":3,"file":"static/js/631.b01ec695.chunk.js","mappings":"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","sources":["hooks/useChangeState.ts","hooks/useChangeAnyStateHandler.ts","hooks/useChangeStateHandler.ts","pages/htmlEditorPage/HtmlEditorPage.tsx","webpack://mrgrd56.github.io/./src/pages/htmlEditorPage/HtmlEditorPage.module.scss?0b88","hooks/useChangeValueStateHandler.ts","utils/mergeEnums.ts"],"sourcesContent":["import { Dispatch, SetStateAction, useCallback } from 'react';\n\nconst useChangeState = <S extends object>(setState: Dispatch<SetStateAction<S>>) => {\n    return useCallback(<K extends keyof S>(key: K, value: S[K]) => {\n        setState((state) => ({\n            ...state,\n            [key]: value\n        }));\n    }, []);\n};\n\nexport default useChangeState;\n","import { Dispatch, SetStateAction } from 'react';\nimport { isObject } from 'lodash';\nimport call from '../utils/call';\nimport ObjectKey from '../types/common/ObjectKey';\n\nexport interface TypedChangeEvent<T, P extends ObjectKey> {\n    target: {\n        [key in P]: T;\n    };\n}\n\nexport const isChangeEvent = (value: unknown): value is TypedChangeEvent<unknown, ObjectKey> => {\n    return isObject(value) && 'target' in value;\n};\n\nconst useChangeAnyStateHandler = <S, P extends ObjectKey>(\n    setState: Dispatch<SetStateAction<S>>,\n    property: P = 'value' as P\n) => {\n    return (value: TypedChangeEvent<S, P> | S) => {\n        const actualValue = call(() => {\n            if (isChangeEvent(value)) {\n                const event = value as TypedChangeEvent<S, P>;\n                return event.target[property];\n            }\n\n            return value;\n        });\n\n        setState(actualValue);\n    };\n};\n\nexport default useChangeAnyStateHandler;\n","import { Dispatch, SetStateAction, useCallback } from 'react';\nimport call from '../utils/call';\nimport useChangeState from './useChangeState';\nimport { isChangeEvent, TypedChangeEvent } from './useChangeAnyStateHandler';\nimport ObjectKey from '../types/common/ObjectKey';\n\nconst useChangeStateHandler = <S extends object, P extends ObjectKey = 'value'>(\n    setState: Dispatch<SetStateAction<S>>,\n    property: P = 'value' as P\n) => {\n    const changeState = useChangeState(setState);\n\n    return useCallback(\n        <K extends keyof S, T extends S[K]>(key: K) => {\n            return (value: TypedChangeEvent<T, P> | T) => {\n                const actualValue = call(() => {\n                    if (isChangeEvent(value)) {\n                        const event = value as TypedChangeEvent<T, P>;\n                        return event.target[property];\n                    }\n\n                    return value;\n                });\n\n                changeState(key, actualValue);\n            };\n        },\n        [changeState]\n    );\n};\n\nexport default useChangeStateHandler;\n","import React, { CSSProperties, FunctionComponent, useCallback } from 'react';\nimport PageContainer from '../../layouts/pages/pageContainer/PageContainer';\nimport styles from './HtmlEditorPage.module.scss';\nimport { Button, Col, Row, Tabs } from 'antd';\nimport { useLocalstorageState } from 'rooks';\nimport getLocalStorageKey from '../../utils/getLocalStorageKey';\nimport useChangeStateHandler from '../../hooks/useChangeStateHandler';\nimport AppEditor from '../../components/appEditor/AppEditor';\nimport classNames from 'classnames';\nimport { useDebouncedMemo } from '../../hooks/debouncedMemo';\nimport Html from '@mui/icons-material/Html';\nimport Css from '@mui/icons-material/Css';\nimport Javascript from '@mui/icons-material/Javascript';\nimport { OnMount } from '@monaco-editor/react';\nimport { emmetCSS, emmetHTML, emmetJSX } from 'emmet-monaco-es';\nimport { editor } from 'monaco-editor';\nimport ButtonGroup from 'antd/lib/button/button-group';\nimport { Code, VerticalSplit, ViewHeadline } from '@mui/icons-material';\nimport useChangeValueStateHandler from '../../hooks/useChangeValueStateHandler';\nimport Split from 'react-split';\nimport './HtmlEditorPage.scss';\nimport mergeEnums, { MergeEnums } from '../../utils/mergeEnums';\n\nenum EditorInTab {\n    HTML = 'html',\n    CSS = 'css',\n    JS = 'js'\n}\n\nenum EditorOutTab {\n    VIEW = 'VIEW'\n}\n\nconst EditorTab = mergeEnums(EditorInTab, EditorOutTab);\ntype EditorTab = MergeEnums<EditorInTab, EditorOutTab>;\n\ntype EditorSources = Record<EditorInTab, string>;\n\nconst sourcesInitial: EditorSources = {\n    html: `\n<div class=\"example\">\n    <p>\n        Follow me on GitHub\n        <a href=\"https://github.com/MRGRD56\" target=\"_blank\" rel=\"noopener noreferrer\">\n            https://github.com/MRGRD56</a> ;)\n    </p>\n    <button class=\"button1\">Click me</button>\n</div>`.trimStart(),\n    css: `\nhtml {\n    font-family: Arial, sans-serif;\n}\n\n.example, .example a {\n    color: #039be5;\n}`.trimStart(),\n    js: `\ndocument.querySelector('button.button1')\n    .addEventListener('click', () => {\n        alert('Hello world!')\n    });`.trimStart()\n};\n\nconst tabBarStyle: CSSProperties = {\n    margin: 0,\n    paddingLeft: 15,\n    paddingRight: 15\n};\n\nconst editorOptions: editor.IStandaloneEditorConstructionOptions = {\n    minimap: { enabled: false }\n};\n\nconst resultEditorOptions: editor.IStandaloneEditorConstructionOptions = {\n    ...editorOptions,\n    readOnly: true\n};\n\nenum ViewMode {\n    EDITOR = 'EDITOR',\n    SPLIT = 'SPLIT',\n    VIEW = 'VIEW'\n}\n\n// const viewModes: CheckboxOptionType[] = [\n//     {\n//         value: ViewMode.EDITOR,\n//         label: <ViewHeadline/>\n//     },\n//     {\n//         value: ViewMode.SPLIT,\n//         label: <VerticalSplit/>\n//     }\n// ];\n\nconst HtmlEditorPage: FunctionComponent = () => {\n    const [sources, setSources] = useLocalstorageState<EditorSources>(\n        getLocalStorageKey('html-editor', 'sources'),\n        sourcesInitial\n    );\n\n    const [editorTab, setEditorTab] = useLocalstorageState<EditorTab>(\n        getLocalStorageKey('html-editor', 'editorTab'),\n        EditorTab.HTML\n    );\n\n    const [viewMode, setViewMode] = useLocalstorageState<ViewMode>(\n        getLocalStorageKey('html-editor', 'viewMode'),\n        ViewMode.SPLIT\n    );\n\n    const handleSourceChange = useChangeStateHandler(setSources);\n\n    const handleEditorTabChange = useCallback((tab: string) => {\n        setEditorTab(tab as EditorTab);\n    }, []);\n\n    const handleViewModeChange = useChangeValueStateHandler(setViewMode);\n\n    const resultSource = useDebouncedMemo(\n        () => {\n            return `\n<style>\n${sources.css}\n</style>\n\n${sources.html}\n\n<script>\n${sources.js}\n</script>`.trim();\n        },\n        [sources],\n        50\n    ) as string;\n\n    const handleEditorMount = useCallback<OnMount>((editor, monaco) => {\n        emmetHTML(monaco);\n        emmetCSS(monaco);\n        emmetJSX(monaco);\n    }, []);\n\n    // const leftColSpan = {\n    //     [ViewMode.EDITOR]: 24,\n    //     [ViewMode.SPLIT]: 12,\n    //     [ViewMode.VIEW]: 0\n    // }[viewMode];\n    //\n    // const rightColSpan = {\n    //     [ViewMode.EDITOR]: 0,\n    //     [ViewMode.SPLIT]: 12,\n    //     [ViewMode.VIEW]: 24\n    // }[viewMode];\n\n    const leftCol = (\n        <Col className={classNames(styles.col, styles.leftCol, { 'd-none': viewMode === ViewMode.VIEW })}>\n            <Tabs\n                activeKey={editorTab}\n                onChange={handleEditorTabChange}\n                tabBarStyle={tabBarStyle}\n                className={styles.editorTabs}\n                tabBarGutter={10}\n                tabBarExtraContent={\n                    <ButtonGroup>\n                        <Button\n                            type=\"text\"\n                            icon={<ViewHeadline />}\n                            className={classNames({ 'antd-text-primary': viewMode === ViewMode.EDITOR })}\n                            onClick={handleViewModeChange(ViewMode.EDITOR)}\n                        />\n                        <Button\n                            type=\"text\"\n                            icon={<VerticalSplit />}\n                            className={classNames({ 'antd-text-primary': viewMode === ViewMode.SPLIT })}\n                            onClick={handleViewModeChange(ViewMode.SPLIT)}\n                        />\n                    </ButtonGroup>\n                }\n            >\n                <Tabs.TabPane\n                    tab={\n                        <div className={styles.tabTitleWrapper}>\n                            <Html className={styles.tabTitle} />\n                        </div>\n                    }\n                    key={EditorTab.HTML}\n                    className={styles.editorTab}\n                >\n                    <AppEditor\n                        value={sources.html}\n                        onChange={handleSourceChange(EditorTab.HTML)}\n                        className={styles.editor}\n                        language=\"html\"\n                        onMount={handleEditorMount}\n                        options={editorOptions}\n                    />\n                </Tabs.TabPane>\n                <Tabs.TabPane\n                    tab={\n                        <div className={styles.tabTitleWrapper}>\n                            <Css className={styles.tabTitle} />\n                        </div>\n                    }\n                    key={EditorTab.CSS}\n                    className={styles.editorTab}\n                >\n                    <AppEditor\n                        value={sources.css}\n                        onChange={handleSourceChange(EditorTab.CSS)}\n                        className={styles.editor}\n                        language=\"css\"\n                        onMount={handleEditorMount}\n                        options={editorOptions}\n                    />\n                </Tabs.TabPane>\n                <Tabs.TabPane\n                    tab={\n                        <div className={styles.tabTitleWrapper}>\n                            <Javascript className={styles.tabTitle} />\n                        </div>\n                    }\n                    key={EditorTab.JS}\n                    className={styles.editorTab}\n                >\n                    <AppEditor\n                        value={sources.js}\n                        onChange={handleSourceChange(EditorTab.JS)}\n                        className={styles.editor}\n                        language=\"javascript\"\n                        onMount={handleEditorMount}\n                        options={editorOptions}\n                    />\n                </Tabs.TabPane>\n                <Tabs.TabPane\n                    tab={\n                        <div className={styles.tabTitleWrapper}>\n                            <Code className={styles.resultTabTitle} />\n                        </div>\n                    }\n                    key={EditorTab.VIEW}\n                    className={styles.editorTab}\n                >\n                    <AppEditor\n                        value={resultSource}\n                        className={styles.editor}\n                        language=\"html\"\n                        options={resultEditorOptions}\n                    />\n                </Tabs.TabPane>\n            </Tabs>\n        </Col>\n    );\n\n    const rightCol = (\n        <Col\n            className={classNames('yui3-cssreset', styles.col, styles.rightCol, {\n                'd-none': viewMode === ViewMode.EDITOR\n            })}\n        >\n            <iframe srcDoc={resultSource} className={classNames(styles.resultFrame, 'view-iframe')} />\n        </Col>\n    );\n\n    return (\n        <PageContainer noPadding className={styles.container}>\n            {viewMode === ViewMode.SPLIT ? (\n                <Split className={styles.containerRow} direction=\"horizontal\" minSize={0} snapOffset={25}>\n                    {leftCol}\n                    {rightCol}\n                </Split>\n            ) : (\n                <Row className={styles.containerRow}>\n                    {viewMode === ViewMode.EDITOR && leftCol}\n                    {viewMode === ViewMode.VIEW && rightCol}\n                </Row>\n            )}\n        </PageContainer>\n    );\n};\n\nexport default HtmlEditorPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"antd-text-primary\":\"HtmlEditorPage_antd-text-primary__pGYfB\",\"container\":\"HtmlEditorPage_container__CtG1f\",\"containerRow\":\"HtmlEditorPage_containerRow__ld+VV\",\"col\":\"HtmlEditorPage_col__Q9-il\",\"leftCol\":\"HtmlEditorPage_leftCol__DYqVq\",\"editorTabs\":\"HtmlEditorPage_editorTabs__XwzW+\",\"editorTab\":\"HtmlEditorPage_editorTab__ktwZt\",\"editor\":\"HtmlEditorPage_editor__NVelS\",\"tabTitleWrapper\":\"HtmlEditorPage_tabTitleWrapper__Rky1D\",\"tabTitle\":\"HtmlEditorPage_tabTitle__ppoas\",\"resultTabTitle\":\"HtmlEditorPage_resultTabTitle__2Se-j\",\"rightCol\":\"HtmlEditorPage_rightCol__vaQTF\"};","import { Dispatch, SetStateAction, useCallback } from 'react';\n\nconst useChangeValueStateHandler = <S>(setState: Dispatch<SetStateAction<S>>) => {\n    return useCallback(\n        (value: S) => {\n            return () => {\n                setState(value);\n            };\n        },\n        [setState]\n    );\n};\n\nexport default useChangeValueStateHandler;\n","const mergeEnums = <T1, T2>(e1: T1, e2: T2) => {\n    return { ...e1, ...e2 };\n};\n\nexport type MergeEnums<T1, T2> = T1 | T2;\n\nexport default mergeEnums;\n"],"names":["setState","useCallback","key","value","state","isChangeEvent","isObject","property","changeState","useChangeState","actualValue","call","target","EditorInTab","EditorOutTab","e1","e2","ViewMode","EditorTab","mergeEnums","sourcesInitial","html","trimStart","css","js","tabBarStyle","margin","paddingLeft","paddingRight","editorOptions","minimap","enabled","resultEditorOptions","readOnly","useLocalstorageState","getLocalStorageKey","sources","setSources","HTML","editorTab","setEditorTab","SPLIT","viewMode","setViewMode","handleSourceChange","useChangeStateHandler","handleEditorTabChange","tab","handleViewModeChange","useChangeValueStateHandler","resultSource","useDebouncedMemo","trim","handleEditorMount","editor","monaco","emmetHTML","emmetCSS","emmetJSX","leftCol","className","classNames","styles","VIEW","activeKey","onChange","tabBarGutter","tabBarExtraContent","type","icon","ViewHeadline","EDITOR","onClick","VerticalSplit","Html","AppEditor","language","onMount","options","Css","CSS","Javascript","JS","Code","rightCol","srcDoc","PageContainer","noPadding","direction","minSize","snapOffset"],"sourceRoot":""}