{"version":3,"file":"static/js/7930.6713d87a.chunk.js","mappings":"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","sources":["utils/camelizeKeys.ts","actions/api/appAxios.ts","utils/copyText.ts","utils/copyBlob.ts","utils/computeValue.ts","components/copyButton/CopyButton.tsx","hooks/useChangeAnyStateHandler.ts","hooks/useInputState.ts","hooks/useStateChangeByEventHandler.ts","hooks/useWriteableLocalstorageState.ts","layouts/pages/pageContainer/PageContainer.tsx","layouts/pages/pageContainer/PageContainer.module.scss","components/disqusThread/DisqusThread.tsx","pages/hhDictionariesPage/HhDictionariesPage.tsx","pages/hhDictionariesPage/HhDictionariesPage.module.scss","utils/sorting.ts","components/loading/Loading.module.scss","components/loading/Loading.tsx","utils/getLocalStorageKey.ts"],"sourcesContent":["import { camelCase, isNil } from 'lodash';\n\n//https://stackoverflow.com/a/50620653/14899408\n\nconst camelizeKeys = (obj: any): any => {\n    if (Array.isArray(obj)) {\n        return obj.map((v) => camelizeKeys(v));\n    } else if (!isNil(obj) && obj.constructor === Object) {\n        return Object.keys(obj).reduce(\n            (result, key) => ({\n                ...result,\n                [camelCase(key)]: camelizeKeys(obj[key])\n            }),\n            {}\n        );\n    }\n    return obj;\n};\n\nexport default camelizeKeys;\n","import axios, { AxiosInstance } from 'axios';\nimport call from '../../utils/call';\nimport camelizeKeys from '../../utils/camelizeKeys';\n\nconst appAxios = call<AxiosInstance>(() => {\n    const instance = axios.create();\n\n    instance.interceptors.response.use((response) => {\n        response.data = camelizeKeys(response.data);\n        return response;\n    });\n\n    return instance;\n});\n\nexport default appAxios;\n","const copyText = (text: string | undefined) => {\n    if (!text) {\n        return;\n    }\n\n    return navigator.clipboard.writeText(text);\n};\n\nexport default copyText;\n","const copyBlob = (blob: Blob) => {\n    return navigator.clipboard.write([\n        new ClipboardItem({\n            [blob.type]: blob\n        })\n    ]);\n};\n\nexport default copyBlob;\n","import { isFunction } from 'lodash';\n\nconst computeValue = <T>(value: T | (() => T)): T => {\n    return isFunction(value) ? value() : value;\n};\n\nexport default computeValue;\n","import React, { MouseEvent, MouseEventHandler, useRef, useState } from 'react';\nimport copyText from '../../utils/copyText';\nimport { Button, ButtonProps } from 'antd';\nimport { CheckOutlined, CopyOutlined } from '@ant-design/icons';\nimport { isNil, isString } from 'lodash';\nimport copyBlob from '../../utils/copyBlob';\nimport computeValue from '../../utils/computeValue';\n\ntype ContentType = string | Blob | null | undefined;\n\ninterface Props<T extends ContentType> extends Omit<ButtonProps, 'value'> {\n    value: T | (() => T);\n    copyEmpty?: boolean;\n    onClick?: (event: MouseEvent<HTMLButtonElement>) => T;\n}\n\nfunction CopyButton<T extends ContentType>({ value, copyEmpty, children, onClick, icon, ...props }: Props<T>) {\n    const [isCopied, setIsCopied] = useState<boolean>(false);\n\n    const copiedTimeoutRef = useRef<NodeJS.Timeout>();\n\n    const handleClick: MouseEventHandler<HTMLButtonElement> = async (event) => {\n        const replacedValue = onClick?.(event);\n\n        const actualValue = replacedValue ?? computeValue(value);\n\n        if (!actualValue && !copyEmpty) {\n            return;\n        }\n\n        if (copiedTimeoutRef.current) {\n            clearTimeout(copiedTimeoutRef.current);\n        }\n\n        if (isNil(actualValue) || isString(actualValue)) {\n            await copyText(actualValue ?? '');\n        }\n        if (actualValue instanceof Blob) {\n            await copyBlob(actualValue);\n        }\n\n        setIsCopied(true);\n        copiedTimeoutRef.current = setTimeout(() => {\n            setIsCopied(false);\n        }, 1000);\n    };\n\n    return (\n        <Button onClick={handleClick} icon={icon ?? (isCopied ? <CheckOutlined /> : <CopyOutlined />)} {...props}>\n            {children ?? 'Copy'}\n        </Button>\n    );\n}\n\nexport default CopyButton;\n// export default React.memo(CopyButton, (prevProps, nextProps) => {\n//     return isEqual(omit(prevProps, 'value'), omit(nextProps, 'value')) && isEqualFunctions(prevProps.value, nextProps.value);\n// });\n","import { Dispatch, SetStateAction } from 'react';\nimport { isObject } from 'lodash';\nimport call from '../utils/call';\nimport ObjectKey from '../types/common/ObjectKey';\n\nexport interface TypedChangeEvent<T, P extends ObjectKey> {\n    target: {\n        [key in P]: T;\n    };\n}\n\nexport const isChangeEvent = (value: unknown): value is TypedChangeEvent<unknown, ObjectKey> => {\n    return isObject(value) && 'target' in value;\n};\n\nconst useChangeAnyStateHandler = <S, P extends ObjectKey>(\n    setState: Dispatch<SetStateAction<S>>,\n    property: P = 'value' as P\n) => {\n    return (value: TypedChangeEvent<S, P> | S) => {\n        const actualValue = call(() => {\n            if (isChangeEvent(value)) {\n                const event = value as TypedChangeEvent<S, P>;\n                return event.target[property];\n            }\n\n            return value;\n        });\n\n        setState(actualValue);\n    };\n};\n\nexport default useChangeAnyStateHandler;\n","import React, { Dispatch, SetStateAction, useState } from 'react';\nimport useStateChangeByEventHandler from './useStateChangeByEventHandler';\n\ntype PossiblyUndefined<S, V> = V extends undefined ? S | undefined : S;\nexport type SetStateByEventAction<S> = (event: React.ChangeEvent<{ value: S }>) => void;\n\nfunction useInputState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>, SetStateByEventAction<S>];\nfunction useInputState<S = undefined>(): [\n    S | undefined,\n    Dispatch<SetStateAction<S | undefined>>,\n    SetStateByEventAction<S | undefined>\n];\nfunction useInputState<S>(initialState?: S | (() => S)) {\n    const [value, setValue] = useState<PossiblyUndefined<S, typeof initialState>>(initialState);\n    const setValueByEvent = useStateChangeByEventHandler(setValue);\n\n    return [value, setValue, setValueByEvent];\n}\n\nexport default useInputState;\n","import React, { Dispatch, SetStateAction, useCallback } from 'react';\nimport useAutoRef from './useAutoRef';\n\nexport const handleEventTargetValueChange =\n    <S>(callback: (value: S) => void, onChange?: React.ChangeEventHandler<{ value: S }>) =>\n    (event: React.ChangeEvent<{ value: S }>) => {\n        callback(event.target.value);\n        onChange?.(event);\n    };\n\nconst useStateChangeByEventHandler = <S>(\n    setState: Dispatch<SetStateAction<S>>,\n    onChange?: React.ChangeEventHandler<{ value: S }>\n) => {\n    const onChangeRef = useAutoRef(onChange);\n\n    return useCallback(handleEventTargetValueChange(setState, onChangeRef.current), [setState]);\n};\n\nexport default useStateChangeByEventHandler;\n","import { Dispatch, SetStateAction, useEffect, useMemo, useState } from 'react';\nimport { useLocalstorageState } from 'rooks';\n\ntype UseLocalstorageStateReturnValue<S> = [S, Dispatch<SetStateAction<S>>, () => void];\n\nconst useWriteableLocalstorageState = <S>(\n    key: string,\n    initialState?: S | (() => S)\n): UseLocalstorageStateReturnValue<S> => {\n    const [lsState, setLsState, resetLsState] = useLocalstorageState<S>(key, initialState);\n    const [state, setState] = useState<S>(lsState);\n\n    useEffect(() => {\n        setLsState(state as S);\n    }, [state]);\n\n    return useMemo(() => [state, setState, resetLsState], [state, setState, resetLsState]);\n};\n\nexport default useWriteableLocalstorageState;\n","import React, { ReactNode, useMemo } from 'react';\nimport styles from './PageContainer.module.scss';\nimport { Space, SpaceProps, Tag } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport { ClockCircleOutlined, WarningOutlined } from '@ant-design/icons';\nimport classNames from 'classnames';\nimport DisqusThread from '../../../components/disqusThread/DisqusThread';\n\nexport enum PageTag {\n    WIP = 'WIP',\n    NOT_WORKING = 'NOT_WORKING'\n}\n\nexport interface PageContainerProps extends Omit<SpaceProps, 'title'> {\n    contentRef?: React.Ref<HTMLDivElement>;\n    contentClassName?: string;\n    title?: ReactNode;\n    description?: ReactNode;\n    titleExtra?: ReactNode;\n    tags?: PageTag[];\n    noPadding?: boolean;\n    noContentPadding?: boolean;\n    withComments?: boolean;\n}\n\nconst getTagNodes = (key: number | string): Readonly<Record<PageTag, ReactNode>> => ({\n    [PageTag.WIP]: (\n        <Tag color=\"blue\" icon={<ClockCircleOutlined />} key={key}>\n            Work In Progress\n        </Tag>\n    ),\n    [PageTag.NOT_WORKING]: (\n        <Tag color=\"red\" icon={<WarningOutlined />} key={key}>\n            Not Working\n        </Tag>\n    )\n});\n\nconst renderTag = (tag: PageTag, index: number) => getTagNodes(index)[tag];\n\nconst PageContainer = React.forwardRef<HTMLDivElement, PageContainerProps>((props, ref) => {\n    const {\n        title,\n        description,\n        titleExtra,\n        tags,\n        noPadding,\n        noContentPadding,\n        children,\n        className,\n        contentClassName,\n        contentRef,\n        withComments,\n        ...restProps\n    } = props;\n\n    const renderedTags = useMemo(() => tags?.map(renderTag), [tags]);\n\n    return (\n        <div\n            ref={ref}\n            className={classNames(\n                styles.container,\n                {\n                    [styles.noPadding]: noPadding,\n                    [styles.noContentPadding]: noContentPadding\n                },\n                className\n            )}\n            {...restProps}\n        >\n            {tags?.length && <div>{renderedTags}</div>}\n            {title && (\n                <Space direction=\"horizontal\" size=\"middle\" className={styles.headingContainer}>\n                    <h1 className=\"mb-0\">{title}</h1>\n                    {titleExtra}\n                </Space>\n            )}\n            {description && <Paragraph className=\"mb-2\">{description}</Paragraph>}\n\n            <div className={classNames(styles.contentContainer, contentClassName)} ref={contentRef}>\n                {children}\n                {withComments && <DisqusThread className=\"mt-4\" />}\n            </div>\n        </div>\n    );\n});\n\nexport default PageContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PageContainer_container__0XdUl\",\"noPadding\":\"PageContainer_noPadding__8qKdC\",\"noContentPadding\":\"PageContainer_noContentPadding__e8KpM\",\"headingContainer\":\"PageContainer_headingContainer__oss+6\",\"contentContainer\":\"PageContainer_contentContainer__1pGdM\"};","import React, { FC, HTMLProps, useMemo, useRef } from 'react';\nimport { DiscussionEmbed } from 'disqus-react';\nimport useAppLocation from '../../hooks/useAppLocation';\nimport useAppSettings from '../../hooks/useAppSettings';\n\ntype Props = HTMLProps<HTMLDivElement>;\n\ntype DiscussionEmbedConfig = DiscussionEmbed['props']['config'];\n\n// const handleReactionClick = (event: MouseEvent) => {\n//     const item = event.target;\n//\n//     console.log('CLICK', {item});\n// };\n\nconst DisqusThread: FC<Props> = ({ children, ...props }) => {\n    const appRoute = useAppLocation();\n    const { isCommentsBlockHidden } = useAppSettings();\n\n    const discussionContainerRef = useRef<HTMLDivElement>(null);\n    const getDiscussion: () => HTMLDivElement | undefined = () => {\n        return (discussionContainerRef.current?.firstElementChild ?? undefined) as HTMLDivElement | undefined;\n    };\n\n    const config = useMemo<DiscussionEmbedConfig>(\n        () => ({\n            url: new URL(appRoute?.path ?? '', window.location.origin).toString(),\n            identifier: appRoute?.path,\n            language: navigator.language\n        }),\n        [appRoute]\n    );\n\n    // useEffect(() => {\n    //     debugger;\n    //     const discussion = getDiscussion();\n    //     if (!discussion) {\n    //         return;\n    //     }\n    //\n    //     const reactionItemsContainer = discussion.querySelector('.reaction-items');\n    //     if (!reactionItemsContainer) {\n    //         return;\n    //     }\n    //\n    //     const reactionItems: NodeListOf<HTMLElement> = reactionItemsContainer.querySelectorAll('.reaction-item.reaction-item__enabled:not(.reaction-item__selected)');\n    //\n    //     reactionItems.forEach(item => {\n    //         item.addEventListener('click', handleReactionClick);\n    //     });\n    //\n    //     return () => {\n    //         reactionItems.forEach(item => {\n    //             item.removeEventListener('click', handleReactionClick);\n    //         });\n    //     };\n    // }, []);\n\n    if (isCommentsBlockHidden) {\n        return null;\n    }\n\n    return (\n        <div {...props} ref={discussionContainerRef}>\n            <DiscussionEmbed shortname=\"mrgrd56\" config={config} />\n            {children}\n        </div>\n    );\n};\n\nexport default DisqusThread;\n","import React, { FunctionComponent, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport PageContainer from '../../layouts/pages/pageContainer/PageContainer';\nimport styles from './HhDictionariesPage.module.scss';\nimport { Checkbox, Popover, Select, Table, Tabs } from 'antd';\nimport useWriteableLocalstorageState from '../../hooks/useWriteableLocalstorageState';\nimport getLocalStorageKey from '../../utils/getLocalStorageKey';\nimport Flex from '../../components/flex/Flex';\nimport appAxios from '../../actions/api/appAxios';\nimport { get, isString, omit, values } from 'lodash';\nimport Column from 'antd/lib/table/Column';\nimport call from '../../utils/call';\nimport { compareFields, compareNumbers, compareNumericStrings, Comparer, compareStrings } from '../../utils/sorting';\nimport { ExpandableConfig } from 'antd/lib/table/interface';\nimport Loading from '../../components/loading/Loading';\nimport CopyButton from '../../components/copyButton/CopyButton';\nimport ExternalLink from '../../components/ExternalLink';\nimport { LinkOutlined } from '@ant-design/icons';\nimport Search from 'antd/lib/input/Search';\nimport useInputState from '../../hooks/useInputState';\nimport { useDebounce } from 'rooks';\nimport { Info } from '@mui/icons-material';\nimport Text from 'antd/lib/typography/Text';\nimport useChangeAnyStateHandler from '../../hooks/useChangeAnyStateHandler';\nimport TabChangeHandler from '../../types/antd/TabChangeHandler';\n\nenum HHDictionary {\n    PROFESSIONAL_ROLES = 'professional_roles',\n    SPECIALIZATIONS = 'specializations',\n    INDUSTRIES = 'industries',\n    AREAS = 'areas'\n}\n\nenum DictionaryViewMode {\n    TREE = 'TREE',\n    FLAT = 'FLAT',\n    INVERTED_2_LEVEL_TREE = 'INVERTED_2_LEVEL_TREE'\n}\n\ninterface HHDictionaryOptions {\n    viewModes?: DictionaryViewMode[]; // if undefined - all are supported\n    rootPath?: string;\n    itemChildrenNodeName: string;\n    idSorter: Comparer<Entry>;\n}\n\ninterface Entry {\n    id: string;\n    name: string;\n\n    matchingQuery?: string;\n}\n\ninterface ParentEntry extends Entry {\n    items: ParentEntry[];\n}\n\nconst isParentEntry = (entry: Entry): entry is ParentEntry => {\n    return Array.isArray((entry as any).items);\n};\n\ninterface HHDictionaryData {\n    views: {\n        [DictionaryViewMode.TREE]: ParentEntry[];\n        [DictionaryViewMode.FLAT]: Entry[];\n        [DictionaryViewMode.INVERTED_2_LEVEL_TREE]: ParentEntry[];\n    };\n}\n\nconst stringIdSorter = compareFields<string, Entry>('id', compareStrings);\nconst numberIdSorter = compareFields<string, Entry>('id', compareNumericStrings);\nconst nameSorter = compareFields<string, Entry>('name', compareStrings);\nconst itemsCountSorter = compareFields<number, Entry>('items.length', compareNumbers);\n\nconst dictionariesOptions: Record<HHDictionary, HHDictionaryOptions> = {\n    [HHDictionary.PROFESSIONAL_ROLES]: {\n        viewModes: [DictionaryViewMode.TREE, DictionaryViewMode.INVERTED_2_LEVEL_TREE],\n        rootPath: 'categories',\n        itemChildrenNodeName: 'roles',\n        idSorter: numberIdSorter\n    },\n    [HHDictionary.SPECIALIZATIONS]: {\n        itemChildrenNodeName: 'specializations',\n        idSorter: numberIdSorter\n    },\n    [HHDictionary.INDUSTRIES]: {\n        itemChildrenNodeName: 'industries',\n        idSorter: numberIdSorter\n    },\n    [HHDictionary.AREAS]: {\n        viewModes: [DictionaryViewMode.TREE, DictionaryViewMode.FLAT],\n        itemChildrenNodeName: 'areas',\n        idSorter: numberIdSorter\n    }\n};\n\nconst allViewModes = values(DictionaryViewMode);\n\nconst isViewModeSupported = (options: HHDictionaryOptions, mode: DictionaryViewMode) => {\n    return !options.viewModes || options.viewModes.includes(mode);\n};\n\nconst getViewModes = (options: HHDictionaryOptions): DictionaryViewMode[] => {\n    return options.viewModes ?? allViewModes;\n};\n\nconst parseEntriesTree = (root: any[], options: HHDictionaryOptions): ParentEntry[] => {\n    const { itemChildrenNodeName, idSorter } = options;\n\n    return root\n        .map((item) => {\n            const itemsNode = item[itemChildrenNodeName] ?? [];\n\n            return {\n                id: item.id,\n                name: item.name,\n                ...omit(item, 'id', 'name', itemChildrenNodeName),\n                items: parseEntriesTree(itemsNode, options)\n            } as ParentEntry;\n        })\n        .sort(idSorter);\n};\n\nconst flatEntries = (tree: ParentEntry[]): Entry[] => {\n    const flat: Entry[] = [];\n\n    tree.forEach((entry) => {\n        flat.push(omit(entry, 'items'));\n        flat.push(...flatEntries(entry.items));\n    });\n\n    return flat.sort(numberIdSorter);\n};\n\nconst invertEntries2LevelTree = (tree: ParentEntry[]): ParentEntry[] => {\n    const interimResultKeys = new Map<ParentEntry['id'], ParentEntry>();\n    const interimResult = new Map<ParentEntry['id'], ParentEntry[]>();\n\n    for (const level1 of tree) {\n        for (const level2 of level1.items) {\n            const interimResultEntry = interimResult.get(level2.id);\n            if (interimResultEntry) {\n                interimResultEntry.push(level1);\n            } else {\n                interimResult.set(level2.id, [level1]);\n                interimResultKeys.set(level2.id, level2);\n            }\n        }\n    }\n\n    return Array.from(interimResult.entries())\n        .map(([level2Id, level1Items]) => {\n            const level2 = interimResultKeys.get(level2Id);\n\n            return {\n                ...level2,\n                items: level1Items\n                    .map((level1) => ({\n                        ...level1,\n                        items: []\n                    }))\n                    .sort(numberIdSorter)\n            } as ParentEntry;\n        })\n        .sort(numberIdSorter);\n};\n\nconst treeExpandable: ExpandableConfig<ParentEntry> = {\n    expandedRowRender: (record) => {\n        const isExpandable = record.items.some((item) => item.items.length > 0);\n\n        return (\n            <Table\n                dataSource={record.items}\n                expandable={isExpandable ? treeExpandable : undefined}\n                rowKey=\"id\"\n                pagination={false}\n            >\n                <Column key=\"id\" dataIndex=\"id\" title=\"ID\" sorter={numberIdSorter} />\n                <Column key=\"name\" dataIndex=\"name\" title=\"Name\" sorter={nameSorter} />\n                {isExpandable && (\n                    <Column\n                        key=\"itemsCount\"\n                        dataIndex={['items', 'length']}\n                        title=\"Items\"\n                        sortDirections={['descend', 'ascend']}\n                        sorter={itemsCountSorter}\n                    />\n                )}\n            </Table>\n        );\n    },\n    expandRowByClick: true\n};\n\nconst isEntryMatchBySearchQuery = (entry: Entry, query: string): boolean => {\n    if (!query) {\n        return true;\n    }\n\n    const idQuery = parseQuery(parseIdQuery(query), true);\n\n    if (idQuery !== undefined && isMatchByQuery(entry.id, idQuery)) {\n        return true;\n    }\n\n    const exactNameQuery = parseQuery(parseExactNameQuery(query), true);\n\n    if (exactNameQuery !== undefined && isMatchByQuery(entry.name, exactNameQuery)) {\n        return true;\n    }\n\n    const nameQuery = parseQuery(parseNameQuery(query), false);\n\n    if (nameQuery !== undefined && isMatchByQuery(entry.name, nameQuery)) {\n        return true;\n    }\n\n    if (entry.id === query) {\n        return true;\n    }\n\n    const hhQuery = parseQuery(query, false);\n\n    if (hhQuery !== undefined && isMatchByQuery(entry.name, hhQuery)) {\n        return true;\n    }\n\n    // if (isParentEntry(entry)) {\n    //     return entry.items.some(item => isEntryMatchBySearchQuery(item, query));\n    // }\n\n    return false;\n};\n\nconst preFilterEntriesBySearchQuery = <E extends Entry>(\n    entries: E[],\n    query: string,\n    isSearch1Level: boolean\n): Array<E | undefined> => {\n    return entries.map((entry) => {\n        const isMatchItself = isEntryMatchBySearchQuery(entry, query);\n        if (isMatchItself) {\n            return {\n                ...entry,\n                matchingQuery: query || undefined\n            };\n        }\n\n        if (!isSearch1Level && isParentEntry(entry)) {\n            const preFilteredItems = filterEntriesBySearchQuery(entry.items, query, isSearch1Level);\n            const hasMatchingItems = preFilteredItems.some(Boolean);\n\n            if (!hasMatchingItems) {\n                return;\n            }\n\n            return {\n                ...entry,\n                items: preFilteredItems\n            } as ParentEntry;\n        }\n    }) as Array<E | undefined>;\n\n    // const firstLevelFiltered = entries.filter(entry => {\n    //     return isEntryMatchBySearchQuery(entry, query);\n    // });\n    //\n    // return firstLevelFiltered.map(entry => {\n    //     if (isParentEntry(entry)) {\n    //         return {\n    //             ...entry,\n    //             items: filterEntriesBySearchQuery(entry.items, query)\n    //         };\n    //     }\n    //\n    //     return entry;\n    // });\n};\n\nconst filterEntriesBySearchQuery = <E extends Entry>(\n    entries: E[],\n    query: string,\n    isSearch1Level: boolean\n): Array<E | undefined> => {\n    return preFilterEntriesBySearchQuery(entries, query, isSearch1Level).filter(Boolean) as E[];\n};\n\nconst parseIdQuery = (query: string): string | undefined => {\n    return /^[#№](.*)$/.exec(query)?.[1];\n};\n\nconst parseNameQuery = (query: string): string | undefined => {\n    return /^@(.*)$/.exec(query)?.[1];\n};\n\nconst parseExactNameQuery = (query: string): string | undefined => {\n    return /^=(.*)$/.exec(query)?.[1];\n};\n\nconst parseRegexQuery = (query: string): RegExp | undefined => {\n    const match = /^\\/(.+)\\/([a-z]*)$/.exec(query);\n    if (!match) {\n        return undefined;\n    }\n\n    return new RegExp(match[1], match[2]);\n};\n\ninterface HHQuery {\n    isExact?: boolean;\n    query: RegExp | string;\n}\n\nconst parseQuery = (query: string | undefined, isExact: boolean, isNoRegex?: boolean): HHQuery | undefined => {\n    const hhQuery = (query && !isNoRegex && parseRegexQuery(query)) || query;\n\n    if (hhQuery === undefined) {\n        return undefined;\n    }\n\n    return {\n        isExact: Boolean(isExact),\n        query: hhQuery\n    };\n};\n\nconst isMatchByQuery = (value: string, hhQuery: HHQuery): boolean => {\n    const { query, isExact } = hhQuery;\n\n    if (!query) {\n        return true;\n    }\n\n    if (isString(query)) {\n        const normalizedQuery = query.trim().toLowerCase();\n        return isExact ? value.toLowerCase() === normalizedQuery : value.toLowerCase().includes(normalizedQuery);\n    }\n\n    return query.test(value);\n};\n\nconst getDisplayedDictionaryData = (\n    dictionaryData: HHDictionaryData | undefined,\n    viewMode: DictionaryViewMode,\n    searchQuery: string,\n    isSearch1Level: boolean\n): HHDictionaryData | undefined => {\n    if (!dictionaryData) {\n        return dictionaryData;\n    }\n\n    return {\n        ...dictionaryData,\n        views: {\n            ...dictionaryData.views,\n            [viewMode]: filterEntriesBySearchQuery(dictionaryData.views[viewMode], searchQuery, isSearch1Level)\n        }\n    };\n};\n\nconst HhDictionariesPage: FunctionComponent = () => {\n    const [dictionary, setDictionary] = useWriteableLocalstorageState<HHDictionary>(\n        getLocalStorageKey('headhunter-dictionaries', 'dictionary'),\n        HHDictionary.PROFESSIONAL_ROLES\n    );\n\n    const [searchQuery, , setSearchQueryByEvent] = useInputState<string>('');\n    const [isSearch1Level, setIsSearch1Level] = useState<boolean>(false);\n    const handleIsSearch1LevelChecked = useChangeAnyStateHandler(setIsSearch1Level, 'checked');\n    const [isSearchError, setIsSearchError] = useState<boolean>(false);\n\n    const [viewMode, setViewMode] = useState<DictionaryViewMode>(DictionaryViewMode.TREE);\n\n    const dictionaryOptions = dictionariesOptions[dictionary];\n\n    const [dictionariesData, setDictionariesData] = useState<Partial<Record<HHDictionary, HHDictionaryData>>>({});\n    const [dictionaryData, setDictionaryData] = useState<HHDictionaryData>();\n    const [displayedDictionaryData, setDisplayedDictionaryData] = useState<HHDictionaryData>();\n\n    // const displayedDictionaryData = useDebouncedMemo(\n    //     () => {\n    //         if (!dictionaryData) {\n    //             return dictionaryData;\n    //         }\n    //\n    //         return {\n    //             ...dictionaryData,\n    //             views: {\n    //                 ...dictionaryData.views,\n    //                 [viewMode]: filterEntriesBySearchQuery(\n    //                     dictionaryData.views[viewMode],\n    //                     searchQuery.trim().toLowerCase()\n    //                 )\n    //             }\n    //         };\n    //     },\n    //     [dictionaryData, viewMode, searchQuery],\n    //     100\n    // );\n\n    const updateDisplayedDictionaryData = useCallback(\n        (\n            dictionaryData: HHDictionaryData | undefined,\n            viewMode: DictionaryViewMode,\n            searchQuery: string,\n            isSearch1Level: boolean\n        ) => {\n            try {\n                setDisplayedDictionaryData(\n                    getDisplayedDictionaryData(dictionaryData, viewMode, searchQuery, isSearch1Level)\n                );\n\n                setIsSearchError(false);\n            } catch (error) {\n                setIsSearchError(true);\n            }\n        },\n        []\n    );\n\n    const handleDictionaryChange = useCallback(\n        (newDictionary: HHDictionary) => {\n            const newDictionaryOptions = dictionariesOptions[newDictionary];\n\n            if (!isViewModeSupported(newDictionaryOptions, viewMode)) {\n                const newViewMode = getViewModes(newDictionaryOptions)[0];\n                if (newViewMode) {\n                    setViewMode(newViewMode);\n                }\n            }\n\n            setDictionary(newDictionary);\n        },\n        [viewMode, dictionary]\n    );\n\n    const updateDisplayedDictionaryDataDebounced = useDebounce(updateDisplayedDictionaryData, 100);\n\n    const fetchDictionaryData = useCallback(async (dictionary: HHDictionary): Promise<HHDictionaryData> => {\n        const { data: raw } = await appAxios.get<object>(`https://api.hh.ru/${dictionary}`);\n\n        const dictionaryOptions = dictionariesOptions[dictionary];\n\n        const root: any[] = dictionaryOptions.rootPath === undefined ? raw : get(raw, dictionaryOptions.rootPath);\n        const tree: ParentEntry[] = parseEntriesTree(root, dictionaryOptions);\n        const flat: Entry[] = flatEntries(tree);\n        const inverted2LevelTree: ParentEntry[] = invertEntries2LevelTree(tree);\n\n        return {\n            views: {\n                [DictionaryViewMode.TREE]: tree,\n                [DictionaryViewMode.FLAT]: flat,\n                [DictionaryViewMode.INVERTED_2_LEVEL_TREE]: inverted2LevelTree\n            }\n        };\n    }, []);\n\n    const stringData = useMemo<string | undefined>(() => {\n        return displayedDictionaryData && JSON.stringify(displayedDictionaryData.views[viewMode], undefined, 4);\n    }, [displayedDictionaryData, viewMode]);\n\n    const previousDictionaryRef = useRef<HHDictionary>();\n\n    useEffect(() => {\n        call(async () => {\n            const previousDictionary = previousDictionaryRef.current;\n            previousDictionaryRef.current = dictionary;\n\n            if (previousDictionary === dictionary) {\n                return;\n            }\n\n            const loadedData = dictionariesData[dictionary];\n            if (loadedData) {\n                setDictionaryData(loadedData);\n                return;\n            }\n\n            setDictionaryData(undefined);\n            const fetchedData = await fetchDictionaryData(dictionary);\n            setDictionariesData((data) => ({\n                ...data,\n                [dictionary]: fetchedData\n            }));\n            setDictionaryData(fetchedData);\n        });\n    }, [dictionary, dictionariesData, fetchDictionaryData]);\n\n    const previousSearchQueryRef = useRef<string>(searchQuery);\n\n    useLayoutEffect(() => {\n        const previousSearchQuery = previousSearchQueryRef.current;\n        previousSearchQueryRef.current = searchQuery;\n\n        if (previousSearchQuery === searchQuery) {\n            updateDisplayedDictionaryData(dictionaryData, viewMode, searchQuery, isSearch1Level);\n        } else {\n            updateDisplayedDictionaryDataDebounced(dictionaryData, viewMode, searchQuery, isSearch1Level);\n        }\n    }, [\n        dictionaryData,\n        viewMode,\n        searchQuery,\n        isSearch1Level,\n        updateDisplayedDictionaryData,\n        updateDisplayedDictionaryDataDebounced\n    ]);\n\n    return (\n        <PageContainer title=\"HeadHunter Dictionaries\" className={styles.page}>\n            <Flex col gap={8}>\n                <Flex row gap={12} align=\"center\">\n                    <label className=\"d-flex align-items-center gap-2\">\n                        Dictionary\n                        <Select\n                            className={styles.dictionarySelect}\n                            value={dictionary}\n                            onSelect={handleDictionaryChange}\n                        >\n                            <Select.Option value={HHDictionary.PROFESSIONAL_ROLES}>\n                                {HHDictionary.PROFESSIONAL_ROLES}\n                            </Select.Option>\n                            <Select.Option value={HHDictionary.SPECIALIZATIONS}>\n                                {HHDictionary.SPECIALIZATIONS}\n                            </Select.Option>\n                            <Select.Option value={HHDictionary.INDUSTRIES}>{HHDictionary.INDUSTRIES}</Select.Option>\n                            <Select.Option value={HHDictionary.AREAS}>{HHDictionary.AREAS}</Select.Option>\n                        </Select>\n                    </label>\n                    <ExternalLink href={`https://api.hh.ru/${dictionary}`} className={styles.apiLinkIcon}>\n                        <LinkOutlined />\n                    </ExternalLink>\n                </Flex>\n\n                <Flex col gap={8}>\n                    <Flex row gap={12} align=\"center\">\n                        <Search\n                            value={searchQuery}\n                            onChange={setSearchQueryByEvent}\n                            placeholder=\"Search items by id or name\"\n                            className={styles.search}\n                            allowClear\n                            status={isSearchError ? 'error' : undefined}\n                        />\n                        <Popover\n                            placement=\"bottom\"\n                            content={\n                                <div className={styles.searchTipContainer}>\n                                    <Text>\n                                        Use <Text code>#</Text> or <Text code>№</Text> to search only by ID\n                                    </Text>\n                                    <br />\n                                    <Text>\n                                        Use <Text code>@</Text> to search only by name\n                                    </Text>\n                                    <br />\n                                    <Text>\n                                        Use <Text code>=</Text> to search by exact name\n                                    </Text>\n                                    <br />\n                                    <Text className=\"d-block mb-1\">\n                                        Regexes are supported as well\n                                        <br />\n                                        <Text code>[spec_char]/&lt;pattern&gt;/[flags]</Text>\n                                    </Text>\n                                    <Text type=\"secondary\">Combining the special characters is not allowed!</Text>\n                                    <Text className=\"d-block mt-1 mb-1\">Examples: </Text>\n                                    <Text code className=\"d-block\">\n                                        розни\n                                    </Text>\n                                    <Text code className=\"d-block\">\n                                        @розничн\n                                    </Text>\n                                    <Text code className=\"d-block\">\n                                        =розничная торговля\n                                    </Text>\n                                    <Text code className=\"d-block\">\n                                        #2\n                                    </Text>\n                                    <Text code className=\"d-block\">\n                                        №2\n                                    </Text>\n                                    <Text code className=\"d-block\">\n                                        #/^.+\\.203$/\n                                    </Text>\n                                    <Text code className=\"d-block\">\n                                        @/^рознич/i\n                                    </Text>\n                                    <Text code className=\"d-block\">\n                                        /ная торговля$/\n                                    </Text>\n                                </div>\n                            }\n                        >\n                            <a className={styles.searchInfoIconLink}>\n                                <Info className={styles.searchInfoIcon} />\n                            </a>\n                        </Popover>\n                    </Flex>\n                    <Checkbox\n                        checked={isSearch1Level}\n                        onChange={handleIsSearch1LevelChecked}\n                        className=\"align-self-start\"\n                    >\n                        Search only first level\n                    </Checkbox>\n                </Flex>\n\n                {displayedDictionaryData ? (\n                    <Flex col gap={8} className={styles.dataContainer}>\n                        <Tabs activeKey={viewMode} onChange={setViewMode as TabChangeHandler}>\n                            {isViewModeSupported(dictionaryOptions, DictionaryViewMode.TREE) && (\n                                <Tabs.TabPane tab=\"Tree\" key={DictionaryViewMode.TREE}>\n                                    <Table\n                                        dataSource={displayedDictionaryData.views.TREE}\n                                        expandable={treeExpandable}\n                                        rowKey=\"id\"\n                                    >\n                                        <Column\n                                            key=\"id\"\n                                            dataIndex=\"id\"\n                                            title=\"ID\"\n                                            sorter={dictionaryOptions.idSorter}\n                                        />\n                                        <Column key=\"name\" dataIndex=\"name\" title=\"Name\" sorter={nameSorter} />\n                                        {/*//         render={(value, record) => (*/}\n                                        {/*//             record.matchingQuery ? (*/}\n                                        {/*//                 <Highlighter*/}\n                                        {/*//                     searchWords={[record.matchingQuery]}*/}\n                                        {/*//                     textToHighlight={record.name}*/}\n                                        {/*//                 />*/}\n                                        {/*//             ) : (*/}\n                                        {/*//                 record.name*/}\n                                        {/*//             )*/}\n                                        {/*//         )}*/}\n                                        {/*// />*/}\n                                        <Column\n                                            key=\"itemsCount\"\n                                            dataIndex={['items', 'length']}\n                                            title=\"Items\"\n                                            sortDirections={['descend', 'ascend']}\n                                            sorter={itemsCountSorter}\n                                        />\n                                    </Table>\n                                </Tabs.TabPane>\n                            )}\n                            {isViewModeSupported(dictionaryOptions, DictionaryViewMode.INVERTED_2_LEVEL_TREE) && (\n                                <Tabs.TabPane tab=\"Inverted Tree\" key={DictionaryViewMode.INVERTED_2_LEVEL_TREE}>\n                                    <Table\n                                        dataSource={displayedDictionaryData.views.INVERTED_2_LEVEL_TREE}\n                                        expandable={treeExpandable}\n                                        rowKey=\"id\"\n                                    >\n                                        <Column\n                                            key=\"id\"\n                                            dataIndex=\"id\"\n                                            title=\"ID\"\n                                            sorter={dictionaryOptions.idSorter}\n                                        />\n                                        <Column key=\"name\" dataIndex=\"name\" title=\"Name\" sorter={nameSorter} />\n                                        <Column\n                                            key=\"itemsCount\"\n                                            dataIndex={['items', 'length']}\n                                            title=\"Items\"\n                                            sortDirections={['descend', 'ascend']}\n                                            sorter={itemsCountSorter}\n                                        />\n                                    </Table>\n                                </Tabs.TabPane>\n                            )}\n                            {isViewModeSupported(dictionaryOptions, DictionaryViewMode.FLAT) && (\n                                <Tabs.TabPane tab=\"Flat\" key={DictionaryViewMode.FLAT}>\n                                    <Table dataSource={displayedDictionaryData.views.FLAT} rowKey=\"id\">\n                                        <Column\n                                            key=\"id\"\n                                            dataIndex=\"id\"\n                                            title=\"ID\"\n                                            sorter={dictionaryOptions.idSorter}\n                                        />\n                                        <Column key=\"name\" dataIndex=\"name\" title=\"Name\" sorter={nameSorter} />\n                                    </Table>\n                                </Tabs.TabPane>\n                            )}\n                        </Tabs>\n\n                        <CopyButton className=\"align-self-start\" value={stringData}>\n                            Copy data as JSON\n                        </CopyButton>\n                    </Flex>\n                ) : (\n                    <Loading delay={100} />\n                )}\n            </Flex>\n        </PageContainer>\n    );\n};\n\nexport default HhDictionariesPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"dictionarySelect\":\"HhDictionariesPage_dictionarySelect__7Cvte\",\"apiLinkIcon\":\"HhDictionariesPage_apiLinkIcon__B4Pa4\",\"searchInfoIconLink\":\"HhDictionariesPage_searchInfoIconLink__svhG6\",\"searchInfoIcon\":\"HhDictionariesPage_searchInfoIcon__k4U3L\",\"search\":\"HhDictionariesPage_search__r766-\",\"searchTipContainer\":\"HhDictionariesPage_searchTipContainer__zw34S\",\"dataContainer\":\"HhDictionariesPage_dataContainer__p27J+\",\"whiteText\":\"HhDictionariesPage_whiteText__gk-MF\"};","import { get, PropertyPath } from 'lodash';\nimport moment, { MomentInput } from 'moment';\n\nexport type Comparer<T> = (a: T, b: T) => number;\n\nexport const compareNumbers: Comparer<number> = (a, b) => a - b;\nexport const compareNumericStrings: Comparer<string> = (a, b) => Number(a) - Number(b);\nexport const compareStrings: Comparer<string> = (a, b) => a.localeCompare(b);\nexport const compareDates: Comparer<MomentInput> = (a, b) => moment(a).diff(b);\nexport const compareBooleans: Comparer<boolean> = (a, b) => compareNumbers(Number(a), Number(b));\n\nexport const invertComparer =\n    <T>(comparer: Comparer<T>): Comparer<T> =>\n    (a, b) =>\n        -comparer(a, b);\n\nexport const compareFields =\n    // eslint-disable-next-line @typescript-eslint/ban-types\n\n        <Field, Object>(fieldPath: PropertyPath, comparer: Comparer<Field>): Comparer<Object> =>\n        (a, b) => {\n            return comparer(get(a, fieldPath), get(b, fieldPath));\n        };\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Loading_container__0qTYG\"};","import React, { FunctionComponent } from 'react';\nimport { Spin } from 'antd';\nimport styles from './Loading.module.scss';\n\ninterface Props {\n    spinning?: boolean;\n    delay?: number;\n}\n\nconst Loading: FunctionComponent<Props> = ({ spinning, delay }) => {\n    return <Spin spinning={spinning} className={styles.container} size=\"large\" delay={delay} />;\n};\n\nexport default Loading;\n","const getLocalStorageKey = (scope: string, name: string): string => {\n    return `mrgrd56:${scope}/${name}`;\n};\n\nexport const NULL_LOCALSTORAGE_KEY = getLocalStorageKey('global', 'null');\n\nexport default getLocalStorageKey;\n"],"names":["camelizeKeys","obj","Array","isArray","map","v","isNil","constructor","Object","keys","reduce","result","key","camelCase","call","instance","axios","interceptors","response","use","data","text","navigator","clipboard","writeText","blob","write","ClipboardItem","type","value","isFunction","copyEmpty","children","onClick","icon","props","useState","isCopied","setIsCopied","copiedTimeoutRef","useRef","handleClick","event","replacedValue","actualValue","computeValue","current","clearTimeout","isString","copyText","Blob","copyBlob","setTimeout","isChangeEvent","isObject","setState","property","target","initialState","setValue","useStateChangeByEventHandler","onChange","onChangeRef","useAutoRef","useCallback","callback","handleEventTargetValueChange","useLocalstorageState","lsState","setLsState","resetLsState","state","useEffect","useMemo","PageTag","appRoute","useAppLocation","isCommentsBlockHidden","useAppSettings","discussionContainerRef","config","url","URL","path","window","location","origin","toString","identifier","language","ref","shortname","renderTag","tag","index","WIP","color","NOT_WORKING","getTagNodes","React","title","description","titleExtra","tags","noPadding","noContentPadding","className","contentClassName","contentRef","withComments","restProps","renderedTags","classNames","styles","length","direction","size","HHDictionary","DictionaryViewMode","compareNumbers","a","b","compareStrings","localeCompare","compareFields","fieldPath","comparer","get","spinning","delay","numberIdSorter","Number","nameSorter","itemsCountSorter","dictionariesOptions","PROFESSIONAL_ROLES","viewModes","TREE","INVERTED_2_LEVEL_TREE","rootPath","itemChildrenNodeName","idSorter","SPECIALIZATIONS","INDUSTRIES","AREAS","FLAT","allViewModes","values","isViewModeSupported","options","mode","includes","parseEntriesTree","root","item","itemsNode","id","name","omit","items","sort","flatEntries","tree","flat","forEach","entry","push","invertEntries2LevelTree","interimResultKeys","Map","interimResult","level1","level2","interimResultEntry","set","from","entries","level2Id","level1Items","treeExpandable","expandedRowRender","record","isExpandable","some","dataSource","expandable","undefined","rowKey","pagination","dataIndex","sorter","sortDirections","expandRowByClick","preFilterEntriesBySearchQuery","query","isSearch1Level","isMatchItself","idQuery","parseQuery","parseIdQuery","isMatchByQuery","exactNameQuery","parseExactNameQuery","nameQuery","parseNameQuery","hhQuery","isEntryMatchBySearchQuery","matchingQuery","isParentEntry","preFilteredItems","filterEntriesBySearchQuery","Boolean","filter","exec","isExact","isNoRegex","match","RegExp","parseRegexQuery","normalizedQuery","trim","toLowerCase","test","useWriteableLocalstorageState","getLocalStorageKey","dictionary","setDictionary","useInputState","searchQuery","setSearchQueryByEvent","setIsSearch1Level","handleIsSearch1LevelChecked","useChangeAnyStateHandler","isSearchError","setIsSearchError","viewMode","setViewMode","dictionaryOptions","dictionariesData","setDictionariesData","dictionaryData","setDictionaryData","displayedDictionaryData","setDisplayedDictionaryData","updateDisplayedDictionaryData","views","getDisplayedDictionaryData","error","handleDictionaryChange","newDictionary","newDictionaryOptions","newViewMode","getViewModes","updateDisplayedDictionaryDataDebounced","useDebounce","fetchDictionaryData","appAxios","raw","inverted2LevelTree","stringData","JSON","stringify","previousDictionaryRef","previousDictionary","loadedData","fetchedData","previousSearchQueryRef","useLayoutEffect","previousSearchQuery","col","gap","row","align","onSelect","href","placeholder","allowClear","status","placement","content","code","checked","activeKey","tab","scope","NULL_LOCALSTORAGE_KEY"],"sourceRoot":""}