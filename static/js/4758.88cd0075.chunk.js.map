{"version":3,"file":"static/js/4758.88cd0075.chunk.js","mappings":"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","sources":["pages/snakeGamePage/components/snakeGame/types/SnakeDirection.ts","webpack://mrgrd56.github.io/./src/pages/snakeGamePage/components/snakeGame/SnakeGame.module.scss?436e","pages/snakeGamePage/components/snakeGame/types/SnakeGameAreaSettings.ts","pages/snakeGamePage/components/snakeGame/types/Point2D.ts","pages/snakeGamePage/components/snakeGame/types/SnakePart.ts","pages/snakeGamePage/components/snakeGame/components/snakePartComponent/SnakePartComponent.tsx","pages/snakeGamePage/components/snakeGame/types/Snake.ts","components/focused/Focused.tsx","pages/snakeGamePage/components/snakeGame/SnakeGame.tsx","pages/snakeGamePage/SnakeGamePage.tsx","utils/processRef.ts"],"sourcesContent":["import Point2D from './Point2D';\n\nenum SnakeDirection {\n    UP,\n    RIGHT,\n    DOWN,\n    LEFT\n}\n\nexport const directions: Readonly<Record<SnakeDirection, Point2D>> = {\n    [SnakeDirection.UP]: new Point2D(0, -1),\n    [SnakeDirection.RIGHT]: new Point2D(1, 0),\n    [SnakeDirection.DOWN]: new Point2D(0, 1),\n    [SnakeDirection.LEFT]: new Point2D(-1, 0)\n};\n\nexport default SnakeDirection;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"SnakeGame_container__oNBJn\"};","class SnakeGameAreaSettings {\n    constructor(public readonly rowCells: number) {}\n\n    public getCellSize(areaWidth: number): number {\n        return areaWidth / this.rowCells;\n    }\n}\n\nexport default SnakeGameAreaSettings;\n","class Point2D {\n    public constructor(public readonly x: number, public readonly y: number) {}\n\n    public add(that: Point2D): Point2D {\n        return new Point2D(this.x + that.x, this.y + that.y);\n    }\n\n    public clone(): Point2D {\n        return new Point2D(this.x, this.y);\n    }\n}\n\nexport default Point2D;\n","import SnakeGameAreaSettings from './SnakeGameAreaSettings';\nimport Point2D from './Point2D';\n\nclass SnakePart extends Point2D {\n    public constructor(x: number, y: number) {\n        super(x, y);\n    }\n\n    public add(that: Point2D): SnakePart {\n        return new SnakePart(this.x + that.x, this.y + that.y);\n    }\n\n    public clone(): SnakePart {\n        return new SnakePart(this.x, this.y);\n    }\n\n    public getView(settings: SnakeGameAreaSettings, areaWidth: number) {\n        const size = settings.getCellSize(areaWidth);\n\n        return {\n            size,\n            x: this.x * size,\n            y: this.y * size\n        };\n    }\n}\n\nexport default SnakePart;\n","import React, { FunctionComponent } from 'react';\nimport SnakePart from '../../types/SnakePart';\nimport SnakeGameAreaSettings from '../../types/SnakeGameAreaSettings';\nimport { Rect } from 'react-konva';\n\ninterface Props {\n    settings: SnakeGameAreaSettings;\n    value: SnakePart;\n    areaWidth: number;\n    fill: string;\n}\n\nconst SnakePartComponent: FunctionComponent<Props> = ({ value, settings, areaWidth, fill }) => {\n    const { x, y, size } = value.getView(settings, areaWidth);\n\n    return <Rect x={x} y={y} width={size} height={size} fill={fill} />;\n};\n\nexport default React.memo(SnakePartComponent);\n","import SnakePart from './SnakePart';\nimport SnakeDirection, { directions } from './SnakeDirection';\nimport Point2D from './Point2D';\nimport SnakeGameAreaSettings from './SnakeGameAreaSettings';\n\nclass Snake {\n    public constructor(public readonly parts: SnakePart[] = [], public readonly direction: SnakeDirection) {\n        this.directionCoords = directions[direction];\n    }\n\n    private readonly directionCoords: Point2D;\n\n    public setDirection(value: SnakeDirection): Snake {\n        // const isTopToBottom = this.direction === SnakeDirection.TOP && value === SnakeDirection.BOTTOM;\n        // const isRightToLeft = this.direction === SnakeDirection.RIGHT && value === SnakeDirection.LEFT;\n        // const isBottomToTop = this.direction === SnakeDirection.BOTTOM && value === SnakeDirection.TOP;\n        // const isLeftToRight = this.direction === SnakeDirection.LEFT && value === SnakeDirection.RIGHT;\n\n        const newDirection = directions[value];\n\n        if (this.directionCoords.x + newDirection.x === 0 && this.directionCoords.y + newDirection.y === 0) {\n            return this;\n        }\n\n        return new Snake(this.parts, value);\n    }\n\n    public move({ rowCells }: SnakeGameAreaSettings): Snake {\n        const newParts: SnakePart[] = this.parts.map((value, index) => {\n            if (index === 0) {\n                const possibleValue = value.add(this.directionCoords);\n                const { x, y } = possibleValue;\n\n                if (this.direction === SnakeDirection.LEFT && x < 0) {\n                    return new SnakePart(rowCells - 1, y);\n                }\n\n                if (this.direction === SnakeDirection.RIGHT && x >= rowCells) {\n                    return new SnakePart(0, y);\n                }\n\n                if (this.direction === SnakeDirection.UP && y < 0) {\n                    return new SnakePart(x, rowCells - 1);\n                }\n\n                if (this.direction === SnakeDirection.DOWN && y >= rowCells) {\n                    return new SnakePart(x, 0);\n                }\n\n                return possibleValue;\n            }\n\n            const previous = this.parts[index - 1];\n            return previous.clone();\n        });\n\n        return new Snake(newParts, this.direction);\n    }\n}\n\nexport default Snake;\n","import React, { HTMLProps, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\n\ninterface Props extends HTMLProps<HTMLDivElement> {\n    ref?: React.RefObject<HTMLDivElement>;\n}\n\nconst Focused = React.forwardRef<HTMLDivElement, Props>(({ tabIndex, className, ...props }, ref) => {\n    const divRef = useRef<HTMLDivElement>();\n\n    const wasFocusedRef = useRef<boolean>(false);\n\n    useEffect(() => {\n        if (wasFocusedRef.current) {\n            return;\n        }\n\n        if (divRef.current) {\n            divRef.current.focus();\n            wasFocusedRef.current = true;\n        }\n    }, []);\n\n    const actualRef = (div: HTMLDivElement) => {\n        divRef.current = div;\n\n        if (ref) {\n            if ('current' in ref) {\n                ref.current = div;\n            } else {\n                ref(div);\n            }\n        }\n    };\n\n    return (\n        <div\n            {...props}\n            tabIndex={tabIndex ?? 0}\n            ref={actualRef}\n            className={classNames('focus-visible-unstyled', className)}\n        />\n    );\n});\n\nexport default Focused;\n","import React, { KeyboardEventHandler, useCallback, useEffect, useRef, useState } from 'react';\nimport { Layer, Stage } from 'react-konva';\nimport styles from './SnakeGame.module.scss';\nimport SnakeGameAreaSettings from './types/SnakeGameAreaSettings';\nimport SnakePart from './types/SnakePart';\nimport SnakePartComponent from './components/snakePartComponent/SnakePartComponent';\nimport Snake from './types/Snake';\nimport SnakeDirection from './types/SnakeDirection';\nimport classNames from 'classnames';\nimport './SnakeGame.scss';\nimport Focused from '../../../../components/focused/Focused';\nimport processRef from '../../../../utils/processRef';\n\nconst snakeSpeed = 150;\nconst maxSnakeAreaSize = 500;\n\nconst getInitialSnake = (): Snake =>\n    new Snake(\n        [new SnakePart(6, 2), new SnakePart(5, 2), new SnakePart(4, 2), new SnakePart(3, 2), new SnakePart(2, 2)],\n        SnakeDirection.RIGHT\n    );\n\nconst settings = new SnakeGameAreaSettings(20);\n\nconst SnakeGame = () => {\n    const [snake, setSnake] = useState<Snake>(getInitialSnake());\n    const [areaWidth, setAreaWidth] = useState<number>(0);\n\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    const handleKeyDown = useCallback<KeyboardEventHandler>((event) => {\n        let newDirection: SnakeDirection;\n\n        switch (event.key) {\n            case 'w':\n            case 'ArrowUp':\n                newDirection = SnakeDirection.UP;\n                break;\n            case 'd':\n            case 'ArrowRight':\n                newDirection = SnakeDirection.RIGHT;\n                break;\n            case 's':\n            case 'ArrowDown':\n                newDirection = SnakeDirection.DOWN;\n                break;\n            case 'a':\n            case 'ArrowLeft':\n                newDirection = SnakeDirection.LEFT;\n                break;\n            default:\n                return;\n        }\n\n        event.preventDefault();\n\n        setSnake((snake) => snake.setDirection(newDirection));\n    }, []);\n\n    useEffect(() => {\n        processRef(containerRef, (container) => {\n            setAreaWidth(Math.min(container.clientWidth - 16, maxSnakeAreaSize));\n            container.focus();\n        });\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setSnake((snake) => snake.move(settings));\n        }, snakeSpeed);\n\n        return () => {\n            clearInterval(interval);\n        };\n    }, []);\n\n    return (\n        <Focused\n            className={classNames(styles.container, 'focus-visible-unstyled', 'SnakeGame__container')}\n            ref={containerRef}\n            onKeyDown={handleKeyDown}\n        >\n            <Stage className={styles.canvasContainer} width={areaWidth} height={areaWidth}>\n                <Layer>\n                    {snake.parts.map((part, index) => (\n                        <SnakePartComponent\n                            key={index}\n                            value={part}\n                            settings={settings}\n                            areaWidth={areaWidth}\n                            fill=\"#2196f3\"\n                        />\n                    ))}\n                </Layer>\n            </Stage>\n        </Focused>\n    );\n};\n\nexport default SnakeGame;\n","import React from 'react';\nimport PageContainer, { PageTag } from '../../layouts/pages/pageContainer/PageContainer';\nimport SnakeGame from './components/snakeGame/SnakeGame';\n\nconst tags = [PageTag.WIP];\n\nconst SnakeGamePage = () => {\n    return (\n        <PageContainer title=\"Snake Game\" tags={tags}>\n            <SnakeGame />\n        </PageContainer>\n    );\n};\n\nexport default SnakeGamePage;\n","import { MutableRefObject, RefObject } from 'react';\nimport { isNil } from 'lodash';\nimport NonNil from '../types/common/NonNil';\nimport Nil from '../types/common/Nil';\n\ntype AnyRefObject<T> = RefObject<T> | MutableRefObject<T>;\n\ntype ExtractRefType<R extends AnyRefObject<unknown>> = R extends AnyRefObject<infer T> ? T : never;\n\nfunction processRef<R extends MutableRefObject<unknown>, V1>(\n    ref: R,\n    handler: (value: NonNil<ExtractRefType<R>>) => V1\n): V1 | undefined;\nfunction processRef<R extends MutableRefObject<unknown>, V1, V2>(\n    ref: R,\n    handler: (value: NonNil<ExtractRefType<R>>) => V1,\n    nilHandler: (value: Extract<ExtractRefType<R>, Nil>) => V2\n): V1 | V2;\nfunction processRef<R extends MutableRefObject<unknown>, V1, V2>(\n    ref: R,\n    handler: (value: NonNil<ExtractRefType<R>>) => V1,\n    nilHandler?: (value: Extract<ExtractRefType<R>, Nil>) => V2\n): V1 | V2 | undefined {\n    if (isNil(ref.current)) {\n        if (!nilHandler) {\n            return undefined;\n        }\n\n        return nilHandler(ref.current as Extract<ExtractRefType<R>, Nil>);\n    }\n\n    return handler(ref.current as NonNil<ExtractRefType<R>>);\n}\n\nexport default processRef;\n\n// TRASH\n\n// type RefsToValues<Refs extends Array<MutableRefObject<any>>> =\n//     Refs extends [infer RefType, ...infer RestRefTypes]\n//         ? RefType extends MutableRefObject<infer Type>\n//             ? RestRefTypes extends Array<MutableRefObject<any>>\n//                 ? [NotNil<Type>, ...RefsToValues<RestRefTypes>]\n//                 : [1]\n//             : [2]\n//         : [];\n\n// type TestA = RefsToValues<[MutableRefObject<number | undefined>]>;\n\n// const handleRefs = <Refs extends Array<MutableRefObject<any>>>(refs: Refs, handler: (values: RefsToValues<Refs>) => void): void => {\n//     const values = [];\n//     for (const ref of refs) {\n//         if (isNil(ref.current)) {\n//             return;\n//         }\n//\n//         values.push(ref.current);\n//     }\n//\n//     handler(values as RefsToValues<Refs>);\n// };\n\n// type UndefinedLike = undefined | void | never;\n\n// type Voidy<T extends unknown | UndefinedLike> =\n//     Extract<T, UndefinedLike> extends never\n//         ? never\n//         : T;\n// T extends infer V | UndefinedLike\n//     ? V extends UndefinedLike\n//         ? never\n//         : T\n//     : never;\n\n// type Simplify<T> =\n//     T extends infer T1 | void | undefined\n//         ? T1 extends never\n//             ? T\n//             : Exclude<T, void> | undefined\n//         : T;\n// T extends undefined\n//     ? T extends void\n//         ? T extends void & undefined\n//             ? Exclude<T, void> | undefined\n//         : 2\n//     : 3\n// : 4;\n// T extends infer R | undefined | void\n//     ? R | undefined\n//     : T extends infer R | undefined\n//         ? R extends never\n//             ? void\n//         : T\n//     : T;\n"],"names":["SnakeDirection","SnakeGameAreaSettings","rowCells","areaWidth","this","Point2D","x","y","that","SnakePart","settings","size","getCellSize","SnakePartComponent","value","fill","getView","width","height","React","directions","UP","RIGHT","DOWN","LEFT","Snake","parts","direction","directionCoords","newDirection","map","index","possibleValue","add","clone","ref","tabIndex","className","props","divRef","useRef","wasFocusedRef","useEffect","current","focus","div","classNames","useState","snake","setSnake","setAreaWidth","containerRef","handleKeyDown","useCallback","event","key","preventDefault","setDirection","processRef","container","Math","min","clientWidth","interval","setInterval","move","clearInterval","styles","onKeyDown","part","tags","PageTag","PageContainer","title","handler","nilHandler","isNil"],"sourceRoot":""}