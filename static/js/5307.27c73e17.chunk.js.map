{"version":3,"file":"static/js/5307.27c73e17.chunk.js","mappings":"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","sources":["components/appEditor/AppEditor.tsx","hooks/useAsync.ts","hooks/useChangeAnyStateHandler.ts","hooks/useChangeState.ts","hooks/useChangeStateHandler.ts","hooks/useWriteableLocalstorageState.ts","layouts/pages/pageContainer/PageContainer.tsx","webpack://mrgrd56.github.io/./src/layouts/pages/pageContainer/PageContainer.module.scss?0d25","pages/httpClientPage/types/HttpMethod.ts","webpack://mrgrd56.github.io/./src/pages/httpClientPage/HttpClientPage.module.scss?ebdd","pages/httpClientPage/HttpClientPage.tsx","utils/logged.ts","pages/httpClientPage/utils/getResponseContentType.ts","pages/httpClientPage/utils/getResponseLanguage.ts","utils/Switch.ts","utils/getLocalStorageKey.ts","utils/processRef.ts"],"sourcesContent":["import React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport Editor, { EditorProps, OnChange } from '@monaco-editor/react';\nimport useAppTheme from '../../hooks/useAppTheme';\nimport { Spin } from 'antd';\nimport classNames from 'classnames';\nimport * as monaco from 'monaco-editor';\nimport MonacoLanguage from '../../types/MonacoLanguage';\nimport { editor } from 'monaco-editor';\n\nconst loadingNode = <Spin size=\"large\" />;\n\nexport type AppOnChange = (value: string, ev: monaco.editor.IModelContentChangedEvent) => void;\n\nconst defaultOptions: Readonly<editor.IStandaloneEditorConstructionOptions> = {\n    minimap: { enabled: false }\n};\n\nexport interface AppEditorProps extends Omit<EditorProps, 'onChange'> {\n    onChange?: AppOnChange;\n    language?: MonacoLanguage;\n}\n\nconst AppEditor: FunctionComponent<AppEditorProps> = ({ className, loading, theme, onChange, options, ...props }) => {\n    const { isDarkMode } = useAppTheme();\n\n    const editorOptions = useMemo(\n        () => ({\n            ...defaultOptions,\n            ...options\n        }),\n        [options]\n    );\n\n    const handleChange = useCallback<OnChange>(\n        (value, ev) => {\n            onChange?.(value ?? '', ev);\n        },\n        [onChange]\n    );\n\n    return (\n        <Editor\n            theme={theme ?? (isDarkMode ? 'vs-dark' : 'light')}\n            className={classNames('app-monaco-editor', className)}\n            loading={loading ?? loadingNode}\n            onChange={handleChange}\n            options={editorOptions}\n            {...props}\n        />\n    );\n};\n\nexport default AppEditor;\n","import { useCallback, useEffect, useState } from 'react';\nimport { isFunction } from 'lodash';\n\nexport interface AsyncHookParams<T> {\n    onSuccess?: (data: T) => void;\n    onError?: (error: unknown) => void;\n    onComplete?: () => void;\n    onLoadingChange?: (isLoading: boolean) => void;\n    onErrorChange?: (error: unknown) => void;\n    initialResult?: T;\n    initialIsLoading?: boolean;\n    initialError?: boolean;\n    doInvokeOnMount?: boolean;\n}\n\nconst useAsync = <T>(promiseFn: (() => Promise<T>) | Promise<T>, params?: AsyncHookParams<T>) => {\n    const {\n        onSuccess,\n        onError,\n        onComplete,\n        onLoadingChange,\n        onErrorChange,\n        initialResult,\n        initialIsLoading,\n        initialError,\n        doInvokeOnMount\n    } = params ?? {};\n\n    const [result, setResult] = useState<T | undefined>(initialResult);\n    const [isLoading, setIsLoading] = useState<boolean>(initialIsLoading ?? false);\n    const [error, setError] = useState<unknown>(initialError);\n\n    const changeResult = useCallback(\n        (value: T) => {\n            setResult(value);\n            onSuccess?.(value);\n        },\n        [onSuccess]\n    );\n\n    const changeLoading = useCallback(\n        (value: boolean) => {\n            setIsLoading(value);\n            onLoadingChange?.(value);\n        },\n        [onLoadingChange]\n    );\n\n    const changeError = useCallback(\n        (value: unknown) => {\n            setError(value);\n            onErrorChange?.(value);\n        },\n        [onErrorChange]\n    );\n\n    const invoke = useCallback(async () => {\n        try {\n            changeLoading(true);\n            changeError(undefined);\n\n            const result: T = isFunction(promiseFn) ? await promiseFn() : await promiseFn;\n\n            changeResult(result);\n        } catch (e) {\n            changeError(e);\n            onError?.(e);\n        } finally {\n            changeLoading(false);\n            onComplete?.();\n        }\n    }, [changeLoading, changeError, promiseFn, onSuccess, onError, onComplete]);\n\n    useEffect(() => {\n        if (doInvokeOnMount) {\n            invoke();\n        }\n    }, []);\n\n    return {\n        result,\n        invoke,\n        isLoading,\n        error\n    };\n};\n\nexport default useAsync;\n","import { Dispatch, SetStateAction } from 'react';\nimport { isObject } from 'lodash';\nimport call from '../utils/call';\nimport ObjectKey from '../types/common/ObjectKey';\n\nexport interface TypedChangeEvent<T, P extends ObjectKey> {\n    target: {\n        [key in P]: T;\n    };\n}\n\nexport const isChangeEvent = (value: unknown): value is TypedChangeEvent<unknown, ObjectKey> => {\n    return isObject(value) && 'target' in value;\n};\n\nconst useChangeAnyStateHandler = <S, P extends ObjectKey>(\n    setState: Dispatch<SetStateAction<S>>,\n    property: P = 'value' as P\n) => {\n    return (value: TypedChangeEvent<S, P> | S) => {\n        const actualValue = call(() => {\n            if (isChangeEvent(value)) {\n                const event = value as TypedChangeEvent<S, P>;\n                return event.target[property];\n            }\n\n            return value;\n        });\n\n        setState(actualValue);\n    };\n};\n\nexport default useChangeAnyStateHandler;\n","import { Dispatch, SetStateAction, useCallback } from 'react';\n\nconst useChangeState = <S extends object>(setState: Dispatch<SetStateAction<S>>) => {\n    return useCallback(<K extends keyof S>(key: K, value: S[K]) => {\n        setState((state) => ({\n            ...state,\n            [key]: value\n        }));\n    }, []);\n};\n\nexport default useChangeState;\n","import { Dispatch, SetStateAction, useCallback } from 'react';\nimport call from '../utils/call';\nimport useChangeState from './useChangeState';\nimport { isChangeEvent, TypedChangeEvent } from './useChangeAnyStateHandler';\nimport ObjectKey from '../types/common/ObjectKey';\n\nconst useChangeStateHandler = <S extends object, P extends ObjectKey = 'value'>(\n    setState: Dispatch<SetStateAction<S>>,\n    property: P = 'value' as P\n) => {\n    const changeState = useChangeState(setState);\n\n    return useCallback(\n        <K extends keyof S, T extends S[K]>(key: K) => {\n            return (value: TypedChangeEvent<T, P> | T) => {\n                const actualValue = call(() => {\n                    if (isChangeEvent(value)) {\n                        const event = value as TypedChangeEvent<T, P>;\n                        return event.target[property];\n                    }\n\n                    return value;\n                });\n\n                changeState(key, actualValue);\n            };\n        },\n        [changeState]\n    );\n};\n\nexport default useChangeStateHandler;\n\n// const useChangeStateHandler = <S extends object, P extends ObjectKey = 'value'>(\n//     setState: Dispatch<SetStateAction<S>>,\n//     defaultEventProperty: P = 'value' as P\n// ) => {\n//     const changeState = useChangeState(setState);\n//\n//     return useCallback(\n//         <K extends keyof S, T extends S[K], EP extends ObjectKey = P>(key: K, eventProperty: EP = defaultEventProperty as unknown as EP) => {\n//             return (value: TypedChangeEvent<T, EP> | T) => {\n//                 const actualValue = call(() => {\n//                     if (isChangeEvent(value)) {\n//                         const event = value as TypedChangeEvent<T, EP>;\n//                         return event.target[eventProperty];\n//                     }\n//\n//                     return value;\n//                 });\n//\n//                 changeState(key, actualValue);\n//             };\n//         },\n//         [changeState]\n//     );\n// };\n","import { Dispatch, SetStateAction, useEffect, useMemo, useState } from 'react';\nimport { useLocalstorageState } from 'rooks';\n\ntype UseLocalstorageStateReturnValue<S> = [S, Dispatch<SetStateAction<S>>, () => void];\n\nconst useWriteableLocalstorageState = <S>(\n    key: string,\n    initialState?: S | (() => S)\n): UseLocalstorageStateReturnValue<S> => {\n    const [lsState, setLsState, resetLsState] = useLocalstorageState<S>(key, initialState);\n    const [state, setState] = useState<S>(lsState);\n\n    useEffect(() => {\n        setLsState(state as S);\n    }, [state]);\n\n    return useMemo(() => [state, setState, resetLsState], [state, setState, resetLsState]);\n};\n\nexport default useWriteableLocalstorageState;\n","import React, { ReactNode, useMemo } from 'react';\nimport styles from './PageContainer.module.scss';\nimport { Space, SpaceProps, Tag } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport { ClockCircleOutlined, WarningOutlined } from '@ant-design/icons';\nimport classNames from 'classnames';\n\nexport enum PageTag {\n    WIP = 'WIP',\n    NOT_WORKING = 'NOT_WORKING'\n}\n\nexport interface PageContainerProps extends Omit<SpaceProps, 'title'> {\n    contentClassName?: string;\n    title?: ReactNode;\n    description?: ReactNode;\n    titleExtra?: ReactNode;\n    tags?: PageTag[];\n    noPadding?: boolean;\n    noContentPadding?: boolean;\n}\n\nconst getTagNodes = (key: number | string): Readonly<Record<PageTag, ReactNode>> => ({\n    [PageTag.WIP]: (\n        <Tag color=\"blue\" icon={<ClockCircleOutlined />} key={key}>\n            Work In Progress\n        </Tag>\n    ),\n    [PageTag.NOT_WORKING]: (\n        <Tag color=\"red\" icon={<WarningOutlined />} key={key}>\n            Not Working\n        </Tag>\n    )\n});\n\nconst renderTag = (tag: PageTag, index: number) => getTagNodes(index)[tag];\n\nconst PageContainer = React.forwardRef<HTMLDivElement, PageContainerProps>((props, ref) => {\n    const {\n        title,\n        description,\n        titleExtra,\n        tags,\n        noPadding,\n        noContentPadding,\n        children,\n        className,\n        contentClassName,\n        ...restProps\n    } = props;\n\n    const renderedTags = useMemo(() => tags?.map(renderTag), [tags]);\n\n    return (\n        <div\n            ref={ref}\n            className={classNames(\n                styles.container,\n                {\n                    [styles.noPadding]: noPadding,\n                    [styles.noContentPadding]: noContentPadding\n                },\n                className\n            )}\n            {...restProps}\n        >\n            {tags?.length && <div>{renderedTags}</div>}\n            {title && (\n                <Space direction=\"horizontal\" size=\"middle\" className={styles.headingContainer}>\n                    <h1 className=\"mb-0\">{title}</h1>\n                    {titleExtra}\n                </Space>\n            )}\n            {description && <Paragraph className=\"mb-2\">{description}</Paragraph>}\n\n            <div className={classNames(styles.contentContainer, contentClassName)}>{children}</div>\n        </div>\n    );\n});\n\nexport default PageContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PageContainer_container__KmrZF\",\"noPadding\":\"PageContainer_noPadding__74Oon\",\"noContentPadding\":\"PageContainer_noContentPadding__rSQgs\",\"headingContainer\":\"PageContainer_headingContainer__ScW-F\",\"contentContainer\":\"PageContainer_contentContainer__l-gCb\"};","enum HttpMethod {\n    GET = 'GET',\n    POST = 'POST',\n    PUT = 'PUT',\n    DELETE = 'DELETE',\n    HEAD = 'HEAD',\n    OPTIONS = 'OPTIONS',\n    PATCH = 'PATCH',\n    CONNECT = 'CONNECT',\n    TRACE = 'TRACE',\n    PURGE = 'PURGE',\n    LINK = 'LINK',\n    UNLINK = 'UNLINK'\n}\n\nexport default HttpMethod;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"HttpClientPage_container__ELgue\",\"content\":\"HttpClientPage_content__BOaRf\",\"requestContainer\":\"HttpClientPage_requestContainer__Gjxq-\",\"requestMain\":\"HttpClientPage_requestMain__Af0PA\",\"requestMethodSelect\":\"HttpClientPage_requestMethodSelect__qfu3q\",\"responseContainer\":\"HttpClientPage_responseContainer__ij243\",\"responseLoading\":\"HttpClientPage_responseLoading__uP5HU\",\"responseBodyText\":\"HttpClientPage_responseBodyText__bnhhJ\"};","import React, { FunctionComponent, useCallback, useEffect, useRef } from 'react';\nimport PageContainer, { PageTag } from '../../layouts/pages/pageContainer/PageContainer';\nimport styles from './HttpClientPage.module.scss';\nimport Flex from '../../components/flex/Flex';\nimport { Select, Spin } from 'antd';\nimport HttpMethod from './types/HttpMethod';\nimport { identity, values } from 'lodash';\nimport Search from 'antd/lib/input/Search';\nimport useWriteableLocalstorageState from '../../hooks/useWriteableLocalstorageState';\nimport getLocalStorageKey from '../../utils/getLocalStorageKey';\nimport HttpRequest from './types/HttpRequest';\nimport useChangeStateHandler from '../../hooks/useChangeStateHandler';\nimport Split from 'react-split';\nimport classNames from 'classnames';\nimport AppEditor from '../../components/appEditor/AppEditor';\nimport axios, { AxiosResponse, Method } from 'axios';\nimport useAsync from '../../hooks/useAsync';\nimport logged from '../../utils/logged';\nimport getResponseLanguage from './utils/getResponseLanguage';\nimport MonacoLanguage from '../../types/MonacoLanguage';\nimport { OnMount } from '@monaco-editor/react';\nimport { editor } from 'monaco-editor';\nimport processRef from '../../utils/processRef';\n\nconst { Option } = Select;\n\nenum RequestTab {\n    PARAMS = 'PARAMS',\n    HEADERS = 'HEADERS',\n    BODY = 'BODY'\n}\n\nenum ResponseTab {\n    BODY = 'BODY',\n    HEADERS = 'HEADERS',\n    COOKIES = 'COOKIES',\n    RAW = 'RAW'\n}\n\nconst HttpClientPage: FunctionComponent = () => {\n    const [request, setRequest] = useWriteableLocalstorageState<HttpRequest>(\n        getLocalStorageKey('http-client', 'request'),\n        {\n            method: HttpMethod.GET,\n            url: ''\n        }\n    );\n    const handleRequestChange = useChangeStateHandler(setRequest);\n\n    const responseEditorRef = useRef<editor.IStandaloneCodeEditor>();\n\n    const sendRequest = useCallback(async (): Promise<AxiosResponse<string, unknown>> => {\n        return logged(\n            axios.request<string>({\n                method: request.method as unknown as Method,\n                url: request.url,\n                transformResponse: identity\n            })\n        );\n    }, [request]);\n\n    const {\n        invoke: handleRequestSend,\n        result: response,\n        isLoading: isFetching,\n        error: fetchingError\n    } = useAsync(sendRequest);\n\n    useEffect(() => {\n        setTimeout(() => {\n            processRef(responseEditorRef, async (responseEditor) => {\n                await responseEditor.getAction('editor.action.formatDocument').run();\n                responseEditor.revealLine(0, editor.ScrollType.Immediate);\n            });\n        }, 50);\n    }, [response]);\n\n    const handleResponseEditorMount = useCallback<OnMount>((editor) => {\n        responseEditorRef.current = editor;\n    }, []);\n\n    // const handleRequestSend = useCallback(async () => {\n    //     setIsFetching(true);\n    //     try {\n    //         const response = await axios.request<string>({\n    //             method: request.method as unknown as Method,\n    //             transformResponse: identity\n    //         });\n    //         setResponse(response);\n    //     } catch (error) {\n    //\n    //     } finally {\n    //         setIsFetching(false);\n    //     }\n    // }, [request]);\n\n    return (\n        <PageContainer\n            className={styles.container}\n            tags={[PageTag.WIP]}\n            contentClassName={styles.container}\n            noContentPadding\n        >\n            <Split className={classNames('app-split', styles.content)} direction=\"vertical\" minSize={50} snapOffset={0}>\n                <Flex col className={styles.requestContainer}>\n                    <Search\n                        className={styles.requestMain}\n                        placeholder=\"Enter request URL\"\n                        addonBefore={\n                            <Select\n                                value={request.method}\n                                onChange={handleRequestChange('method')}\n                                className={styles.requestMethodSelect}\n                            >\n                                {values(HttpMethod).map((method) => (\n                                    <Option key={method} value={method}>\n                                        {method}\n                                    </Option>\n                                ))}\n                            </Select>\n                        }\n                        enterButton=\"Send\"\n                        onSearch={handleRequestSend}\n                        value={request.url}\n                        onChange={handleRequestChange('url')}\n                    />\n                </Flex>\n                <Flex col className={styles.responseContainer}>\n                    <Spin spinning={isFetching} className={styles.responseLoading}>\n                        <AppEditor\n                            onMount={handleResponseEditorMount}\n                            beforeMount={console.log}\n                            language={response && (getResponseLanguage(response) as MonacoLanguage)}\n                            value={response?.data ?? ''}\n                            options={{ readOnly: false }}\n                            className={styles.responseBodyText}\n                        />\n                    </Spin>\n                </Flex>\n            </Split>\n        </PageContainer>\n    );\n};\n\nexport default HttpClientPage;\n","/** @deprecated do not commit */\nconst logged = <T>(value: T, logFn: (message?: any, ...optionalParams: any[]) => void = console.log): T => {\n    logFn(value);\n    return value;\n};\n\nexport default logged;\n","import { AxiosResponse } from 'axios';\n\nconst getResponseContentType = (response: AxiosResponse): string | undefined => {\n    return response.headers['content-type']?.split('; ')[0];\n};\n\nexport default getResponseContentType;\n","import { AxiosResponse } from 'axios';\nimport Switch from '../../../utils/Switch';\nimport MonacoLanguage from '../../../types/MonacoLanguage';\nimport getResponseContentType from './getResponseContentType';\n\nconst getResponseLanguage = (response: AxiosResponse): MonacoLanguage => {\n    const contentType = getResponseContentType(response);\n\n    if (!contentType) {\n        return 'plaintext';\n    }\n\n    if (contentType.startsWith('xml/')) {\n        return 'xml';\n    }\n\n    return Switch.of(contentType)\n        .onCases<MonacoLanguage>(['text/plain'], () => 'plaintext')\n        .onCases<MonacoLanguage>(['text/xml'], () => 'xml')\n        .onCases<MonacoLanguage>(['text/xml', 'application/json'], () => 'json')\n        .onCases<MonacoLanguage>(['text/html'], () => 'html')\n        .onCases<MonacoLanguage>(['text/css'], () => 'css')\n        .onCases<MonacoLanguage>(['application/javascript', 'text/javascript'], () => 'javascript')\n        .onDefault<MonacoLanguage>(() => 'plaintext');\n};\n\nexport default getResponseLanguage;\n","class Switch<T, V = never> {\n    constructor(private readonly object: T) {}\n\n    static of<T>(object: T) {\n        return new Switch(object);\n    }\n\n    private readonly conditions = new Map<T, () => unknown>();\n    private defaultValue: { current: () => unknown } | undefined = undefined;\n\n    onCase<R>(possibleValue: T, result: () => R): Switch<T, V | R> {\n        if (!this.conditions.has(possibleValue)) {\n            this.conditions.set(possibleValue, result);\n        }\n\n        return this;\n    }\n\n    onCases<R>(possibleValues: T[], result: () => R): Switch<T, V | R> {\n        possibleValues.forEach((value) => this.onCase(value, result));\n        return this;\n    }\n\n    onDefault<R>(result: () => R): V | R {\n        if (this.defaultValue === undefined) {\n            this.defaultValue = { current: result };\n        }\n\n        return this.value();\n    }\n\n    value(): V {\n        const conditionValues = Array.from(this.conditions.entries());\n        for (const [condition, result] of conditionValues) {\n            if (condition === this.object) {\n                return result() as V;\n            }\n        }\n\n        return this.defaultValue?.current() as V;\n    }\n}\n\nexport default Switch;\n","const getLocalStorageKey = (scope: string, name: string): string => {\n    return `mrgrd56:${scope}/${name}`;\n};\n\nexport const NULL_LOCALSTORAGE_KEY = getLocalStorageKey('global', 'null');\n\nexport default getLocalStorageKey;\n","import { MutableRefObject, RefObject } from 'react';\nimport { isNil } from 'lodash';\nimport NonNil from '../types/common/NonNil';\nimport Nil from '../types/common/Nil';\n\ntype AnyRefObject<T> = RefObject<T> | MutableRefObject<T>;\n\ntype ExtractRefType<R extends AnyRefObject<unknown>> = R extends AnyRefObject<infer T> ? T : never;\n\nfunction processRef<R extends MutableRefObject<unknown>, V1>(\n    ref: R,\n    handler: (value: NonNil<ExtractRefType<R>>) => V1\n): V1 | undefined;\nfunction processRef<R extends MutableRefObject<unknown>, V1, V2>(\n    ref: R,\n    handler: (value: NonNil<ExtractRefType<R>>) => V1,\n    nilHandler: (value: Extract<ExtractRefType<R>, Nil>) => V2\n): V1 | V2;\nfunction processRef<R extends MutableRefObject<unknown>, V1, V2>(\n    ref: R,\n    handler: (value: NonNil<ExtractRefType<R>>) => V1,\n    nilHandler?: (value: Extract<ExtractRefType<R>, Nil>) => V2\n): V1 | V2 | undefined {\n    if (isNil(ref.current)) {\n        if (!nilHandler) {\n            return undefined;\n        }\n\n        return nilHandler(ref.current as Extract<ExtractRefType<R>, Nil>);\n    }\n\n    return handler(ref.current as NonNil<ExtractRefType<R>>);\n}\n\nexport default processRef;\n\n// TRASH\n\n// type RefsToValues<Refs extends Array<MutableRefObject<any>>> =\n//     Refs extends [infer RefType, ...infer RestRefTypes]\n//         ? RefType extends MutableRefObject<infer Type>\n//             ? RestRefTypes extends Array<MutableRefObject<any>>\n//                 ? [NotNil<Type>, ...RefsToValues<RestRefTypes>]\n//                 : [1]\n//             : [2]\n//         : [];\n\n// type TestA = RefsToValues<[MutableRefObject<number | undefined>]>;\n\n// const handleRefs = <Refs extends Array<MutableRefObject<any>>>(refs: Refs, handler: (values: RefsToValues<Refs>) => void): void => {\n//     const values = [];\n//     for (const ref of refs) {\n//         if (isNil(ref.current)) {\n//             return;\n//         }\n//\n//         values.push(ref.current);\n//     }\n//\n//     handler(values as RefsToValues<Refs>);\n// };\n\n// type UndefinedLike = undefined | void | never;\n\n// type Voidy<T extends unknown | UndefinedLike> =\n//     Extract<T, UndefinedLike> extends never\n//         ? never\n//         : T;\n// T extends infer V | UndefinedLike\n//     ? V extends UndefinedLike\n//         ? never\n//         : T\n//     : never;\n\n// type Simplify<T> =\n//     T extends infer T1 | void | undefined\n//         ? T1 extends never\n//             ? T\n//             : Exclude<T, void> | undefined\n//         : T;\n// T extends undefined\n//     ? T extends void\n//         ? T extends void & undefined\n//             ? Exclude<T, void> | undefined\n//         : 2\n//     : 3\n// : 4;\n// T extends infer R | undefined | void\n//     ? R | undefined\n//     : T extends infer R | undefined\n//         ? R extends never\n//             ? void\n//         : T\n//     : T;\n"],"names":["loadingNode","size","defaultOptions","minimap","enabled","className","loading","theme","onChange","options","props","isDarkMode","useAppTheme","editorOptions","useMemo","handleChange","useCallback","value","ev","classNames","promiseFn","params","onSuccess","onError","onComplete","onLoadingChange","onErrorChange","initialResult","initialIsLoading","initialError","doInvokeOnMount","useState","result","setResult","isLoading","setIsLoading","error","setError","changeResult","changeLoading","changeError","invoke","undefined","isFunction","useEffect","isChangeEvent","isObject","setState","property","actualValue","call","target","key","state","changeState","useChangeState","initialState","useLocalstorageState","lsState","setLsState","resetLsState","PageTag","getTagNodes","WIP","color","icon","ClockCircleOutlined","NOT_WORKING","WarningOutlined","renderTag","tag","index","React","ref","title","description","titleExtra","tags","noPadding","noContentPadding","children","contentClassName","restProps","renderedTags","map","styles","length","direction","Paragraph","HttpMethod","RequestTab","ResponseTab","logFn","console","log","response","headers","split","contentType","getResponseContentType","startsWith","Switch","onCases","onDefault","Option","Select","useWriteableLocalstorageState","getLocalStorageKey","method","url","request","setRequest","handleRequestChange","useChangeStateHandler","responseEditorRef","useRef","sendRequest","logged","axios","transformResponse","identity","useAsync","handleRequestSend","isFetching","setTimeout","processRef","responseEditor","getAction","run","revealLine","editor","handleResponseEditorMount","current","PageContainer","minSize","snapOffset","Flex","col","Search","placeholder","addonBefore","values","enterButton","onSearch","spinning","AppEditor","onMount","beforeMount","language","getResponseLanguage","data","readOnly","object","conditions","Map","defaultValue","possibleValue","this","has","set","possibleValues","forEach","onCase","Array","from","entries","condition","scope","name","NULL_LOCALSTORAGE_KEY","handler","nilHandler","isNil"],"sourceRoot":""}