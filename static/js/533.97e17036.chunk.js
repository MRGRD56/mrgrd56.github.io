"use strict";(self.webpackChunkmrgrd56_github_io=self.webpackChunkmrgrd56_github_io||[]).push([[533],{42533:function(n,e,r){r.r(e),e.default='import _ = require("../index");\ndeclare module "../index" {\n    // clamp\n    interface LoDashStatic {\n        /**\n         * Clamps `number` within the inclusive `lower` and `upper` bounds.\n         *\n         * @category Number\n         * @param number The number to clamp.\n         * @param [lower] The lower bound.\n         * @param upper The upper bound.\n         * @returns Returns the clamped number.\n         * @example\n         *\n         * _.clamp(-10, -5, 5);\n         * // => -5\n         *\n         * _.clamp(10, -5, 5);\n         * // => 5\n         * Clamps `number` within the inclusive `lower` and `upper` bounds.\n         *\n         * @category Number\n         * @param number The number to clamp.\n         * @param [lower] The lower bound.\n         * @param upper The upper bound.\n         * @returns Returns the clamped number.\n         * @example\n         *\n         * _.clamp(-10, -5, 5);\n         * // => -5\n         *\n         * _.clamp(10, -5, 5);\n         */\n        clamp(number: number, lower: number, upper: number): number;\n        /**\n         * @see _.clamp\n         */\n        clamp(number: number, upper: number): number;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.clamp\n         */\n        clamp(lower: number, upper: number): number;\n        /**\n         * @see _.clamp\n         */\n        clamp(upper: number): number;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.clamp\n         */\n        clamp(lower: number, upper: number): PrimitiveChain<number>;\n        /**\n         * @see _.clamp\n         */\n        clamp(upper: number): PrimitiveChain<number>;\n    }\n    // inRange\n    interface LoDashStatic {\n        /**\n         * Checks if n is between start and up to but not including, end. If end is not specified it\u2019s set to start\n         * with start then set to 0.\n         *\n         * @param n The number to check.\n         * @param start The start of the range.\n         * @param end The end of the range.\n         * @return Returns true if n is in the range, else false.\n         */\n        inRange(n: number, start: number, end?: number): boolean;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.inRange\n         */\n        inRange(start: number, end?: number): boolean;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.inRange\n         */\n        inRange(start: number, end?: number): PrimitiveChain<boolean>;\n    }\n    // random\n    interface LoDashStatic {\n        /**\n         * Produces a random number between min and max (inclusive). If only one argument is provided a number between\n         * 0 and the given number is returned. If floating is true, or either min or max are floats, a floating-point\n         * number is returned instead of an integer.\n         *\n         * @param min The minimum possible value.\n         * @param max The maximum possible value.\n         * @param floating Specify returning a floating-point number.\n         * @return Returns the random number.\n         */\n        random(floating?: boolean): number;\n        /**\n         * @see _.random\n         */\n        random(max: number, floating?: boolean): number;\n        /**\n         * @see _.random\n         */\n        random(min: number, max: number, floating?: boolean): number;\n        /**\n         * @see _.random\n         */\n        random(min: number, index: string | number, guard: object): number;\n    }\n    interface LoDashImplicitWrapper<TValue> {\n        /**\n         * @see _.random\n         */\n        random(floating?: boolean): number;\n        /**\n         * @see _.random\n         */\n        random(max: number, floating?: boolean): number;\n    }\n    interface LoDashExplicitWrapper<TValue> {\n        /**\n         * @see _.random\n         */\n        random(floating?: boolean): PrimitiveChain<number>;\n        /**\n         * @see _.random\n         */\n        random(max: number, floating?: boolean): PrimitiveChain<number>;\n    }\n}\n'}}]);
//# sourceMappingURL=533.97e17036.chunk.js.map