{"version":3,"file":"static/js/6654.963f8da9.chunk.js","mappings":"oIAAA","sources":["../node_modules/@types/lodash/common/lang.d.ts"],"sourcesContent":["export default \"import _ = require(\\\"../index\\\");\\n// tslint:disable-next-line:strict-export-declare-modifiers\\ntype GlobalFunction = Function;\\ndeclare module \\\"../index\\\" {\\n    type FunctionBase = GlobalFunction;\\n    interface LoDashStatic {\\n        /**\\n         * Casts value as an array if itâ€™s not one.\\n         *\\n         * @param value The value to inspect.\\n         * @return Returns the cast array.\\n         */\\n        castArray<T>(value?: Many<T>): T[];\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.castArray\\n         */\\n        castArray(): Collection<T>;\\n    }\\n    interface String {\\n        /**\\n         * @see _.castArray\\n         */\\n        castArray(): Collection<string>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.castArray\\n         */\\n        castArray(): Collection<T>;\\n    }\\n    interface Function<T extends (...args: any) => any> {\\n        /**\\n         * @see _.castArray\\n         */\\n        castArray(): Collection<T>;\\n    }\\n    interface Primitive<T> {\\n        /**\\n         * @see _.castArray\\n         */\\n        castArray(): Collection<T>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.castArray\\n         */\\n        castArray(): CollectionChain<T>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.castArray\\n         */\\n        castArray(): CollectionChain<string>;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.castArray\\n         */\\n        castArray(): CollectionChain<string | undefined>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.castArray\\n         */\\n        castArray(): CollectionChain<T>;\\n    }\\n    interface FunctionChain<T extends (...args: any) => any> {\\n        /**\\n         * @see _.castArray\\n         */\\n        castArray(): CollectionChain<T>;\\n    }\\n    interface PrimitiveChain<T> {\\n        /**\\n         * @see _.castArray\\n         */\\n        castArray(): CollectionChain<T>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Creates a shallow clone of value.\\n         *\\n         * Note: This method is loosely based on the structured clone algorithm and supports cloning arrays,\\n         * array buffers, booleans, date objects, maps, numbers, Object objects, regexes, sets, strings, symbols,\\n         * and typed arrays. The own enumerable properties of arguments objects are cloned as plain objects. An empty\\n         * object is returned for uncloneable values such as error objects, functions, DOM nodes, and WeakMaps.\\n         *\\n         * @param value The value to clone.\\n         * @return Returns the cloned value.\\n         */\\n        clone<T>(value: T): T;\\n    }\\n\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.clone\\n         */\\n        clone(): TValue;\\n        /**\\n         * @see _.cloneDeep\\n         */\\n        cloneDeep(): TValue;\\n        /**\\n         * @see _.cloneDeepWith\\n         */\\n        cloneDeepWith(customizer: CloneDeepWithCustomizer<TValue>): any;\\n        /**\\n         * @see _.cloneDeepWith\\n         */\\n        cloneDeepWith(): TValue;\\n        /**\\n         * @see _.cloneWith\\n         */\\n        cloneWith<TResult extends object | string | number | boolean | null>(customizer: CloneWithCustomizer<TValue, TResult>): TResult;\\n        /**\\n         * @see _.cloneWith\\n         */\\n        cloneWith<TResult>(customizer: CloneWithCustomizer<TValue, TResult | undefined>): TResult | TValue;\\n        /**\\n         * @see _.cloneWith\\n         */\\n        cloneWith(): TValue;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.clone\\n         */\\n        clone(): this;\\n        /**\\n         * @see _.cloneDeep\\n         */\\n        cloneDeep(): this;\\n        /**\\n         * @see _.cloneDeepWith\\n         */\\n        cloneDeepWith(customizer: CloneDeepWithCustomizer<TValue>): LoDashExplicitWrapper<any>;\\n        /**\\n         * @see _.cloneDeepWith\\n         */\\n        cloneDeepWith(): this;\\n        /**\\n         * @see _.cloneWith\\n         */\\n        cloneWith<TResult extends object | string | number | boolean | null>(customizer: CloneWithCustomizer<TValue, TResult>): ExpChain<TResult>;\\n        /**\\n         * @see _.cloneWith\\n         */\\n        cloneWith<TResult>(customizer: CloneWithCustomizer<TValue, TResult | undefined>): ExpChain<TResult | TValue>;\\n        /**\\n         * @see _.cloneWith\\n         */\\n        cloneWith(): this;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * This method is like _.clone except that it recursively clones value.\\n         *\\n         * @param value The value to recursively clone.\\n         * @return Returns the deep cloned value.\\n         */\\n        cloneDeep<T>(value: T): T;\\n    }\\n    type CloneDeepWithCustomizer<TObject> = (value: any, key: number | string | undefined, object: TObject | undefined, stack: any) => any;\\n    interface LoDashStatic {\\n        /**\\n         * This method is like _.cloneWith except that it recursively clones value.\\n         *\\n         * @param value The value to recursively clone.\\n         * @param customizer The function to customize cloning.\\n         * @return Returns the deep cloned value.\\n         */\\n        cloneDeepWith<T>(value: T, customizer: CloneDeepWithCustomizer<T>): any;\\n        /**\\n         * @see _.cloneDeepWith\\n         */\\n        cloneDeepWith<T>(value: T): T;\\n    }\\n    type CloneWithCustomizer<TValue, TResult> = (value: TValue, key: number | string | undefined, object: any, stack: any) => TResult;\\n    interface LoDashStatic {\\n        /**\\n         * This method is like _.clone except that it accepts customizer which is invoked to produce the cloned value.\\n         * If customizer returns undefined cloning is handled by the method instead.\\n         *\\n         * @param value The value to clone.\\n         * @param customizer The function to customize cloning.\\n         * @return Returns the cloned value.\\n         */\\n        cloneWith<T, TResult extends object | string | number | boolean | null>(value: T, customizer: CloneWithCustomizer<T, TResult>): TResult;\\n        /**\\n         * @see _.cloneWith\\n         */\\n        cloneWith<T, TResult>(value: T, customizer: CloneWithCustomizer<T, TResult | undefined>): TResult | T;\\n        /**\\n         * @see _.cloneWith\\n         */\\n        cloneWith<T>(value: T): T;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Checks if object conforms to source by invoking the predicate properties of source with the\\n         * corresponding property values of object.\\n         *\\n         * Note: This method is equivalent to _.conforms when source is partially applied.\\n         */\\n        conformsTo<T>(object: T, source: ConformsPredicateObject<T>): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.conformsTo\\n         */\\n        conformsTo(source: ConformsPredicateObject<TValue>): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.conformsTo\\n         */\\n        conformsTo(source: ConformsPredicateObject<TValue>): PrimitiveChain<boolean>;\\n    }\\n    type CondPairNullary<R> = [() => boolean, () => R];\\n    type CondPairUnary<T, R> = [(val: T) => boolean, (val: T) => R];\\n    interface LoDashStatic {\\n        /**\\n         * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\\n         * comparison between two values to determine if they are equivalent.\\n         *\\n         * @category Lang\\n         * @param value The value to compare.\\n         * @param other The other value to compare.\\n         * @returns Returns `true` if the values are equivalent, else `false`.\\n         * @example\\n         *\\n         * var object = { 'user': 'fred' };\\n         * var other = { 'user': 'fred' };\\n         *\\n         * _.eq(object, object);\\n         * // => true\\n         *\\n         * _.eq(object, other);\\n         * // => false\\n         *\\n         * _.eq('a', 'a');\\n         * // => true\\n         *\\n         * _.eq('a', Object('a'));\\n         * // => false\\n         *\\n         * _.eq(NaN, NaN);\\n         * // => true\\n         */\\n        eq(value: any, other: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.eq\\n         */\\n        eq(other: any): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.eq\\n         */\\n        eq(other: any): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is greater than other.\\n         *\\n         * @param value The value to compare.\\n         * @param other The other value to compare.\\n         * @return Returns true if value is greater than other, else false.\\n         */\\n        gt(value: any, other: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.gt\\n         */\\n        gt(other: any): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.gt\\n         */\\n        gt(other: any): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is greater than or equal to other.\\n         *\\n         * @param value The value to compare.\\n         * @param other The other value to compare.\\n         * @return Returns true if value is greater than or equal to other, else false.\\n         */\\n        gte(value: any, other: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.gte\\n         */\\n        gte(other: any): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.gte\\n         */\\n        gte(other: any): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is classified as an arguments object.\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is correctly classified, else false.\\n         */\\n        isArguments(value?: any): value is IArguments;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isArguments\\n         */\\n        isArguments(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isArguments\\n         */\\n        isArguments(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is classified as an Array object.\\n         * @param value The value to check.\\n         *\\n         * @return Returns true if value is correctly classified, else false.\\n         */\\n        isArray(value?: any): value is any[];\\n        /**\\n         * @see _.isArray\\n         */\\n        isArray<T>(value?: any): value is any[];\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isArray\\n         */\\n        isArray(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isArray\\n         */\\n        isArray(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is classified as an ArrayBuffer object.\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is correctly classified, else false.\\n         */\\n        isArrayBuffer(value?: any): value is ArrayBuffer;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isArrayBuffer\\n         */\\n        isArrayBuffer(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isArrayBuffer\\n         */\\n        isArrayBuffer(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if `value` is array-like. A value is considered array-like if it's\\n         * not a function and has a `value.length` that's an integer greater than or\\n         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\\n         *\\n         * @category Lang\\n         * @param value The value to check.\\n         * @returns Returns `true` if `value` is array-like, else `false`.\\n         * @example\\n         *\\n         * _.isArrayLike([1, 2, 3]);\\n         * // => true\\n         *\\n         * _.isArrayLike(document.body.children);\\n         * // => true\\n         *\\n         * _.isArrayLike('abc');\\n         * // => true\\n         *\\n         * _.isArrayLike(_.noop);\\n         * // => false\\n         */\\n        isArrayLike<T extends { __lodashAnyHack: any }>(t: T): boolean;\\n        /**\\n         * @see _.isArrayLike\\n         */\\n        isArrayLike(value: ((...args: any[]) => any) | null | undefined): value is never;\\n        /**\\n         * @see _.isArrayLike\\n         */\\n        isArrayLike(value: any): value is { length: number };\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isArrayLike\\n         */\\n        isArrayLike(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isArrayLike\\n         */\\n        isArrayLike(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * This method is like `_.isArrayLike` except that it also checks if `value`\\n         * is an object.\\n         *\\n         * @category Lang\\n         * @param value The value to check.\\n         * @returns Returns `true` if `value` is an array-like object, else `false`.\\n         * @example\\n         *\\n         * _.isArrayLikeObject([1, 2, 3]);\\n         * // => true\\n         *\\n         * _.isArrayLikeObject(document.body.children);\\n         * // => true\\n         *\\n         * _.isArrayLikeObject('abc');\\n         * // => false\\n         *\\n         * _.isArrayLikeObject(_.noop);\\n         * // => false\\n         */\\n        isArrayLikeObject<T extends { __lodashAnyHack: any }>(value: T): boolean;\\n        /**\\n         * @see _.isArrayLikeObject\\n         */\\n        isArrayLikeObject(value: ((...args: any[]) => any) | FunctionBase | string | boolean | number | null | undefined): value is never;\\n        /**\\n         * @see _.isArrayLikeObject\\n         */\\n        isArrayLikeObject(value: any): value is object & { length: number };\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isArrayLikeObject\\n         */\\n        isArrayLikeObject(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isArrayLikeObject\\n         */\\n        isArrayLikeObject(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is classified as a boolean primitive or object.\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is correctly classified, else false.\\n         */\\n        isBoolean(value?: any): value is boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isBoolean\\n         */\\n        isBoolean(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isBoolean\\n         */\\n        isBoolean(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is a buffer.\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is a buffer, else false.\\n         */\\n        isBuffer(value?: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isBuffer\\n         */\\n        isBuffer(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isBuffer\\n         */\\n        isBuffer(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is classified as a Date object.\\n         * @param value The value to check.\\n         *\\n         * @return Returns true if value is correctly classified, else false.\\n         */\\n        isDate(value?: any): value is Date;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isDate\\n         */\\n        isDate(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isDate\\n         */\\n        isDate(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is a DOM element.\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is a DOM element, else false.\\n         */\\n        isElement(value?: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isElement\\n         */\\n        isElement(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isElement\\n         */\\n        isElement(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is empty. A value is considered empty unless itâ€™s an arguments object, array, string, or\\n         * jQuery-like collection with a length greater than 0 or an object with own enumerable properties.\\n         *\\n         * @param value The value to inspect.\\n         * @return Returns true if value is empty, else false.\\n         */\\n        isEmpty(value?: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isEmpty\\n         */\\n        isEmpty(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isEmpty\\n         */\\n        isEmpty(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Performs a deep comparison between two values to determine if they are\\n         * equivalent.\\n         *\\n         * **Note:** This method supports comparing arrays, array buffers, booleans,\\n         * date objects, error objects, maps, numbers, `Object` objects, regexes,\\n         * sets, strings, symbols, and typed arrays. `Object` objects are compared\\n         * by their own, not inherited, enumerable properties. Functions and DOM\\n         * nodes are **not** supported.\\n         *\\n         * @category Lang\\n         * @param value The value to compare.\\n         * @param other The other value to compare.\\n         * @returns Returns `true` if the values are equivalent, else `false`.\\n         * @example\\n         *\\n         * var object = { 'user': 'fred' };\\n         * var other = { 'user': 'fred' };\\n         *\\n         * _.isEqual(object, other);\\n         * // => true\\n         *\\n         * object === other;\\n         * // => false\\n         */\\n        isEqual(value: any, other: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isEqual\\n         */\\n        isEqual(other: any): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isEqual\\n         */\\n        isEqual(other: any): PrimitiveChain<boolean>;\\n    }\\n\\n    type IsEqualCustomizer = (value: any, other: any, indexOrKey: PropertyName | undefined, parent: any, otherParent: any, stack: any) => boolean | undefined;\\n    interface LoDashStatic {\\n        /**\\n         * This method is like `_.isEqual` except that it accepts `customizer` which is\\n         * invoked to compare values. If `customizer` returns `undefined` comparisons are\\n         * handled by the method instead. The `customizer` is invoked with up to seven arguments:\\n         * (objValue, othValue [, index|key, object, other, stack]).\\n         *\\n         * @category Lang\\n         * @param value The value to compare.\\n         * @param other The other value to compare.\\n         * @param [customizer] The function to customize comparisons.\\n         * @returns Returns `true` if the values are equivalent, else `false`.\\n         * @example\\n         *\\n         * function isGreeting(value) {\\n         *   return /^h(?:i|ello)$/.test(value);\\n         * }\\n         *\\n         * function customizer(objValue, othValue) {\\n         *   if (isGreeting(objValue) && isGreeting(othValue)) {\\n         *     return true;\\n         *   }\\n         * }\\n         *\\n         * var array = ['hello', 'goodbye'];\\n         * var other = ['hi', 'goodbye'];\\n         *\\n         * _.isEqualWith(array, other, customizer);\\n         * // => true\\n         */\\n        isEqualWith(value: any, other: any, customizer?: IsEqualCustomizer): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isEqualWith\\n         */\\n        isEqualWith(other: any, customizer?: IsEqualCustomizer): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isEqualWith\\n         */\\n        isEqualWith(other: any, customizer?: IsEqualCustomizer): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is an Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, or URIError\\n         * object.\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is an error object, else false.\\n         */\\n        isError(value: any): value is Error;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isError\\n         */\\n        isError(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isError\\n         */\\n        isError(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is a finite primitive number.\\n         *\\n         * Note: This method is based on Number.isFinite.\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is a finite number, else false.\\n         */\\n        isFinite(value?: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isFinite\\n         */\\n        isFinite(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isFinite\\n         */\\n        isFinite(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is a callable function.\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is correctly classified, else false.\\n         */\\n        isFunction(value: any): value is (...args: any[]) => any;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isFunction\\n         */\\n        isFunction(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isFunction\\n         */\\n        isFunction(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if `value` is an integer.\\n         *\\n         * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).\\n         *\\n         * @category Lang\\n         * @param value The value to check.\\n         * @returns Returns `true` if `value` is an integer, else `false`.\\n         * @example\\n         *\\n         * _.isInteger(3);\\n         * // => true\\n         *\\n         * _.isInteger(Number.MIN_VALUE);\\n         * // => false\\n         *\\n         * _.isInteger(Infinity);\\n         * // => false\\n         *\\n         * _.isInteger('3');\\n         * // => false\\n         */\\n        isInteger(value?: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isInteger\\n         */\\n        isInteger(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isInteger\\n         */\\n        isInteger(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if `value` is a valid array-like length.\\n         *\\n         * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\\n         *\\n         * @category Lang\\n         * @param value The value to check.\\n         * @returns Returns `true` if `value` is a valid length, else `false`.\\n         * @example\\n         *\\n         * _.isLength(3);\\n         * // => true\\n         *\\n         * _.isLength(Number.MIN_VALUE);\\n         * // => false\\n         *\\n         * _.isLength(Infinity);\\n         * // => false\\n         *\\n         * _.isLength('3');\\n         * // => false\\n         */\\n        isLength(value?: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isLength\\n         */\\n        isLength(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isLength\\n         */\\n        isLength(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is classified as a Map object.\\n         *\\n         * @param value The value to check.\\n         * @returns Returns true if value is correctly classified, else false.\\n         */\\n        isMap(value?: any): value is Map<any, any>;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isMap\\n         */\\n        isMap(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isMap\\n         */\\n        isMap(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Performs a deep comparison between `object` and `source` to determine if\\n         * `object` contains equivalent property values.\\n         *\\n         * **Note:** This method supports comparing the same values as `_.isEqual`.\\n         *\\n         * @category Lang\\n         * @param object The object to inspect.\\n         * @param source The object of property values to match.\\n         * @returns Returns `true` if `object` is a match, else `false`.\\n         * @example\\n         *\\n         * var object = { 'user': 'fred', 'age': 40 };\\n         *\\n         * _.isMatch(object, { 'age': 40 });\\n         * // => true\\n         *\\n         * _.isMatch(object, { 'age': 36 });\\n         * // => false\\n         */\\n        isMatch(object: object, source: object): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isMatch\\n         */\\n        isMatch(source: object): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isMatch\\n         */\\n        isMatch(source: object): PrimitiveChain<boolean>;\\n    }\\n\\n    type isMatchWithCustomizer = (value: any, other: any, indexOrKey: PropertyName, object: object, source: object) => boolean | undefined;\\n    interface LoDashStatic {\\n        /**\\n         * This method is like `_.isMatch` except that it accepts `customizer` which\\n         * is invoked to compare values. If `customizer` returns `undefined` comparisons\\n         * are handled by the method instead. The `customizer` is invoked with three\\n         * arguments: (objValue, srcValue, index|key, object, source).\\n         *\\n         * @category Lang\\n         * @param object The object to inspect.\\n         * @param source The object of property values to match.\\n         * @param [customizer] The function to customize comparisons.\\n         * @returns Returns `true` if `object` is a match, else `false`.\\n         * @example\\n         *\\n         * function isGreeting(value) {\\n         *   return /^h(?:i|ello)$/.test(value);\\n         * }\\n         *\\n         * function customizer(objValue, srcValue) {\\n         *   if (isGreeting(objValue) && isGreeting(srcValue)) {\\n         *     return true;\\n         *   }\\n         * }\\n         *\\n         * var object = { 'greeting': 'hello' };\\n         * var source = { 'greeting': 'hi' };\\n         *\\n         * _.isMatchWith(object, source, customizer);\\n         * // => true\\n         */\\n        isMatchWith(object: object, source: object, customizer: isMatchWithCustomizer): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isMatchWith\\n         */\\n        isMatchWith(source: object, customizer: isMatchWithCustomizer): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isMatchWith\\n         */\\n        isMatchWith(source: object, customizer: isMatchWithCustomizer): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is NaN.\\n         *\\n         * Note: This method is not the same as isNaN which returns true for undefined and other non-numeric values.\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is NaN, else false.\\n         */\\n        isNaN(value?: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isNaN\\n         */\\n        isNaN(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isNaN\\n         */\\n        isNaN(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is a native function.\\n         * @param value The value to check.\\n         *\\n         * @return Returns true if value is a native function, else false.\\n         */\\n        isNative(value: any): value is (...args: any[]) => any;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isNative\\n         */\\n        isNative(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isNative\\n         */\\n        isNative(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if `value` is `null` or `undefined`.\\n         *\\n         * @category Lang\\n         * @param value The value to check.\\n         * @returns Returns `true` if `value` is nullish, else `false`.\\n         * @example\\n         *\\n         * _.isNil(null);\\n         * // => true\\n         *\\n         * _.isNil(void 0);\\n         * // => true\\n         *\\n         * _.isNil(NaN);\\n         * // => false\\n         */\\n        isNil(value: any): value is null | undefined;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isNil\\n         */\\n        isNil(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isNil\\n         */\\n        isNil(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is null.\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is null, else false.\\n         */\\n        isNull(value: any): value is null;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isNull\\n         */\\n        isNull(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isNull\\n         */\\n        isNull(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is classified as a Number primitive or object.\\n         *\\n         * Note: To exclude Infinity, -Infinity, and NaN, which are classified as numbers, use the _.isFinite method.\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is correctly classified, else false.\\n         */\\n        isNumber(value?: any): value is number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isNumber\\n         */\\n        isNumber(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isNumber\\n         */\\n        isNumber(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is the language type of Object. (e.g. arrays, functions, objects, regexes, new Number(0),\\n         * and new String(''))\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is an object, else false.\\n         */\\n        isObject(value?: any): value is object;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isObject\\n         */\\n        isObject(): this is LoDashImplicitWrapper<object>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isObject\\n         */\\n        isObject(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if `value` is object-like. A value is object-like if it's not `null`\\n         * and has a `typeof` result of \\\"object\\\".\\n         *\\n         * @category Lang\\n         * @param value The value to check.\\n         * @returns Returns `true` if `value` is object-like, else `false`.\\n         * @example\\n         *\\n         * _.isObjectLike({});\\n         * // => true\\n         *\\n         * _.isObjectLike([1, 2, 3]);\\n         * // => true\\n         *\\n         * _.isObjectLike(_.noop);\\n         * // => false\\n         *\\n         * _.isObjectLike(null);\\n         * // => false\\n         */\\n        isObjectLike(value?: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isObjectLike\\n         */\\n        isObjectLike(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isObjectLike\\n         */\\n        isObjectLike(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is a plain object, that is, an object created by the Object constructor or one with a\\n         * [[Prototype]] of null.\\n         *\\n         * Note: This method assumes objects created by the Object constructor have no inherited enumerable properties.\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is a plain object, else false.\\n         */\\n        isPlainObject(value?: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isPlainObject\\n         */\\n        isPlainObject(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isPlainObject\\n         */\\n        isPlainObject(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is classified as a RegExp object.\\n         * @param value The value to check.\\n         *\\n         * @return Returns true if value is correctly classified, else false.\\n         */\\n        isRegExp(value?: any): value is RegExp;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isRegExp\\n         */\\n        isRegExp(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isRegExp\\n         */\\n        isRegExp(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\\n         * double precision number which isn't the result of a rounded unsafe integer.\\n         *\\n         * **Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\\n         *\\n         * @category Lang\\n         * @param value The value to check.\\n         * @returns Returns `true` if `value` is a safe integer, else `false`.\\n         * @example\\n         *\\n         * _.isSafeInteger(3);\\n         * // => true\\n         *\\n         * _.isSafeInteger(Number.MIN_VALUE);\\n         * // => false\\n         *\\n         * _.isSafeInteger(Infinity);\\n         * // => false\\n         *\\n         * _.isSafeInteger('3');\\n         * // => false\\n         */\\n        isSafeInteger(value: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isSafeInteger\\n         */\\n        isSafeInteger(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isSafeInteger\\n         */\\n        isSafeInteger(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is classified as a Set object.\\n         *\\n         * @param value The value to check.\\n         * @returns Returns true if value is correctly classified, else false.\\n         */\\n        isSet(value?: any): value is Set<any>;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isSet\\n         */\\n        isSet(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isSet\\n         */\\n        isSet(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is classified as a String primitive or object.\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is correctly classified, else false.\\n         */\\n        isString(value?: any): value is string;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isString\\n         */\\n        isString(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isString\\n         */\\n        isString(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if `value` is classified as a `Symbol` primitive or object.\\n         *\\n         * @category Lang\\n         * @param value The value to check.\\n         * @returns Returns `true` if `value` is correctly classified, else `false`.\\n         * @example\\n         *\\n         * _.isSymbol(Symbol.iterator);\\n         * // => true\\n         *\\n         * _.isSymbol('abc');\\n         * // => false\\n         */\\n        isSymbol(value: any): value is symbol;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isSymbol\\n         */\\n        isSymbol(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isSymbol\\n         */\\n        isSymbol(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is classified as a typed array.\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is correctly classified, else false.\\n         */\\n        isTypedArray(value: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isTypedArray\\n         */\\n        isTypedArray(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isTypedArray\\n         */\\n        isTypedArray(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is undefined.\\n         *\\n         * @param value The value to check.\\n         * @return Returns true if value is undefined, else false.\\n         */\\n        isUndefined(value: any): value is undefined;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isUndefined\\n         */\\n        isUndefined(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isUndefined\\n         */\\n        isUndefined(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is classified as a WeakMap object.\\n         *\\n         * @param value The value to check.\\n         * @returns Returns true if value is correctly classified, else false.\\n         */\\n        isWeakMap(value?: any): value is WeakMap<object, any>;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isWeakMap\\n         */\\n        isWeakMap(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isWeakMap\\n         */\\n        isWeakMap(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is classified as a WeakSet object.\\n         *\\n         * @param value The value to check.\\n         * @returns Returns true if value is correctly classified, else false.\\n         */\\n        isWeakSet(value?: any): value is WeakSet<object>;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.isWeakSet\\n         */\\n        isWeakSet(): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.isWeakSet\\n         */\\n        isWeakSet(): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is less than other.\\n         *\\n         * @param value The value to compare.\\n         * @param other The other value to compare.\\n         * @return Returns true if value is less than other, else false.\\n         */\\n        lt(value: any, other: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.lt\\n         */\\n        lt(other: any): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.lt\\n         */\\n        lt(other: any): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Checks if value is less than or equal to other.\\n         *\\n         * @param value The value to compare.\\n         * @param other The other value to compare.\\n         * @return Returns true if value is less than or equal to other, else false.\\n         */\\n        lte(value: any, other: any): boolean;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.lte\\n         */\\n        lte(other: any): boolean;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.lte\\n         */\\n        lte(other: any): PrimitiveChain<boolean>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Converts value to an array.\\n         *\\n         * @param value The value to convert.\\n         * @return Returns the converted array.\\n         */\\n        toArray<T>(value:  Dictionary<T> | NumericDictionary<T> | null | undefined): T[];\\n        /**\\n         * @see _.toArray\\n         */\\n        toArray<T>(value: T): Array<T[keyof T]>;\\n        /**\\n         * @see _.toArray\\n         */\\n        toArray(): any[];\\n    }\\n    interface String {\\n        /**\\n         * @see _.toArray\\n         */\\n        toArray(): Collection<string>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.toArray\\n         */\\n        toArray(): Collection<T>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.toArray\\n         */\\n        toArray(): Collection<T[keyof T]>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.toArray\\n         */\\n        toArray(): CollectionChain<string>;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.toArray\\n         */\\n        toArray(): CollectionChain<string>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.toArray\\n         */\\n        toArray(): CollectionChain<T>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.toArray\\n         */\\n        toArray(): CollectionChain<T[keyof T]>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Converts `value` to a finite number.\\n         *\\n         * @since 4.12.0\\n         * @category Lang\\n         * @param value The value to convert.\\n         * @returns Returns the converted number.\\n         * @example\\n         *\\n         * _.toFinite(3.2);\\n         * // => 3.2\\n         *\\n         * _.toFinite(Number.MIN_VALUE);\\n         * // => 5e-324\\n         *\\n         * _.toFinite(Infinity);\\n         * // => 1.7976931348623157e+308\\n         *\\n         * _.toFinite('3.2');\\n         * // => 3.2\\n         */\\n        toFinite(value: any): number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.toFinite\\n         */\\n        toFinite(): number;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.toFinite\\n         */\\n        toFinite(): PrimitiveChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Converts `value` to an integer.\\n         *\\n         * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\\n         *\\n         * @category Lang\\n         * @param value The value to convert.\\n         * @returns Returns the converted integer.\\n         * @example\\n         *\\n         * _.toInteger(3);\\n         * // => 3\\n         *\\n         * _.toInteger(Number.MIN_VALUE);\\n         * // => 0\\n         *\\n         * _.toInteger(Infinity);\\n         * // => 1.7976931348623157e+308\\n         *\\n         * _.toInteger('3');\\n         * // => 3\\n         */\\n        toInteger(value: any): number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.toInteger\\n         */\\n        toInteger(): number;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.toInteger\\n         */\\n        toInteger(): PrimitiveChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Converts `value` to an integer suitable for use as the length of an\\n         * array-like object.\\n         *\\n         * **Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\\n         *\\n         * @category Lang\\n         * @param value The value to convert.\\n         * @return Returns the converted integer.\\n         * @example\\n         *\\n         * _.toLength(3);\\n         * // => 3\\n         *\\n         * _.toLength(Number.MIN_VALUE);\\n         * // => 0\\n         *\\n         * _.toLength(Infinity);\\n         * // => 4294967295\\n         *\\n         * _.toLength('3');\\n         * // => 3\\n         */\\n        toLength(value: any): number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.toLength\\n         */\\n        toLength(): number;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.toLength\\n         */\\n        toLength(): PrimitiveChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Converts `value` to a number.\\n         *\\n         * @category Lang\\n         * @param value The value to process.\\n         * @returns Returns the number.\\n         * @example\\n         *\\n         * _.toNumber(3);\\n         * // => 3\\n         *\\n         * _.toNumber(Number.MIN_VALUE);\\n         * // => 5e-324\\n         *\\n         * _.toNumber(Infinity);\\n         * // => Infinity\\n         *\\n         * _.toNumber('3');\\n         * // => 3\\n         */\\n        toNumber(value: any): number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.toNumber\\n         */\\n        toNumber(): number;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.toNumber\\n         */\\n        toNumber(): PrimitiveChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Converts value to a plain object flattening inherited enumerable properties of value to own properties\\n         * of the plain object.\\n         *\\n         * @param value The value to convert.\\n         * @return Returns the converted plain object.\\n         */\\n        toPlainObject(value?: any): any;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.toPlainObject\\n         */\\n        toPlainObject(): Object<any>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.toPlainObject\\n         */\\n        toPlainObject(): ObjectChain<any>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Converts `value` to a safe integer. A safe integer can be compared and\\n         * represented correctly.\\n         *\\n         * @category Lang\\n         * @param value The value to convert.\\n         * @returns Returns the converted integer.\\n         * @example\\n         *\\n         * _.toSafeInteger(3);\\n         * // => 3\\n         *\\n         * _.toSafeInteger(Number.MIN_VALUE);\\n         * // => 0\\n         *\\n         * _.toSafeInteger(Infinity);\\n         * // => 9007199254740991\\n         *\\n         * _.toSafeInteger('3');\\n         * // => 3\\n         */\\n        toSafeInteger(value: any): number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.toSafeInteger\\n         */\\n        toSafeInteger(): number;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.toSafeInteger\\n         */\\n        toSafeInteger(): PrimitiveChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Converts `value` to a string if it's not one. An empty string is returned\\n         * for `null` and `undefined` values. The sign of `-0` is preserved.\\n         *\\n         * @category Lang\\n         * @param value The value to process.\\n         * @returns Returns the string.\\n         * @example\\n         *\\n         * _.toString(null);\\n         * // => ''\\n         *\\n         * _.toString(-0);\\n         * // => '-0'\\n         *\\n         * _.toString([1, 2, 3]);\\n         * // => '1,2,3'\\n         */\\n        toString(value: any): string;\\n    }\\n}\\n\";"],"names":[],"sourceRoot":""}