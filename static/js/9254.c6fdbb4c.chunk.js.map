{"version":3,"file":"static/js/9254.c6fdbb4c.chunk.js","mappings":"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","sources":["components/settingsPopover/SettingsPopover.tsx","hooks/useChangeAnyStateHandler.ts","hooks/useChangeState.ts","hooks/useChangeStateHandler.ts","pages/htmlEntitiesConverterPage/components/htmlEntitiesSettings/HtmlEntitiesSettings.tsx","pages/htmlEntitiesConverterPage/HtmlEntitiesConverterPage.tsx","webpack://mrgrd56.github.io/./src/components/settingsPopover/SettingsPopover.module.scss?06bf"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { Button, Col } from 'antd';\nimport styles from './SettingsPopover.module.scss';\nimport { CloseOutlined } from '@ant-design/icons';\n\ninterface Props {\n    title?: string;\n    onClose: () => void;\n}\n\nconst SettingsPopover: FunctionComponent<Props> = ({ title = 'Settings', onClose, children }) => {\n    return (\n        <Col className={styles.formContainer}>\n            <div className={styles.title}>\n                <h3 className=\"mb-0\">{title}</h3>\n                <div className={styles.rightSide}>\n                    {onClose && <Button size=\"small\" type=\"text\" icon={<CloseOutlined />} onClick={onClose} />}\n                </div>\n            </div>\n            {children}\n        </Col>\n    );\n};\n\nexport default SettingsPopover;\n","import { Dispatch, SetStateAction } from 'react';\nimport { isObject } from 'lodash';\nimport call from '../utils/call';\nimport ObjectKey from '../types/common/ObjectKey';\n\nexport interface TypedChangeEvent<T, P extends ObjectKey> {\n    target: {\n        [key in P]: T;\n    };\n}\n\nexport const isChangeEvent = (value: unknown): value is TypedChangeEvent<unknown, ObjectKey> => {\n    return isObject(value) && 'target' in value;\n};\n\nconst useChangeAnyStateHandler = <S, P extends ObjectKey>(\n    setState: Dispatch<SetStateAction<S>>,\n    property: P = 'value' as P\n) => {\n    return (value: TypedChangeEvent<S, P> | S) => {\n        const actualValue = call(() => {\n            if (isChangeEvent(value)) {\n                const event = value as TypedChangeEvent<S, P>;\n                return event.target[property];\n            }\n\n            return value;\n        });\n\n        setState(actualValue);\n    };\n};\n\nexport default useChangeAnyStateHandler;\n","import { Dispatch, SetStateAction, useCallback } from 'react';\n\nconst useChangeState = <S extends object>(setState: Dispatch<SetStateAction<S>>) => {\n    return useCallback(<K extends keyof S>(key: K, value: S[K]) => {\n        setState((state) => ({\n            ...state,\n            [key]: value\n        }));\n    }, []);\n};\n\nexport default useChangeState;\n","import { Dispatch, SetStateAction, useCallback } from 'react';\nimport call from '../utils/call';\nimport useChangeState from './useChangeState';\nimport { isChangeEvent, TypedChangeEvent } from './useChangeAnyStateHandler';\nimport ObjectKey from '../types/common/ObjectKey';\n\nconst useChangeStateHandler = <S extends object, P extends ObjectKey = 'value'>(\n    setState: Dispatch<SetStateAction<S>>,\n    property: P = 'value' as P\n) => {\n    const changeState = useChangeState(setState);\n\n    return useCallback(\n        <K extends keyof S, T extends S[K]>(key: K) => {\n            return (value: TypedChangeEvent<T, P> | T) => {\n                const actualValue = call(() => {\n                    if (isChangeEvent(value)) {\n                        const event = value as TypedChangeEvent<T, P>;\n                        return event.target[property];\n                    }\n\n                    return value;\n                });\n\n                changeState(key, actualValue);\n            };\n        },\n        [changeState]\n    );\n};\n\nexport default useChangeStateHandler;\n\n// const useChangeStateHandler = <S extends object, P extends ObjectKey = 'value'>(\n//     setState: Dispatch<SetStateAction<S>>,\n//     defaultEventProperty: P = 'value' as P\n// ) => {\n//     const changeState = useChangeState(setState);\n//\n//     return useCallback(\n//         <K extends keyof S, T extends S[K], EP extends ObjectKey = P>(key: K, eventProperty: EP = defaultEventProperty as unknown as EP) => {\n//             return (value: TypedChangeEvent<T, EP> | T) => {\n//                 const actualValue = call(() => {\n//                     if (isChangeEvent(value)) {\n//                         const event = value as TypedChangeEvent<T, EP>;\n//                         return event.target[eventProperty];\n//                     }\n//\n//                     return value;\n//                 });\n//\n//                 changeState(key, actualValue);\n//             };\n//         },\n//         [changeState]\n//     );\n// };\n","import React from 'react';\nimport { OptionsPopoverComponent } from '../../../../layouts/pages/textBiConverterPageContainer/TextBiConverterPageContainer';\nimport HtmlEntitiesConversionOptions from '../../types';\nimport SettingsPopover from '../../../../components/settingsPopover/SettingsPopover';\nimport useChangeStateHandler from '../../../../hooks/useChangeStateHandler';\nimport styles from '../../../../components/settingsPopover/SettingsPopover.module.scss';\nimport { Select } from 'antd';\n\nconst HtmlEntitiesSettings: OptionsPopoverComponent<HtmlEntitiesConversionOptions> = ({\n    options,\n    onOptionsChange,\n    onClose\n}) => {\n    const handleOptionChange = useChangeStateHandler(onOptionsChange);\n\n    return (\n        <SettingsPopover onClose={onClose}>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Level</span>\n                <Select className={styles.input} value={options.level} onChange={handleOptionChange('level')}>\n                    <Select.Option key=\"all\">All</Select.Option>\n                    <Select.Option key=\"html5\">HTML5</Select.Option>\n                    <Select.Option key=\"html4\">HTML4</Select.Option>\n                    <Select.Option key=\"xml\">XML</Select.Option>\n                </Select>\n            </label>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Mode</span>\n                <Select className={styles.input} value={options.mode} onChange={handleOptionChange('mode')}>\n                    <Select.Option key=\"specialChars\">Special chars</Select.Option>\n                    <Select.Option key=\"nonAscii\">Non-ASCII</Select.Option>\n                    <Select.Option key=\"nonAsciiPrintable\">Non-ASCII printable</Select.Option>\n                    <Select.Option key=\"extensive\">Extensive</Select.Option>\n                </Select>\n            </label>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Numeric</span>\n                <Select className={styles.input} value={options.numeric} onChange={handleOptionChange('numeric')}>\n                    <Select.Option key=\"decimal\">Decimal</Select.Option>\n                    <Select.Option key=\"hexadecimal\">Hexadecimal</Select.Option>\n                </Select>\n            </label>\n            <label className={styles.formItem}>\n                <span className={styles.label}>Scope</span>\n                <Select className={styles.input} value={options.scope} onChange={handleOptionChange('scope')}>\n                    <Select.Option key=\"body\">Body</Select.Option>\n                    <Select.Option key=\"attribute\">Attribute</Select.Option>\n                    <Select.Option key=\"strict\">Strict</Select.Option>\n                </Select>\n            </label>\n        </SettingsPopover>\n    );\n};\n\nexport default HtmlEntitiesSettings;\n","import React, { FunctionComponent } from 'react';\nimport TextBiConverterPageContainer, {\n    EditorType,\n    TextBiConvert\n} from '../../layouts/pages/textBiConverterPageContainer/TextBiConverterPageContainer';\nimport { decode, encode } from 'html-entities';\nimport getLocalStorageKey from '../../utils/getLocalStorageKey';\nimport HtmlEntitiesConversionOptions from './types';\nimport HtmlEntitiesSettings from './components/htmlEntitiesSettings/HtmlEntitiesSettings';\n\nconst defaultOptions: HtmlEntitiesConversionOptions = {\n    level: 'all',\n    mode: 'specialChars',\n    numeric: 'decimal',\n    scope: 'body'\n};\n\nconst convert1to2: TextBiConvert<HtmlEntitiesConversionOptions> = decode;\n\nconst convert2to1: TextBiConvert<HtmlEntitiesConversionOptions> = encode;\n\nconst HtmlEntitiesConverterPage: FunctionComponent = () => {\n    return (\n        <TextBiConverterPageContainer\n            source1={{ title: 'HTML Entities', editorType: EditorType.MONACO, language: 'xml' }}\n            source2={{ title: 'Text', editorType: EditorType.MONACO, language: 'xml' }}\n            convert1to2={convert1to2}\n            convert2to1={convert2to1}\n            swapStateStorageKey={getLocalStorageKey('html-entities', 'isSwapped')}\n            optionsStorageKey={getLocalStorageKey('html-entities', 'options')}\n            defaultOptions={defaultOptions}\n            renderOptionsPopover={HtmlEntitiesSettings}\n        />\n    );\n};\n\nexport default HtmlEntitiesConverterPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"SettingsPopover_formContainer__FvEpx\",\"title\":\"SettingsPopover_title__dzwnW\",\"rightSide\":\"SettingsPopover_rightSide__kw5Fb\",\"formItem\":\"SettingsPopover_formItem__Pm4Ou\",\"label\":\"SettingsPopover_label__L84Wt\",\"input\":\"SettingsPopover_input__LgDQB\"};"],"names":["title","onClose","children","className","styles","size","type","icon","onClick","isChangeEvent","value","isObject","setState","property","actualValue","call","target","useCallback","key","state","changeState","useChangeState","options","onOptionsChange","handleOptionChange","useChangeStateHandler","SettingsPopover","level","onChange","mode","numeric","scope","defaultOptions","convert1to2","decode","convert2to1","encode","TextBiConverterPageContainer","source1","editorType","EditorType","language","source2","swapStateStorageKey","getLocalStorageKey","optionsStorageKey","renderOptionsPopover","HtmlEntitiesSettings"],"sourceRoot":""}