{"version":3,"file":"static/js/7594.467eb25e.chunk.js","mappings":"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","sources":["utils/copyText.ts","utils/copyBlob.ts","utils/computeValue.ts","components/copyButton/CopyButton.tsx","layouts/pages/pageContainer/PageContainer.tsx","webpack://mrgrd56.github.io/./src/layouts/pages/pageContainer/PageContainer.module.scss?0d25","components/disqusThread/DisqusThread.tsx","pages/qrScannerPage/QrScannerPage.tsx","utils/antd/dummyAntdUploadRequest.ts","utils/antd/isImageFile.ts","utils/getNpmPackageLink.ts","utils/helper/promisifyFileReaderMethod.ts","utils/readFileAsDataUrl.ts"],"sourcesContent":["const copyText = (text: string | undefined) => {\n    if (!text) {\n        return;\n    }\n\n    return navigator.clipboard.writeText(text);\n};\n\nexport default copyText;\n","const copyBlob = (blob: Blob) => {\n    return navigator.clipboard.write([\n        new ClipboardItem({\n            [blob.type]: blob\n        })\n    ]);\n};\n\nexport default copyBlob;\n","import { isFunction } from 'lodash';\n\nconst computeValue = <T>(value: T | (() => T)): T => {\n    return isFunction(value) ? value() : value;\n};\n\nexport default computeValue;\n","import React, { MouseEvent, MouseEventHandler, useRef, useState } from 'react';\nimport copyText from '../../utils/copyText';\nimport { Button, ButtonProps } from 'antd';\nimport { CheckOutlined, CopyOutlined } from '@ant-design/icons';\nimport { isNil, isString } from 'lodash';\nimport copyBlob from '../../utils/copyBlob';\nimport computeValue from '../../utils/computeValue';\n\ntype ContentType = string | Blob | null | undefined;\n\ninterface Props<T extends ContentType> extends Omit<ButtonProps, 'value'> {\n    value: T | (() => T);\n    copyEmpty?: boolean;\n    onClick?: (event: MouseEvent<HTMLButtonElement>) => T;\n}\n\nfunction CopyButton<T extends ContentType>({ value, copyEmpty, children, onClick, icon, ...props }: Props<T>) {\n    const [isCopied, setIsCopied] = useState<boolean>(false);\n\n    const copiedTimeoutRef = useRef<NodeJS.Timeout>();\n\n    const handleClick: MouseEventHandler<HTMLButtonElement> = async (event) => {\n        const replacedValue = onClick?.(event);\n\n        const actualValue = replacedValue ?? computeValue(value);\n\n        if (!actualValue && !copyEmpty) {\n            return;\n        }\n\n        if (copiedTimeoutRef.current) {\n            clearTimeout(copiedTimeoutRef.current);\n        }\n\n        if (isNil(actualValue) || isString(actualValue)) {\n            await copyText(actualValue ?? '');\n        }\n        if (actualValue instanceof Blob) {\n            await copyBlob(actualValue);\n        }\n\n        setIsCopied(true);\n        copiedTimeoutRef.current = setTimeout(() => {\n            setIsCopied(false);\n        }, 1000);\n    };\n\n    return (\n        <Button onClick={handleClick} icon={icon ?? (isCopied ? <CheckOutlined /> : <CopyOutlined />)} {...props}>\n            {children ?? 'Copy'}\n        </Button>\n    );\n}\n\nexport default CopyButton;\n// export default React.memo(CopyButton, (prevProps, nextProps) => {\n//     return isEqual(omit(prevProps, 'value'), omit(nextProps, 'value')) && isEqualFunctions(prevProps.value, nextProps.value);\n// });\n","import React, { ReactNode, useMemo } from 'react';\nimport styles from './PageContainer.module.scss';\nimport { Space, SpaceProps, Tag } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport { ClockCircleOutlined, WarningOutlined } from '@ant-design/icons';\nimport classNames from 'classnames';\nimport DisqusThread from '../../../components/disqusThread/DisqusThread';\n\nexport enum PageTag {\n    WIP = 'WIP',\n    NOT_WORKING = 'NOT_WORKING'\n}\n\nexport interface PageContainerProps extends Omit<SpaceProps, 'title'> {\n    contentRef?: React.Ref<HTMLDivElement>;\n    contentClassName?: string;\n    title?: ReactNode;\n    description?: ReactNode;\n    titleExtra?: ReactNode;\n    tags?: PageTag[];\n    noPadding?: boolean;\n    noContentPadding?: boolean;\n    withComments?: boolean;\n}\n\nconst getTagNodes = (key: number | string): Readonly<Record<PageTag, ReactNode>> => ({\n    [PageTag.WIP]: (\n        <Tag color=\"blue\" icon={<ClockCircleOutlined />} key={key}>\n            Work In Progress\n        </Tag>\n    ),\n    [PageTag.NOT_WORKING]: (\n        <Tag color=\"red\" icon={<WarningOutlined />} key={key}>\n            Not Working\n        </Tag>\n    )\n});\n\nconst renderTag = (tag: PageTag, index: number) => getTagNodes(index)[tag];\n\nconst PageContainer = React.forwardRef<HTMLDivElement, PageContainerProps>((props, ref) => {\n    const {\n        title,\n        description,\n        titleExtra,\n        tags,\n        noPadding,\n        noContentPadding,\n        children,\n        className,\n        contentClassName,\n        contentRef,\n        withComments,\n        ...restProps\n    } = props;\n\n    const renderedTags = useMemo(() => tags?.map(renderTag), [tags]);\n\n    return (\n        <div\n            ref={ref}\n            className={classNames(\n                styles.container,\n                {\n                    [styles.noPadding]: noPadding,\n                    [styles.noContentPadding]: noContentPadding\n                },\n                className\n            )}\n            {...restProps}\n        >\n            {tags?.length && <div>{renderedTags}</div>}\n            {title && (\n                <Space direction=\"horizontal\" size=\"middle\" className={styles.headingContainer}>\n                    <h1 className=\"mb-0\">{title}</h1>\n                    {titleExtra}\n                </Space>\n            )}\n            {description && <Paragraph className=\"mb-2\">{description}</Paragraph>}\n\n            <div className={classNames(styles.contentContainer, contentClassName)} ref={contentRef}>\n                {children}\n                {withComments && <DisqusThread className=\"mt-4\" />}\n            </div>\n        </div>\n    );\n});\n\nexport default PageContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PageContainer_container__KmrZF\",\"noPadding\":\"PageContainer_noPadding__74Oon\",\"noContentPadding\":\"PageContainer_noContentPadding__rSQgs\",\"headingContainer\":\"PageContainer_headingContainer__ScW-F\",\"contentContainer\":\"PageContainer_contentContainer__l-gCb\"};","import React, { FC, HTMLProps, useMemo, useRef } from 'react';\nimport { DiscussionEmbed } from 'disqus-react';\nimport useAppLocation from '../../hooks/useAppLocation';\nimport useAppSettings from '../../hooks/useAppSettings';\n\ntype Props = HTMLProps<HTMLDivElement>;\n\ntype DiscussionEmbedConfig = DiscussionEmbed['props']['config'];\n\n// const handleReactionClick = (event: MouseEvent) => {\n//     const item = event.target;\n//\n//     console.log('CLICK', {item});\n// };\n\nconst DisqusThread: FC<Props> = ({ children, ...props }) => {\n    const appRoute = useAppLocation();\n    const { isCommentsBlockHidden } = useAppSettings();\n\n    const discussionContainerRef = useRef<HTMLDivElement>(null);\n    const getDiscussion: () => HTMLDivElement | undefined = () => {\n        return (discussionContainerRef.current?.firstElementChild ?? undefined) as HTMLDivElement | undefined;\n    };\n\n    const config = useMemo<DiscussionEmbedConfig>(\n        () => ({\n            url: new URL(appRoute?.path ?? '', window.location.origin).toString(),\n            identifier: appRoute?.path,\n            language: navigator.language\n        }),\n        [appRoute]\n    );\n\n    // useEffect(() => {\n    //     debugger;\n    //     const discussion = getDiscussion();\n    //     if (!discussion) {\n    //         return;\n    //     }\n    //\n    //     const reactionItemsContainer = discussion.querySelector('.reaction-items');\n    //     if (!reactionItemsContainer) {\n    //         return;\n    //     }\n    //\n    //     const reactionItems: NodeListOf<HTMLElement> = reactionItemsContainer.querySelectorAll('.reaction-item.reaction-item__enabled:not(.reaction-item__selected)');\n    //\n    //     reactionItems.forEach(item => {\n    //         item.addEventListener('click', handleReactionClick);\n    //     });\n    //\n    //     return () => {\n    //         reactionItems.forEach(item => {\n    //             item.removeEventListener('click', handleReactionClick);\n    //         });\n    //     };\n    // }, []);\n\n    if (isCommentsBlockHidden) {\n        return null;\n    }\n\n    return (\n        <div {...props} ref={discussionContainerRef}>\n            <DiscussionEmbed shortname=\"mrgrd56\" config={config} />\n            {children}\n        </div>\n    );\n};\n\nexport default DisqusThread;\n","import React, { ClipboardEventHandler, useCallback, useEffect, useState } from 'react';\nimport PageContainer from '../../layouts/pages/pageContainer/PageContainer';\nimport { Col, Image, notification, Row, Space, Spin, Upload } from 'antd';\nimport './QrScannerPage.scss';\nimport { UploadChangeParam } from 'antd/lib/upload';\nimport { UploadFile } from 'antd/lib/upload/interface';\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\nimport dummyAntdUploadRequest from '../../utils/antd/dummyAntdUploadRequest';\nimport TextArea from 'antd/lib/input/TextArea';\nimport QrScanner from 'qr-scanner';\nimport { isNil, isString } from 'lodash';\nimport call from '../../utils/call';\nimport Text from 'antd/lib/typography/Text';\nimport ImgCrop from 'antd-img-crop';\nimport CopyButton from '../../components/copyButton/CopyButton';\nimport ExternalLink from '../../components/ExternalLink';\nimport getNpmPackageLink from '../../utils/getNpmPackageLink';\nimport readFileAsDataUrl from '../../utils/readFileAsDataUrl';\nimport isImageFile from '../../utils/antd/isImageFile';\n\ninterface QrImage {\n    blob: Blob;\n    base64: string;\n}\n\nconst getQrImage = async (blob: Blob): Promise<QrImage> => {\n    const base64 = await readFileAsDataUrl(blob);\n    return { blob, base64 };\n};\n\nconst titleExtra = (\n    <Text type=\"secondary\">\n        uses <ExternalLink href={getNpmPackageLink('qr-scanner')}>qr-scanner</ExternalLink>\n    </Text>\n);\n\nconst QrScannerPage = () => {\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isRecognition, setIsRecognition] = useState<boolean>(false);\n    const [qrImage, setQrImage] = useState<QrImage>();\n    const [qrContent, setQrContent] = useState<string>('');\n\n    useEffect(() => {\n        call(async () => {\n            if (isNil(qrImage)) {\n                setQrContent('');\n                return;\n            }\n\n            try {\n                setIsRecognition(true);\n                const content: QrScanner.ScanResult | string = await QrScanner.scanImage(qrImage.blob, {});\n                const contentText = isString(content) ? content : content.data;\n                setQrContent(contentText);\n            } catch (error) {\n                notification.error({\n                    message: String(error)\n                });\n                setQrContent('');\n            } finally {\n                setIsRecognition(false);\n            }\n        });\n    }, [qrImage]);\n\n    const handleQrImageChange = useCallback(async (value: UploadChangeParam<UploadFile<unknown>>) => {\n        if (value.file.status === 'uploading') {\n            setIsLoading(true);\n            return;\n        }\n\n        const blob = value.file.originFileObj;\n\n        if (blob) {\n            const actualBlob =\n                blob.type === 'image/svg+xml' //ImgCrop converts svg to png but doesn't change the mime type\n                    ? blob.slice(0, blob.size, 'image/png')\n                    : blob;\n\n            setQrImage(await getQrImage(actualBlob));\n        }\n\n        setIsLoading(false);\n    }, []);\n\n    const handlePaste = useCallback<ClipboardEventHandler>(async (event) => {\n        setQrImage(await getQrImage(event.clipboardData.files[0]));\n    }, []);\n\n    return (\n        <PageContainer title=\"QR Code Scanner\" onPaste={handlePaste} titleExtra={titleExtra}>\n            <Row>\n                <Col className=\"w-100\">\n                    <Row>\n                        <Space>\n                            {qrImage && (\n                                <div className=\"QrScannerPage_image-thumb\">\n                                    <Image src={qrImage.base64} width={128} height={128} />\n                                </div>\n                            )}\n                            <ImgCrop rotate maxZoom={30}>\n                                <Upload\n                                    className=\"QrScannerPage_image-upload\"\n                                    listType=\"picture-card\"\n                                    showUploadList={false}\n                                    beforeUpload={isImageFile}\n                                    onChange={handleQrImageChange}\n                                    accept=\"image/*, *\"\n                                    customRequest={dummyAntdUploadRequest}\n                                >\n                                    <Space direction=\"vertical\">\n                                        {isLoading ? <LoadingOutlined /> : <PlusOutlined />}\n                                        <div>\n                                            Upload <br />\n                                            <Text type=\"secondary\">or Ctrl+V</Text>\n                                        </div>\n                                    </Space>\n                                </Upload>\n                            </ImgCrop>\n                        </Space>\n                    </Row>\n                    <Col xs={24} lg={12}>\n                        <Spin spinning={isRecognition}>\n                            <TextArea value={qrContent} readOnly rows={6} />\n                        </Spin>\n                        <CopyButton value={qrContent} className=\"mt-1\" />\n                    </Col>\n                </Col>\n            </Row>\n        </PageContainer>\n    );\n};\n\nexport default QrScannerPage;\n","const dummyAntdUploadRequest = ({ onSuccess }: { onSuccess?: (response: string) => void }) => {\n    setTimeout(() => {\n        onSuccess?.('ok');\n    }, 0);\n};\n\nexport default dummyAntdUploadRequest;\n","const isImageFile = (file: Blob | DataTransferItem) => {\n    return /^image\\/.+$/.test(file.type);\n};\n\nexport default isImageFile;\n","const getNpmPackageLink = (packageName: string): string => `https://www.npmjs.com/package/${packageName}`;\n\nexport default getNpmPackageLink;\n","const promisifyFileReaderMethod = <R extends string | ArrayBuffer>(invocation: (reader: FileReader) => void) => {\n    return new Promise<R>((resolve, reject) => {\n        const reader = new FileReader();\n\n        const handleLoad = (event: FileReaderEventMap['load']) => {\n            reader.removeEventListener('load', handleLoad);\n            resolve(event.target?.result as R);\n        };\n\n        const handleError = (event: FileReaderEventMap['error']) => {\n            reader.removeEventListener('error', handleError);\n            reject(event);\n        };\n\n        reader.addEventListener('load', handleLoad);\n        reader.addEventListener('error', handleError);\n\n        invocation(reader);\n    });\n};\n\nexport default promisifyFileReaderMethod;\n","import promisifyFileReaderMethod from './helper/promisifyFileReaderMethod';\n\nconst readFileAsDataUrl = (blob: Blob): Promise<string> =>\n    promisifyFileReaderMethod<string>((reader) => {\n        reader.readAsDataURL(blob);\n    });\n\nexport default readFileAsDataUrl;\n"],"names":["text","navigator","clipboard","writeText","blob","write","ClipboardItem","type","value","isFunction","copyEmpty","children","onClick","icon","props","useState","isCopied","setIsCopied","copiedTimeoutRef","useRef","handleClick","event","replacedValue","actualValue","computeValue","current","clearTimeout","isNil","isString","copyText","Blob","copyBlob","setTimeout","CheckOutlined","CopyOutlined","PageTag","appRoute","useAppLocation","isCommentsBlockHidden","useAppSettings","discussionContainerRef","config","useMemo","url","URL","path","window","location","origin","toString","identifier","language","ref","shortname","getTagNodes","key","WIP","color","ClockCircleOutlined","NOT_WORKING","WarningOutlined","renderTag","tag","index","React","title","description","titleExtra","tags","noPadding","noContentPadding","className","contentClassName","contentRef","withComments","restProps","renderedTags","map","classNames","styles","length","direction","size","Paragraph","getQrImage","readFileAsDataUrl","base64","Text","ExternalLink","href","getNpmPackageLink","isLoading","setIsLoading","isRecognition","setIsRecognition","qrImage","setQrImage","qrContent","setQrContent","useEffect","call","QrScanner","content","contentText","data","notification","message","String","handleQrImageChange","useCallback","file","status","originFileObj","actualBlob","slice","handlePaste","clipboardData","files","PageContainer","onPaste","src","width","height","rotate","maxZoom","listType","showUploadList","beforeUpload","isImageFile","onChange","accept","customRequest","dummyAntdUploadRequest","LoadingOutlined","PlusOutlined","xs","lg","spinning","TextArea","readOnly","rows","CopyButton","onSuccess","test","packageName","invocation","Promise","resolve","reject","reader","FileReader","addEventListener","handleLoad","removeEventListener","target","result","handleError","promisifyFileReaderMethod","readAsDataURL"],"sourceRoot":""}