{"version":3,"file":"static/js/8413.bf18ec3d.chunk.js","mappings":"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","sources":["components/appEditor/AppEditor.tsx","utils/copyText.ts","utils/copyBlob.ts","components/copyButton/CopyButton.tsx","hooks/debouncedMemo.ts","hooks/useWriteableLocalstorageState.ts","webpack://mrgrd56.github.io/./src/layouts/pages/biConverterPageContainer/BiConverterPageContainer.module.scss?e06c","layouts/pages/biConverterPageContainer/BiConverterPageContainer.tsx","layouts/pages/pageContainer/PageContainer.tsx","webpack://mrgrd56.github.io/./src/layouts/pages/pageContainer/PageContainer.module.scss?0d25","webpack://mrgrd56.github.io/./src/layouts/pages/textBiConverterPageContainer/TextBiConverterPageContainer.module.scss?4f3e","utils/isFunctionComponent.ts","utils/doNothing.ts","hooks/useOptionalLocalstorageState.ts","layouts/pages/textBiConverterPageContainer/TextBiConverterPageContainer.tsx","utils/getErrorMessage.ts","utils/getLocalStorageKey.ts"],"sourcesContent":["import React, { FunctionComponent, useCallback } from 'react';\r\nimport Editor, { EditorProps, OnChange } from '@monaco-editor/react';\r\nimport useAppTheme from '../../hooks/useAppTheme';\r\nimport { Spin } from 'antd';\r\nimport classNames from 'classnames';\r\nimport * as monaco from 'monaco-editor';\r\nimport MonacoLanguage from '../../types/MonacoLanguage';\r\n\r\nconst loadingNode = <Spin size=\"large\" />;\r\n\r\nexport type AppOnChange = (value: string, ev: monaco.editor.IModelContentChangedEvent) => void;\r\n\r\ninterface Props extends Omit<EditorProps, 'onChange'> {\r\n    onChange?: AppOnChange;\r\n    language?: MonacoLanguage;\r\n}\r\n\r\nconst AppEditor: FunctionComponent<Props> = ({ className, loading, theme, onChange, ...props }) => {\r\n    const { isDarkMode } = useAppTheme();\r\n\r\n    const handleChange = useCallback<OnChange>(\r\n        (value, ev) => {\r\n            onChange?.(value ?? '', ev);\r\n        },\r\n        [onChange]\r\n    );\r\n\r\n    return (\r\n        <Editor\r\n            theme={theme ?? (isDarkMode ? 'vs-dark' : 'light')}\r\n            className={classNames('app-monaco-editor', className)}\r\n            loading={loading ?? loadingNode}\r\n            onChange={handleChange}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\nexport default AppEditor;\r\n","const copyText = (text: string | undefined) => {\n    if (!text) {\n        return;\n    }\n\n    return navigator.clipboard.writeText(text);\n};\n\nexport default copyText;\n","const copyBlob = (blob: Blob) => {\n    return navigator.clipboard.write([\n        new ClipboardItem({\n            [blob.type]: blob\n        })\n    ]);\n};\n\nexport default copyBlob;\n","import React, { MouseEvent, MouseEventHandler, useRef, useState } from 'react';\nimport copyText from '../../utils/copyText';\nimport { Button, ButtonProps } from 'antd';\nimport { CheckOutlined, CopyOutlined } from '@ant-design/icons';\nimport { isNil, isString } from 'lodash';\nimport copyBlob from '../../utils/copyBlob';\n\ntype ContentType = string | Blob | null | undefined;\n\ninterface Props<T extends ContentType> extends Omit<ButtonProps, 'value'> {\n    value: T;\n    copyEmpty?: boolean;\n    onClick?: (event: MouseEvent<HTMLButtonElement>) => T;\n}\n\nfunction CopyButton<T extends ContentType>({ value, copyEmpty, children, onClick, icon, ...props }: Props<T>) {\n    const [isCopied, setIsCopied] = useState<boolean>(false);\n\n    const copiedTimeoutRef = useRef<NodeJS.Timeout>();\n\n    const handleClick: MouseEventHandler<HTMLButtonElement> = async (event) => {\n        const replacedValue = onClick?.(event);\n\n        const actualValue = replacedValue ?? value;\n\n        if (!actualValue && !copyEmpty) {\n            return;\n        }\n\n        if (copiedTimeoutRef.current) {\n            clearTimeout(copiedTimeoutRef.current);\n        }\n\n        if (isNil(actualValue) || isString(actualValue)) {\n            await copyText(actualValue ?? '');\n        }\n        if (actualValue instanceof Blob) {\n            await copyBlob(actualValue);\n        }\n\n        setIsCopied(true);\n        copiedTimeoutRef.current = setTimeout(() => {\n            setIsCopied(false);\n        }, 1000);\n    };\n\n    return (\n        <Button onClick={handleClick} icon={icon ?? (isCopied ? <CheckOutlined /> : <CopyOutlined />)} {...props}>\n            {children ?? 'Copy'}\n        </Button>\n    );\n}\n\nexport default CopyButton;\n","import { DependencyList, useEffect, useRef, useState } from 'react';\nimport { debounce, isObject, throttle } from 'lodash';\nimport { v4 } from 'uuid';\nimport call from '../utils/call';\nimport useAutoRef from './useAutoRef';\n\ninterface NoResult {\n    readonly _noResult: string;\n}\n\nconst isNoResult = <T>(value: T | NoResult, noResult: NoResult): value is NoResult => {\n    return isObject(value) && '_noResult' in value && value === noResult; //TODO just value === noResult ?\n};\n\ntype MemoFactory<R> = (noResult: NoResult) => R | NoResult;\n\nconst createDebouncedMemoHook =\n    (debounceFn: typeof debounce) =>\n    <R>(factory: MemoFactory<R>, deps: DependencyList | undefined, wait?: number) => {\n        const [value, setValue] = useState<R>();\n        const factoryRef = useAutoRef(factory);\n\n        const debounceFunction = useRef(\n            call(() => {\n                const actualNoResult: NoResult = Object.freeze({\n                    _noResult: v4()\n                });\n\n                return debounceFn(() => {\n                    const value = factoryRef.current(actualNoResult);\n\n                    if (!isNoResult(value, actualNoResult)) {\n                        setValue(value);\n                    }\n                }, wait);\n            })\n        ).current;\n\n        useEffect(() => {\n            debounceFunction();\n        }, deps);\n\n        return value;\n    };\n\nexport const useDebouncedMemo = createDebouncedMemoHook(debounce);\nexport const useThrottledMemo = createDebouncedMemoHook(throttle);\n\n// const useDebouncedMemo = <T>(factory: () => T, deps: DependencyList | undefined, wait?: number) => {\n//     const [value, setValue] = useState<T>();\n//\n//     const timeoutRef = useRef<NodeJS.Timeout>();\n//\n//\n// };\n","import { Dispatch, SetStateAction, useEffect, useMemo, useState } from 'react';\nimport { useLocalstorageState } from 'rooks';\n\ntype UseLocalstorageStateReturnValue<S> = [S, Dispatch<SetStateAction<S>>, () => void];\n\nconst useWriteableLocalstorageState = <S>(\n    key: string,\n    initialState?: S | (() => S)\n): UseLocalstorageStateReturnValue<S> => {\n    const [lsState, setLsState, resetLsState] = useLocalstorageState<S>(key, initialState);\n    const [state, setState] = useState<S>(lsState);\n\n    useEffect(() => {\n        setLsState(state as S);\n    }, [state]);\n\n    return useMemo(() => [state, setState, resetLsState], [state, setState, resetLsState]);\n};\n\nexport default useWriteableLocalstorageState;\n","// extracted by mini-css-extract-plugin\nexport default {\"antd-text-primary\":\"BiConverterPageContainer_antd-text-primary__NHw73\",\"pageContainer\":\"BiConverterPageContainer_pageContainer__Pc4cK\",\"container\":\"BiConverterPageContainer_container__9dCvU\",\"col\":\"BiConverterPageContainer_col__HAY1a\",\"colLeft\":\"BiConverterPageContainer_colLeft__uEhfW\",\"colHeader\":\"BiConverterPageContainer_colHeader__ivOOO\",\"colTitle\":\"BiConverterPageContainer_colTitle__UU3rq\"};","import React, { FunctionComponent, ReactNode } from 'react';\nimport PageContainer, { PageContainerProps } from '../pageContainer/PageContainer';\nimport styles from './BiConverterPageContainer.module.scss';\nimport { Col, Row } from 'antd';\nimport classNames from 'classnames';\n\ninterface Props extends PageContainerProps {\n    leftTitle?: ReactNode;\n    rightTitle?: ReactNode;\n\n    leftExtra?: ReactNode;\n    rightExtra?: ReactNode;\n\n    left?: ReactNode;\n    right?: ReactNode;\n\n    extra?: ReactNode;\n}\n\nconst BiConverterPageContainer: FunctionComponent<Props> = (props) => {\n    const {\n        leftTitle,\n        rightTitle,\n        leftExtra,\n        rightExtra,\n        left,\n        right,\n        extra,\n        children,\n        className,\n        noPadding,\n        ...pageProps\n    } = props;\n\n    return (\n        <PageContainer\n            noPadding={noPadding ?? true}\n            className={classNames(styles.pageContainer, className)}\n            {...pageProps}\n        >\n            <Row className={styles.container}>\n                <Col xs={12} className={classNames(styles.col, styles.colLeft)}>\n                    <div className={styles.colHeader}>\n                        <h3 className={styles.colTitle}>{leftTitle}</h3>\n                        {leftExtra}\n                    </div>\n                    {left}\n                </Col>\n                <Col xs={12} className={classNames(styles.col, styles.colRight)}>\n                    <div className={styles.colHeader}>\n                        <h3 className={styles.colTitle}>{rightTitle}</h3>\n                        {rightExtra}\n                    </div>\n                    {right}\n                </Col>\n                {extra}\n            </Row>\n            {children}\n        </PageContainer>\n    );\n};\n\nexport default BiConverterPageContainer;\n","import React, { ReactNode, useMemo } from 'react';\nimport styles from './PageContainer.module.scss';\nimport { Space, SpaceProps, Tag } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport { ClockCircleOutlined, WarningOutlined } from '@ant-design/icons';\nimport classNames from 'classnames';\n\nexport enum PageTag {\n    WIP = 'WIP',\n    NOT_WORKING = 'NOT_WORKING'\n}\n\nexport interface PageContainerProps extends Omit<SpaceProps, 'title'> {\n    contentClassName?: string;\n    title?: ReactNode;\n    description?: ReactNode;\n    titleExtra?: ReactNode;\n    tags?: PageTag[];\n    noPadding?: boolean;\n    noContentPadding?: boolean;\n}\n\nconst getTagNodes = (key: number | string): Readonly<Record<PageTag, ReactNode>> => ({\n    [PageTag.WIP]: (\n        <Tag color=\"blue\" icon={<ClockCircleOutlined />} key={key}>\n            Work In Progress\n        </Tag>\n    ),\n    [PageTag.NOT_WORKING]: (\n        <Tag color=\"red\" icon={<WarningOutlined />} key={key}>\n            Not Working\n        </Tag>\n    )\n});\n\nconst renderTag = (tag: PageTag, index: number) => getTagNodes(index)[tag];\n\nconst PageContainer = React.forwardRef<HTMLDivElement, PageContainerProps>((props, ref) => {\n    const {\n        title,\n        description,\n        titleExtra,\n        tags,\n        noPadding,\n        noContentPadding,\n        children,\n        className,\n        contentClassName,\n        ...restProps\n    } = props;\n\n    const renderedTags = useMemo(() => tags?.map(renderTag), [tags]);\n\n    return (\n        <div\n            ref={ref}\n            className={classNames(\n                styles.container,\n                {\n                    [styles.noPadding]: noPadding,\n                    [styles.noContentPadding]: noContentPadding\n                },\n                className\n            )}\n            {...restProps}\n        >\n            {tags?.length && <div>{renderedTags}</div>}\n            {title && (\n                <Space direction=\"horizontal\" size=\"middle\" className={styles.headingContainer}>\n                    <h1 className=\"mb-0\">{title}</h1>\n                    {titleExtra}\n                </Space>\n            )}\n            {description && <Paragraph className=\"mb-2\">{description}</Paragraph>}\n\n            <div className={classNames(styles.contentContainer, contentClassName)}>{children}</div>\n        </div>\n    );\n});\n\nexport default PageContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PageContainer_container__KmrZF\",\"noPadding\":\"PageContainer_noPadding__74Oon\",\"noContentPadding\":\"PageContainer_noContentPadding__rSQgs\",\"headingContainer\":\"PageContainer_headingContainer__ScW-F\",\"contentContainer\":\"PageContainer_contentContainer__l-gCb\"};","// extracted by mini-css-extract-plugin\nexport default {\"pageContainer\":\"TextBiConverterPageContainer_pageContainer__BTfar\",\"editor\":\"TextBiConverterPageContainer_editor__9Uv+G\",\"messageContainer\":\"TextBiConverterPageContainer_messageContainer__zyfhy\"};","import { FunctionComponent } from 'react';\n\n// type ExtractPropsType<T> =\n//     T extends keyof JSX.IntrinsicElements | JSXElementConstructor<unknown>\n//         ? ComponentProps<T>\n//         : unknown;\n\n/**\n * @deprecated unstable\n */\nfunction isFunctionComponent<T extends FunctionComponent<any> = FunctionComponent<any>>(value: unknown): value is T {\n    return (\n        typeof value === 'function' &&\n        (String(value).includes('return React.createElement') || String(value).includes('return /*#__PURE__*/'))\n    );\n}\n\nexport default isFunctionComponent;\n","// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst doNothing = () => {};\n\nexport default doNothing;\n","import { Dispatch, SetStateAction, useMemo, useState } from 'react';\nimport { NULL_LOCALSTORAGE_KEY } from '../utils/getLocalStorageKey';\nimport doNothing from '../utils/doNothing';\nimport useWriteableLocalstorageState from './useWriteableLocalstorageState';\n\ntype UseOptionalLocalstorageStateReturnValue<S> = [S, Dispatch<SetStateAction<S>>, () => void];\n\nconst useOptionalLocalstorageState = <S>(\n    key: string | undefined,\n    initialState?: S | (() => S)\n): UseOptionalLocalstorageStateReturnValue<S> => {\n    const localstorageState = useWriteableLocalstorageState(key ?? NULL_LOCALSTORAGE_KEY, initialState);\n    const [normalState, setNormalState] = useState<S>(initialState as (() => S) | S);\n\n    return useMemo(() => {\n        if (key === undefined) {\n            return [normalState, setNormalState, doNothing];\n        }\n\n        return localstorageState;\n    }, [key, localstorageState, normalState, setNormalState]);\n};\n\nexport default useOptionalLocalstorageState;\n","import React, { Dispatch, FunctionComponent, ReactNode, SetStateAction, useCallback, useMemo, useState } from 'react';\nimport { useDebouncedMemo } from '../../../hooks/debouncedMemo';\nimport getErrorMessage from '../../../utils/getErrorMessage';\nimport BiConverterPageContainer from '../biConverterPageContainer/BiConverterPageContainer';\nimport styles from './TextBiConverterPageContainer.module.scss';\nimport { Alert, Button, Popover, Tooltip } from 'antd';\nimport { SettingOutlined, SwapOutlined } from '@ant-design/icons';\nimport AppEditor from '../../../components/appEditor/AppEditor';\nimport CopyButton from '../../../components/copyButton/CopyButton';\nimport MonacoLanguage from '../../../types/MonacoLanguage';\nimport { editor } from 'monaco-editor';\nimport { isEqual } from 'lodash';\nimport isFunctionComponent from '../../../utils/isFunctionComponent';\nimport Flex from '../../../components/flex/Flex';\nimport useOptionalLocalstorageState from '../../../hooks/useOptionalLocalstorageState';\n\nconst sourceEditorOptions: editor.IStandaloneEditorConstructionOptions = {\n    minimap: { enabled: false }\n};\n\nconst resultEditorOptions: editor.IStandaloneEditorConstructionOptions = {\n    readOnly: true,\n    minimap: { enabled: false }\n};\n\ninterface SourceOptions {\n    title: string;\n    language?: MonacoLanguage;\n}\n\nexport type TextBiConvert<O = undefined> = (source: string, options: O) => string;\nexport type RenderOptionsPopover<O> = (\n    options: O,\n    setOptions: Dispatch<SetStateAction<O>>,\n    handleClose: () => void\n) => ReactNode;\nexport interface OptionsPopoverComponentProps<O> {\n    options: O;\n    onOptionsChange: Dispatch<SetStateAction<O>>;\n    onClose: () => void;\n}\nexport type OptionsPopoverComponent<O> = FunctionComponent<OptionsPopoverComponentProps<O>>;\n\ninterface BaseProps<O> {\n    source1: SourceOptions;\n    source2: SourceOptions;\n    convert1to2: TextBiConvert<O>;\n    convert2to1?: TextBiConvert<O>;\n    swapStateStorageKey?: string;\n    sourceStorageKey?: string;\n}\n\ninterface PropsWithOptions<O> extends BaseProps<O> {\n    defaultOptions: O;\n    optionsStorageKey: string;\n    renderOptionsPopover: RenderOptionsPopover<O> | OptionsPopoverComponent<O>;\n}\n\ninterface PropsWithoutOptions extends BaseProps<undefined> {\n    defaultOptions?: never;\n    optionsStorageKey?: never;\n    // convert: (source: string, options?: undefined) => string;\n    // convertBack?: (source: string) => string;\n    renderOptionsPopover?: never;\n}\n\ntype Props<O> = PropsWithOptions<O> | PropsWithoutOptions;\n\nconst TextBiConverterPageContainer = <O,>(props: Props<O>) => {\n    const {\n        defaultOptions,\n        optionsStorageKey,\n        convert1to2,\n        convert2to1,\n        source1,\n        source2,\n        renderOptionsPopover,\n        swapStateStorageKey,\n        sourceStorageKey\n    } = props;\n\n    const [source, setSource] = useOptionalLocalstorageState<string>(sourceStorageKey, '');\n    const [error, setError] = useState<string>();\n    const [isSettingsTooltipVisible, setIsSettingsTooltipVisible] = useState<boolean>(false);\n    const [isSettingsVisible, setIsSettingsVisible] = useState<boolean>(false);\n    const [isSwappedDirection, setIsSwappedDirection] = useOptionalLocalstorageState(swapStateStorageKey, false);\n\n    const [selectableConversionOptions, setSelectableConversionOptions] = useOptionalLocalstorageState<O>(\n        optionsStorageKey,\n        defaultOptions\n    );\n\n    // const conversionOptions = useMemo(() => {\n    //     if (getConversionOptions && selectableOptions) {\n    //         return getConversionOptions(selectableOptions);\n    //     }\n    // }, [selectableConversionOptions]);\n\n    const result = useDebouncedMemo(\n        (noResult) => {\n            if (!source?.trim()) {\n                setError(undefined);\n                return '';\n            }\n\n            try {\n                const convert = isSwappedDirection && convert2to1 ? convert2to1 : convert1to2;\n                const result = convert(source, selectableConversionOptions as any);\n\n                setError(undefined);\n\n                return result;\n            } catch (e) {\n                setError(getErrorMessage(e));\n\n                if (e instanceof SyntaxError) {\n                    return noResult;\n                } else {\n                    throw e;\n                }\n            }\n        },\n        [source, selectableConversionOptions, isSwappedDirection, convert1to2, convert2to1],\n        50\n    );\n\n    const { sourceLeft, sourceRight } = useMemo(() => {\n        return {\n            sourceLeft: isSwappedDirection ? source2 : source1,\n            sourceRight: isSwappedDirection ? source1 : source2\n        };\n    }, [source1, source2, isSwappedDirection]);\n\n    const handleSettingsClick = useCallback(() => {\n        setIsSettingsVisible((isVisible) => !isVisible);\n        setIsSettingsTooltipVisible(false);\n    }, []);\n\n    const optionsPopoverContent = useMemo(() => {\n        if (!renderOptionsPopover) {\n            return;\n        }\n\n        console.log('CHECK COMPONENT', {\n            renderOptionsPopover,\n            isFC: isFunctionComponent<OptionsPopoverComponent<O>>(renderOptionsPopover)\n        });\n        if (isFunctionComponent<OptionsPopoverComponent<O>>(renderOptionsPopover)) {\n            const OptionsPopoverContent = renderOptionsPopover;\n            return (\n                <OptionsPopoverContent\n                    options={selectableConversionOptions}\n                    onOptionsChange={setSelectableConversionOptions}\n                    onClose={handleSettingsClick}\n                />\n            );\n        }\n\n        return renderOptionsPopover(selectableConversionOptions, setSelectableConversionOptions, handleSettingsClick);\n    }, [selectableConversionOptions, setSelectableConversionOptions, handleSettingsClick]);\n\n    const handleSettingsTooltipVisibleChange = useCallback(\n        (value: boolean) => {\n            if (!isSettingsVisible) {\n                setIsSettingsTooltipVisible(value);\n            }\n        },\n        [isSettingsVisible]\n    );\n\n    const handleSwapConversionDirectionClick = useCallback(() => {\n        setSource(result ?? '');\n        setIsSwappedDirection((x) => !x);\n    }, [setIsSwappedDirection, result]);\n\n    return (\n        <BiConverterPageContainer\n            className={styles.pageContainer}\n            leftTitle={sourceLeft.title}\n            leftExtra={\n                <Flex row gap={4}>\n                    {convert2to1 && (\n                        <Tooltip title=\"Swap conversion direction\" placement=\"bottomRight\">\n                            <Button type=\"text\" icon={<SwapOutlined />} onClick={handleSwapConversionDirectionClick} />\n                        </Tooltip>\n                    )}\n                    {renderOptionsPopover && (\n                        <Popover\n                            trigger=\"click\"\n                            visible={isSettingsVisible}\n                            onVisibleChange={setIsSettingsVisible}\n                            content={optionsPopoverContent}\n                            placement=\"bottomRight\"\n                        >\n                            <Tooltip\n                                title=\"Settings\"\n                                placement=\"bottomRight\"\n                                visible={isSettingsVisible ? false : isSettingsTooltipVisible}\n                                onVisibleChange={handleSettingsTooltipVisibleChange}\n                            >\n                                <Button type=\"text\" icon={<SettingOutlined />} onClick={handleSettingsClick} />\n                            </Tooltip>\n                        </Popover>\n                    )}\n                </Flex>\n            }\n            left={\n                <AppEditor\n                    className={styles.editor}\n                    language={sourceLeft.language}\n                    options={sourceEditorOptions}\n                    value={source}\n                    onChange={setSource}\n                />\n            }\n            rightTitle={sourceRight.title}\n            rightExtra={\n                <Tooltip title=\"Copy\" placement=\"bottomLeft\">\n                    <CopyButton value={result} type=\"text\" children=\"\" />\n                </Tooltip>\n            }\n            right={\n                <AppEditor\n                    className={styles.editor}\n                    language={sourceRight.language}\n                    options={resultEditorOptions}\n                    value={result}\n                />\n            }\n            extra={error && <Alert className={styles.messageContainer} type=\"error\" showIcon message={error} />}\n        />\n    );\n};\n\nexport default React.memo(TextBiConverterPageContainer, isEqual) as typeof TextBiConverterPageContainer;\n","const getErrorMessage = (error: any) => {\n    return error instanceof Error ? error.message : String(error);\n};\n\nexport default getErrorMessage;\n","const getLocalStorageKey = (scope: string, name: string): string => {\n    return `mrgrd56:${scope}/${name}`;\n};\n\nexport const NULL_LOCALSTORAGE_KEY = getLocalStorageKey('global', 'null');\n\nexport default getLocalStorageKey;\n"],"names":["loadingNode","size","className","loading","theme","onChange","props","isDarkMode","useAppTheme","handleChange","useCallback","value","ev","classNames","text","navigator","clipboard","writeText","blob","write","ClipboardItem","type","copyEmpty","children","onClick","icon","useState","isCopied","setIsCopied","copiedTimeoutRef","useRef","handleClick","event","replacedValue","actualValue","current","clearTimeout","isNil","isString","copyText","Blob","copyBlob","setTimeout","CheckOutlined","CopyOutlined","createDebouncedMemoHook","debounceFn","factory","deps","wait","setValue","factoryRef","useAutoRef","debounceFunction","call","actualNoResult","Object","freeze","_noResult","v4","noResult","isObject","isNoResult","useEffect","useDebouncedMemo","debounce","throttle","key","initialState","useLocalstorageState","lsState","setLsState","resetLsState","state","setState","useMemo","leftTitle","rightTitle","leftExtra","rightExtra","left","right","extra","noPadding","pageProps","PageContainer","styles","xs","PageTag","getTagNodes","WIP","color","ClockCircleOutlined","NOT_WORKING","WarningOutlined","renderTag","tag","index","React","ref","title","description","titleExtra","tags","noContentPadding","contentClassName","restProps","renderedTags","map","length","direction","Paragraph","String","includes","localstorageState","useWriteableLocalstorageState","NULL_LOCALSTORAGE_KEY","normalState","setNormalState","undefined","doNothing","sourceEditorOptions","minimap","enabled","resultEditorOptions","readOnly","TextBiConverterPageContainer","defaultOptions","optionsStorageKey","convert1to2","convert2to1","source1","source2","renderOptionsPopover","swapStateStorageKey","sourceStorageKey","useOptionalLocalstorageState","source","setSource","error","setError","isSettingsTooltipVisible","setIsSettingsTooltipVisible","isSettingsVisible","setIsSettingsVisible","isSwappedDirection","setIsSwappedDirection","selectableConversionOptions","setSelectableConversionOptions","result","trim","e","getErrorMessage","SyntaxError","sourceLeft","sourceRight","handleSettingsClick","isVisible","optionsPopoverContent","console","log","isFC","isFunctionComponent","OptionsPopoverContent","options","onOptionsChange","onClose","handleSettingsTooltipVisibleChange","handleSwapConversionDirectionClick","x","BiConverterPageContainer","Flex","row","gap","placement","SwapOutlined","trigger","visible","onVisibleChange","content","SettingOutlined","AppEditor","language","CopyButton","showIcon","message","isEqual","Error","getLocalStorageKey","scope","name"],"sourceRoot":""}