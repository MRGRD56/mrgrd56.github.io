{"version":3,"file":"static/js/186.b29b7808.chunk.js","mappings":"mIAAA","sources":["../node_modules/@types/lodash/common/collection.d.ts"],"sourcesContent":["export default \"import _ = require(\\\"../index\\\");\\ndeclare module \\\"../index\\\" {\\n    interface LoDashStatic {\\n        /**\\n         * Creates an object composed of keys generated from the results of running each element of collection through\\n         * iteratee. The corresponding value of each key is the number of times the key was returned by iteratee. The\\n         * iteratee is invoked with one argument: (value).\\n         *\\n         * @param collection The collection to iterate over.\\n         * @param iteratee The function invoked per iteration.\\n         * @return Returns the composed aggregate object.\\n         */\\n        countBy<T>(collection: List<T> | null | undefined, iteratee?: ValueIteratee<T>): Dictionary<number>;\\n        /**\\n         * @see _.countBy\\n         */\\n        countBy<T extends object>(collection: T | null | undefined, iteratee?: ValueIteratee<T[keyof T]>): Dictionary<number>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.countBy\\n         */\\n        countBy(iteratee?: ValueIteratee<T[keyof T]>): Object<Dictionary<number>>;\\n    }\\n    interface String {\\n        /**\\n         * @see _.countBy\\n         */\\n        countBy(iteratee?: ValueIteratee<string>): Object<Dictionary<number>>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.countBy\\n         */\\n        countBy(iteratee?: ValueIteratee<T>): Object<Dictionary<number>>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.countBy\\n         */\\n        countBy(iteratee?: ValueIteratee<T[keyof T]>): ObjectChain<Dictionary<number>>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.countBy\\n         */\\n        countBy(iteratee?: ValueIteratee<string>): ObjectChain<Dictionary<number>>;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.countBy\\n         */\\n        countBy(iteratee?: ValueIteratee<string>): ObjectChain<Dictionary<number>>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.countBy\\n         */\\n        countBy(iteratee?: ValueIteratee<T>): ObjectChain<Dictionary<number>>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * @see _.forEach\\n         */\\n        each: LoDashStatic['forEach'];\\n    }\\n    interface String {\\n        /**\\n         * @see _.each\\n         */\\n        each: String['forEach'];\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.each\\n         */\\n        each: Collection<T>['forEach'];\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.each\\n         */\\n        each: Object<T>['forEach'];\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.each\\n         */\\n        each: StringChain['forEach'];\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.each\\n         */\\n        each: StringNullableChain['forEach'];\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.each\\n         */\\n        each: CollectionChain<T>['forEach'];\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.each\\n         */\\n        each: ObjectChain<T>['forEach'];\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * @see _.forEachRight\\n         */\\n        eachRight: LoDashStatic[\\\"forEachRight\\\"];\\n    }\\n    interface String {\\n        /**\\n         * @see _.eachRight\\n         */\\n        eachRight: String['forEachRight'];\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.eachRight\\n         */\\n        eachRight: Collection<T>['forEachRight'];\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.eachRight\\n         */\\n        eachRight: Object<T>['forEachRight'];\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.eachRight\\n         */\\n        eachRight: StringChain['forEachRight'];\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.eachRight\\n         */\\n        eachRight: StringNullableChain['forEachRight'];\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.eachRight\\n         */\\n        eachRight: CollectionChain<T>['forEachRight'];\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.eachRight\\n         */\\n        eachRight: ObjectChain<T>['forEachRight'];\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Checks if predicate returns truthy for all elements of collection. Iteration is stopped once predicate\\n         * returns falsey. The predicate is invoked with three arguments: (value, index|key, collection).\\n         *\\n         * @param collection The collection to iterate over.\\n         * @param predicate The function invoked per iteration.\\n         * @return Returns true if all elements pass the predicate check, else false.\\n         */\\n        every<T>(collection: List<T> | null | undefined, predicate?: ListIterateeCustom<T, boolean>): boolean;\\n        /**\\n         * @see _.every\\n         */\\n        every<T extends object>(collection: T | null | undefined, predicate?: ObjectIterateeCustom<T, boolean>): boolean;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.every\\n         */\\n        every(predicate?: ListIterateeCustom<T, boolean>): boolean;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.every\\n         */\\n        every(predicate?: ObjectIterateeCustom<T, boolean>): boolean;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.every\\n         */\\n        every(predicate?: ListIterateeCustom<T, boolean>): PrimitiveChain<boolean>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.every\\n         */\\n        every(predicate?: ObjectIterateeCustom<T, boolean>): PrimitiveChain<boolean>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Iterates over elements of collection, returning an array of all elements predicate returns truthy for. The\\n         * predicate is invoked with three arguments: (value, index|key, collection).\\n         *\\n         * @param collection The collection to iterate over.\\n         * @param predicate The function invoked per iteration.\\n         * @return Returns the new filtered array.\\n         */\\n        filter(collection: string | null | undefined, predicate?: StringIterator<boolean>): string[];\\n        /**\\n         * @see _.filter\\n         */\\n        filter<T, S extends T>(collection: List<T> | null | undefined, predicate: ListIteratorTypeGuard<T, S>): S[];\\n        /**\\n         * @see _.filter\\n         */\\n        filter<T>(collection: List<T> | null | undefined, predicate?: ListIterateeCustom<T, boolean>): T[];\\n        /**\\n         * @see _.filter\\n         */\\n        filter<T extends object, S extends T[keyof T]>(collection: T | null | undefined, predicate: ObjectIteratorTypeGuard<T, S>): S[];\\n        /**\\n         * @see _.filter\\n         */\\n        filter<T extends object>(collection: T | null | undefined, predicate?: ObjectIterateeCustom<T, boolean>): Array<T[keyof T]>;\\n    }\\n    interface String {\\n        /**\\n         * @see _.filter\\n         */\\n        filter(predicate?: StringIterator<boolean>): Collection<string>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.filter\\n         */\\n        filter<S extends T>(predicate: ListIteratorTypeGuard<T, S>): Collection<S>;\\n        /**\\n         * @see _.filter\\n         */\\n        filter(predicate?: ListIterateeCustom<T, boolean>): Collection<T>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.filter\\n         */\\n        filter<S extends T[keyof T]>(predicate: ObjectIteratorTypeGuard<T, S>): Collection<S>;\\n        /**\\n         * @see _.filter\\n         */\\n        filter(predicate?: ObjectIterateeCustom<T, boolean>): Collection<T[keyof T]>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.filter\\n         */\\n        filter(predicate?: StringIterator<boolean>): CollectionChain<string>;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.filter\\n         */\\n        filter(predicate?: StringIterator<boolean>): CollectionChain<string>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.filter\\n         */\\n        filter<S extends T>(predicate: ListIteratorTypeGuard<T, S>): CollectionChain<S>;\\n        /**\\n         * @see _.filter\\n         */\\n        filter(predicate?: ListIterateeCustom<T, boolean>): CollectionChain<T>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.filter\\n         */\\n        filter<S extends T[keyof T]>(predicate: ObjectIteratorTypeGuard<T, S>): CollectionChain<S>;\\n        /**\\n         * @see _.filter\\n         */\\n        filter(predicate?: ObjectIterateeCustom<T, boolean>): CollectionChain<T[keyof T]>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Iterates over elements of collection, returning the first element predicate returns truthy for.\\n         * The predicate is invoked with three arguments: (value, index|key, collection).\\n         *\\n         * @param collection The collection to search.\\n         * @param predicate The function invoked per iteration.\\n         * @param fromIndex The index to search from.\\n         * @return Returns the matched element, else undefined.\\n         */\\n        find<T, S extends T>(collection: List<T> | null | undefined, predicate: ListIteratorTypeGuard<T, S>, fromIndex?: number): S|undefined;\\n        /**\\n         * @see _.find\\n         */\\n        find<T>(collection: List<T> | null | undefined, predicate?: ListIterateeCustom<T, boolean>, fromIndex?: number): T|undefined;\\n        /**\\n         * @see _.find\\n         */\\n        find<T extends object, S extends T[keyof T]>(collection: T | null | undefined, predicate: ObjectIteratorTypeGuard<T, S>, fromIndex?: number): S|undefined;\\n        /**\\n         * @see _.find\\n         */\\n        find<T extends object>(collection: T | null | undefined, predicate?: ObjectIterateeCustom<T, boolean>, fromIndex?: number): T[keyof T]|undefined;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.find\\n         */\\n        find<S extends T>(predicate: ListIteratorTypeGuard<T, S>, fromIndex?: number): S|undefined;\\n        /**\\n         * @see _.find\\n         */\\n        find(predicate?: ListIterateeCustom<T, boolean>, fromIndex?: number): T|undefined;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.find\\n         */\\n        find< S extends T[keyof T]>(predicate: ObjectIteratorTypeGuard<T, S>, fromIndex?: number): S|undefined;\\n        /**\\n         * @see _.find\\n         */\\n        find(predicate?: ObjectIterateeCustom<T, boolean>, fromIndex?: number): T[keyof T]|undefined;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.find\\n         */\\n        find< S extends T>(predicate: ListIteratorTypeGuard<T, S>, fromIndex?: number): ExpChain<S|undefined>;\\n        /**\\n         * @see _.find\\n         */\\n        find(predicate?: ListIterateeCustom<T, boolean>, fromIndex?: number): ExpChain<T|undefined>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.find\\n         */\\n        find< S extends T[keyof T]>(predicate: ObjectIteratorTypeGuard<T, S>, fromIndex?: number): ExpChain<S|undefined>;\\n        /**\\n         * @see _.find\\n         */\\n        find(predicate?: ObjectIterateeCustom<T, boolean>, fromIndex?: number): ExpChain<T[keyof T]|undefined>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * This method is like _.find except that it iterates over elements of a collection from\\n         * right to left.\\n         * @param collection Searches for a value in this list.\\n         * @param predicate The function called per iteration.\\n         * @param fromIndex The index to search from.\\n         * @return The found element, else undefined.\\n         */\\n        findLast<T, S extends T>(collection: List<T> | null | undefined, predicate: ListIteratorTypeGuard<T, S>, fromIndex?: number): S|undefined;\\n        /**\\n         * @see _.findLast\\n         */\\n        findLast<T>(collection: List<T> | null | undefined, predicate?: ListIterateeCustom<T, boolean>, fromIndex?: number): T|undefined;\\n        /**\\n         * @see _.findLast\\n         */\\n        findLast<T extends object, S extends T[keyof T]>(collection: T | null | undefined, predicate: ObjectIteratorTypeGuard<T, S>, fromIndex?: number): S|undefined;\\n        /**\\n         * @see _.findLast\\n         */\\n        findLast<T extends object>(collection: T | null | undefined, predicate?: ObjectIterateeCustom<T, boolean>, fromIndex?: number): T[keyof T]|undefined;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.findLast\\n         */\\n        findLast<S extends T>(predicate: ListIteratorTypeGuard<T, S>, fromIndex?: number): S|undefined;\\n        /**\\n         * @see _.findLast\\n         */\\n        findLast(predicate?: ListIterateeCustom<T, boolean>, fromIndex?: number): T|undefined;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.findLast\\n         */\\n        findLast< S extends T[keyof T]>(predicate: ObjectIteratorTypeGuard<T, S>, fromIndex?: number): S|undefined;\\n        /**\\n         * @see _.findLast\\n         */\\n        findLast(predicate?: ObjectIterateeCustom<T, boolean>, fromIndex?: number): T[keyof T]|undefined;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.findLast\\n         */\\n        findLast< S extends T>(predicate: ListIteratorTypeGuard<T, S>, fromIndex?: number): ExpChain<S|undefined>;\\n        /**\\n         * @see _.findLast\\n         */\\n        findLast(predicate?: ListIterateeCustom<T, boolean>, fromIndex?: number): ExpChain<T|undefined>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.findLast\\n         */\\n        findLast< S extends T[keyof T]>(predicate: ObjectIteratorTypeGuard<T, S>, fromIndex?: number): ExpChain<S|undefined>;\\n        /**\\n         * @see _.findLast\\n         */\\n        findLast(predicate?: ObjectIterateeCustom<T, boolean>, fromIndex?: number): ExpChain<T[keyof T]|undefined>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Creates an array of flattened values by running each element in collection through iteratee\\n         * and concating its result to the other mapped values. The iteratee is invoked with three arguments:\\n         * (value, index|key, collection).\\n         *\\n         * @param collection The collection to iterate over.\\n         * @param iteratee The function invoked per iteration.\\n         * @return Returns the new flattened array.\\n         */\\n        flatMap<T>(collection: Dictionary<Many<T>> | NumericDictionary<Many<T>> | null | undefined): T[];\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap(collection: object | null | undefined): any[];\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap<T, TResult>(collection: List<T> | null | undefined, iteratee: ListIterator<T, Many<TResult>>): TResult[];\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap<T extends object, TResult>(collection: T | null | undefined, iteratee: ObjectIterator<T, Many<TResult>>): TResult[];\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap(collection: object | null | undefined, iteratee: string): any[];\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap(collection: object | null | undefined, iteratee: object): boolean[];\\n    }\\n    interface String {\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap<TResult>(iteratee: StringIterator<Many<TResult>>): Collection<TResult>;\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap(): Collection<string>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap<TResult = any>(iteratee: ListIterator<T, Many<TResult>> | PropertyName): Collection<TResult>;\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap(iteratee: [PropertyName, any] | object): Collection<boolean>;\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap(): T extends Many<infer U> ? Collection<U> : Collection<T>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap<TResult = any>(iteratee: ObjectIterator<T, Many<TResult>> | PropertyName): Collection<TResult>;\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap(iteratee: [PropertyName, any] | object): Collection<boolean>;\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap(): Collection<T[keyof T]>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap<TResult>(iteratee: StringIterator<Many<TResult>>): CollectionChain<TResult>;\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap(): CollectionChain<string>;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap<TResult>(iteratee: StringIterator<Many<TResult>>): CollectionChain<TResult>;\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap(): CollectionChain<string>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap<TResult = any>(iteratee: ListIterator<T, Many<TResult>> | PropertyName): CollectionChain<TResult>;\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap(iteratee: [PropertyName, any] | object): CollectionChain<boolean>;\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap(): T extends Many<infer U> ? CollectionChain<U> : CollectionChain<T>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap<TResult = any>(iteratee: ObjectIterator<T, Many<TResult>> | PropertyName): CollectionChain<TResult>;\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap(iteratee: [PropertyName, any] | object): CollectionChain<boolean>;\\n        /**\\n         * @see _.flatMap\\n         */\\n        flatMap(): CollectionChain<T[keyof T]>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * This method is like `_.flatMap` except that it recursively flattens the\\n         * mapped results.\\n         *\\n         * @since 4.7.0\\n         * @category Collection\\n         * @param collection The collection to iterate over.\\n         * @param [iteratee=_.identity] The function invoked per iteration.\\n         * @returns Returns the new flattened array.\\n         * @example\\n         *\\n         * function duplicate(n) {\\n         *   return [[[n, n]]];\\n         * }\\n         *\\n         * _.flatMapDeep([1, 2], duplicate);\\n         * // => [1, 1, 2, 2]\\n         */\\n        flatMapDeep<T>(collection: Dictionary<ListOfRecursiveArraysOrValues<T> | T> | NumericDictionary<ListOfRecursiveArraysOrValues<T> | T> | null | undefined): T[];\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep<T, TResult>(collection: List<T> | null | undefined, iteratee: ListIterator<T, ListOfRecursiveArraysOrValues<TResult> | TResult>): TResult[];\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep<T extends object, TResult>(collection: T | null | undefined, iteratee: ObjectIterator<T, ListOfRecursiveArraysOrValues<TResult> | TResult>): TResult[];\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep(collection: object | null | undefined, iteratee: string): any[];\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep(collection: object | null | undefined, iteratee: object): boolean[];\\n    }\\n    interface String {\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep<TResult>(iteratee: StringIterator<ListOfRecursiveArraysOrValues<TResult> | TResult>): Collection<TResult>;\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep(): Collection<string>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep<TResult = any>(iteratee: ListIterator<T, ListOfRecursiveArraysOrValues<TResult> | TResult> | PropertyName): Collection<TResult>;\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep(iteratee: [PropertyName, any] | object): Collection<boolean>;\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep(): Collection<T>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep<TResult = any>(iteratee: ObjectIterator<T, ListOfRecursiveArraysOrValues<TResult> | TResult> | PropertyName): Collection<TResult>;\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep(iteratee: [PropertyName, any] | object): Collection<boolean>;\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep(): Collection<T[keyof T]>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep<TResult>(iteratee: StringIterator<ListOfRecursiveArraysOrValues<TResult> | TResult>): CollectionChain<TResult>;\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep(): CollectionChain<string>;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep<TResult>(iteratee: StringIterator<ListOfRecursiveArraysOrValues<TResult> | TResult>): CollectionChain<TResult>;\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep(): CollectionChain<string>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep<TResult = any>(iteratee: ListIterator<T, ListOfRecursiveArraysOrValues<TResult> | TResult> | PropertyName): CollectionChain<TResult>;\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep(iteratee: [PropertyName, any] | object): CollectionChain<boolean>;\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep(): CollectionChain<T>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep<TResult = any>(iteratee: ObjectIterator<T, ListOfRecursiveArraysOrValues<TResult> | TResult> | PropertyName): CollectionChain<TResult>;\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep(iteratee: [PropertyName, any] | object): CollectionChain<boolean>;\\n        /**\\n         * @see _.flatMapDeep\\n         */\\n        flatMapDeep(): CollectionChain<T[keyof T]>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * This method is like `_.flatMap` except that it recursively flattens the\\n         * mapped results up to `depth` times.\\n         *\\n         * @since 4.7.0\\n         * @category Collection\\n         * @param collection The collection to iterate over.\\n         * @param [iteratee=_.identity] The function invoked per iteration.\\n         * @param [depth=1] The maximum recursion depth.\\n         * @returns Returns the new flattened array.\\n         * @example\\n         *\\n         * function duplicate(n) {\\n         *   return [[[n, n]]];\\n         * }\\n         *\\n         * _.flatMapDepth([1, 2], duplicate, 2);\\n         * // => [[1, 1], [2, 2]]\\n         */\\n        flatMapDepth<T>(collection: Dictionary<ListOfRecursiveArraysOrValues<T> | T> | NumericDictionary<ListOfRecursiveArraysOrValues<T> | T> | null | undefined): T[];\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth<T, TResult>(collection: List<T> | null | undefined, iteratee: ListIterator<T, ListOfRecursiveArraysOrValues<TResult> | TResult>, depth?: number): TResult[];\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth<T extends object, TResult>(collection: T | null | undefined, iteratee: ObjectIterator<T, ListOfRecursiveArraysOrValues<TResult> | TResult>, depth?: number): TResult[];\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth(collection: object | null | undefined, iteratee: string, depth?: number): any[];\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth(collection: object | null | undefined, iteratee: object, depth?: number): boolean[];\\n    }\\n    interface String {\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth<TResult>(iteratee: StringIterator<ListOfRecursiveArraysOrValues<TResult> | TResult>, depth?: number): Collection<TResult>;\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth(depth?: number): Collection<string>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth<TResult = any>(iteratee: ListIterator<T, ListOfRecursiveArraysOrValues<TResult> | TResult> | PropertyName, depth?: number): Collection<TResult>;\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth(iteratee: [PropertyName, any] | object, depth?: number): Collection<boolean>;\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth(depth?: number): Collection<T>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth<TResult = any>(iteratee: ObjectIterator<T, ListOfRecursiveArraysOrValues<TResult> | TResult> | PropertyName, depth?: number): Collection<TResult>;\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth(iteratee: [PropertyName, any] | object, depth?: number): Collection<boolean>;\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth(depth?: number): Collection<T[keyof T]>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth<TResult>(iteratee: StringIterator<ListOfRecursiveArraysOrValues<TResult> | TResult>, depth?: number): CollectionChain<TResult>;\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth(depth?: number): CollectionChain<string>;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth<TResult>(iteratee: StringIterator<ListOfRecursiveArraysOrValues<TResult> | TResult>, depth?: number): CollectionChain<TResult>;\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth(depth?: number): CollectionChain<string>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth<TResult = any>(iteratee: ListIterator<T, ListOfRecursiveArraysOrValues<TResult> | TResult> | PropertyName, depth?: number): CollectionChain<TResult>;\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth(iteratee: [PropertyName, any] | object, depth?: number): CollectionChain<boolean>;\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth(depth?: number): CollectionChain<T>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth<TResult = any>(iteratee: ObjectIterator<T, ListOfRecursiveArraysOrValues<TResult> | TResult> | PropertyName, depth?: number): CollectionChain<TResult>;\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth(iteratee: [PropertyName, any] | object, depth?: number): CollectionChain<boolean>;\\n        /**\\n         * @see _.flatMapDepth\\n         */\\n        flatMapDepth(depth?: number): CollectionChain<T[keyof T]>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Iterates over elements of collection invoking iteratee for each element. The iteratee is invoked with three arguments:\\n         * (value, index|key, collection). Iteratee functions may exit iteration early by explicitly returning false.\\n         *\\n         * Note: As with other \\\"Collections\\\" methods, objects with a \\\"length\\\" property are iterated like arrays. To\\n         * avoid this behavior _.forIn or _.forOwn may be used for object iteration.\\n         *\\n         * @alias _.each\\n         *\\n         * @param collection The collection to iterate over.\\n         * @param iteratee The function invoked per iteration.\\n         */\\n        forEach<T>(collection: T[], iteratee?: ArrayIterator<T, any>): T[];\\n        /**\\n         * @see _.forEach\\n         */\\n        forEach(collection: string, iteratee?: StringIterator<any>): string;\\n        /**\\n         * @see _.forEach\\n         */\\n        forEach<T>(collection: List<T>, iteratee?: ListIterator<T, any>): List<T>;\\n        /**\\n         * @see _.forEach\\n         */\\n        forEach<T extends object>(collection: T, iteratee?: ObjectIterator<T, any>): T;\\n        /**\\n         * @see _.forEach\\n         */\\n        forEach<T, TArray extends T[] | null | undefined>(collection: TArray & (T[] | null | undefined), iteratee?: ArrayIterator<T, any>): TArray;\\n        /**\\n         * @see _.forEach\\n         */\\n        forEach<TString extends string | null | undefined>(collection: TString, iteratee?: StringIterator<any>): TString;\\n        /**\\n         * @see _.forEach\\n         */\\n        forEach<T, TList extends List<T> | null | undefined>(collection: TList & (List<T> | null | undefined), iteratee?: ListIterator<T, any>): TList;\\n        /**\\n         * @see _.forEach\\n         */\\n        forEach<T extends object>(collection: T | null | undefined, iteratee?: ObjectIterator<T, any>): T | null | undefined;\\n    }\\n    interface String {\\n        /**\\n         * @see _.forEach\\n         */\\n        forEach(iteratee?: StringIterator<any>): String;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.forEach\\n         */\\n        forEach(iteratee?: ObjectIterator<T, any>): Object<T>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.forEach\\n         */\\n        forEach(iteratee?: ListIterator<T, any>): Collection<T>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.forEach\\n         */\\n        forEach(iteratee?: StringIterator<any>): StringChain;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.forEach\\n         */\\n        forEach(iteratee?: StringIterator<any>): StringNullableChain;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.forEach\\n         */\\n        forEach(iteratee?: ObjectIterator<T, any>): ObjectChain<T>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.forEach\\n         */\\n        forEach(iteratee?: ListIterator<T, any>): CollectionChain<T>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * This method is like _.forEach except that it iterates over elements of collection from right to left.\\n         *\\n         * @alias _.eachRight\\n         *\\n         * @param collection The collection to iterate over.\\n         * @param iteratee The function called per iteration.\\n         */\\n        forEachRight<T>(collection: T[], iteratee?: ArrayIterator<T, any>): T[];\\n        /**\\n         * @see _.forEachRight\\n         */\\n        forEachRight(collection: string, iteratee?: StringIterator<any>): string;\\n        /**\\n         * @see _.forEachRight\\n         */\\n        forEachRight<T>(collection: List<T>, iteratee?: ListIterator<T, any>): List<T>;\\n        /**\\n         * @see _.forEachRight\\n         */\\n        forEachRight<T extends object>(collection: T, iteratee?: ObjectIterator<T, any>): T;\\n        /**\\n         * @see _.forEachRight\\n         */\\n        forEachRight<T, TArray extends T[] | null | undefined>(collection: TArray & (T[] | null | undefined), iteratee?: ArrayIterator<T, any>): TArray;\\n        /**\\n         * @see _.forEachRight\\n         */\\n        forEachRight<TString extends string | null | undefined>(collection: TString, iteratee?: StringIterator<any>): TString;\\n        /**\\n         * @see _.forEachRight\\n         */\\n        forEachRight<T, TList extends List<T> | null | undefined>(collection: TList & (List<T> | null | undefined), iteratee?: ListIterator<T, any>): TList;\\n        /**\\n         * @see _.forEachRight\\n         */\\n        forEachRight<T extends object>(collection: T | null | undefined, iteratee?: ObjectIterator<T, any>): T | null | undefined;\\n    }\\n    interface String {\\n        /**\\n         * @see _.forEachRight\\n         */\\n        forEachRight(iteratee?: StringIterator<any>): String;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.forEachRight\\n         */\\n        forEachRight(iteratee?: ObjectIterator<T, any>): Object<T>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.forEachRight\\n         */\\n        forEachRight(iteratee?: ListIterator<T, any>): Collection<T>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.forEachRight\\n         */\\n        forEachRight(iteratee?: StringIterator<any>): StringChain;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.forEachRight\\n         */\\n        forEachRight(iteratee?: StringIterator<any>): StringNullableChain;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.forEachRight\\n         */\\n        forEachRight(iteratee?: ObjectIterator<T, any>): ObjectChain<T>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.forEachRight\\n         */\\n        forEachRight(iteratee?: ListIterator<T, any>): CollectionChain<T>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Creates an object composed of keys generated from the results of running each element of collection through\\n         * iteratee. The corresponding value of each key is an array of the elements responsible for generating the\\n         * key. The iteratee is invoked with one argument: (value).\\n         *\\n         * @param collection The collection to iterate over.\\n         * @param iteratee The function invoked per iteration.\\n         * @return Returns the composed aggregate object.\\n         */\\n        groupBy<T>(collection: List<T> | null | undefined, iteratee?: ValueIteratee<T>): Dictionary<T[]>;\\n        /**\\n         * @see _.groupBy\\n         */\\n        groupBy<T extends object>(collection: T | null | undefined, iteratee?: ValueIteratee<T[keyof T]>): Dictionary<Array<T[keyof T]>>;\\n    }\\n    interface String {\\n        /**\\n         * @see _.groupBy\\n         */\\n        groupBy(iteratee?: ValueIteratee<string>): Object<Dictionary<string[]>>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.groupBy\\n         */\\n        groupBy(iteratee?: ValueIteratee<T>): Object<Dictionary<T[]>>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.groupBy\\n         */\\n        groupBy(iteratee?: ValueIteratee<T[keyof T]>): Object<Dictionary<Array<T[keyof T]>>>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.groupBy\\n         */\\n        groupBy(iteratee?: ValueIteratee<string>): ObjectChain<Dictionary<string[]>>;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.groupBy\\n         */\\n        groupBy(iteratee?: ValueIteratee<string>): ObjectChain<Dictionary<string[]>>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.groupBy\\n         */\\n        groupBy(iteratee?: ValueIteratee<T>): ObjectChain<Dictionary<T[]>>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.groupBy\\n         */\\n        groupBy(iteratee?: ValueIteratee<T[keyof T]>): ObjectChain<Dictionary<Array<T[keyof T]>>>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Checks if target is in collection using SameValueZero for equality comparisons. If fromIndex is negative,\\n         * it’s used as the offset from the end of collection.\\n         *\\n         * @param collection The collection to search.\\n         * @param target The value to search for.\\n         * @param fromIndex The index to search from.\\n         * @return True if the target element is found, else false.\\n         */\\n        includes<T>(collection: Dictionary<T> | NumericDictionary<T> | null | undefined, target: T, fromIndex?: number): boolean;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.includes\\n         */\\n        includes(target: T[keyof T], fromIndex?: number): boolean;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.includes\\n         */\\n        includes(target: T, fromIndex?: number): boolean;\\n    }\\n    interface String {\\n        /**\\n         * @see _.includes\\n         */\\n        includes(target: string, fromIndex?: number): boolean;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.includes\\n         */\\n        includes(target: T[keyof T], fromIndex?: number): PrimitiveChain<boolean>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.includes\\n         */\\n        includes(target: T, fromIndex?: number): PrimitiveChain<boolean>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.includes\\n         */\\n        includes(target: string, fromIndex?: number): PrimitiveChain<boolean>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n        * Invokes the method named by methodName on each element in the collection returning\\n        * an array of the results of each invoked method. Additional arguments will be provided\\n        * to each invoked method. If methodName is a function it will be invoked for, and this\\n        * bound to, each element in the collection.\\n        * @param collection The collection to iterate over.\\n        * @param methodName The name of the method to invoke.\\n        * @param args Arguments to invoke the method with.\\n         */\\n        invokeMap(collection: object | null | undefined, methodName: string, ...args: any[]): any[];\\n        /**\\n         * @see _.invokeMap\\n         */\\n        invokeMap<TResult>(collection: object | null | undefined, method: (...args: any[]) => TResult, ...args: any[]): TResult[];\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.invokeMap\\n         */\\n        invokeMap(methodName: string, ...args: any[]): Collection<any>;\\n        /**\\n         * @see _.invokeMap\\n         */\\n        invokeMap<TResult>(method: (...args: any[]) => TResult, ...args: any[]): Collection<TResult>;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.invokeMap\\n         */\\n        invokeMap(methodName: string, ...args: any[]): CollectionChain<any>;\\n        /**\\n         * @see _.invokeMap\\n         */\\n        invokeMap<TResult>(method: (...args: any[]) => TResult, ...args: any[]): CollectionChain<TResult>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Creates an object composed of keys generated from the results of running each element of collection through\\n         * iteratee. The corresponding value of each key is the last element responsible for generating the key. The\\n         * iteratee function is invoked with one argument: (value).\\n         *\\n         * @param collection The collection to iterate over.\\n         * @param iteratee The function invoked per iteration.\\n         * @return Returns the composed aggregate object.\\n         */\\n        keyBy<T>(collection: List<T> | null | undefined, iteratee?: ValueIterateeCustom<T, PropertyName>): Dictionary<T>;\\n        /**\\n         * @see _.keyBy\\n         */\\n        keyBy<T extends object>(collection: T | null | undefined, iteratee?: ValueIterateeCustom<T[keyof T], PropertyName>): Dictionary<T[keyof T]>;\\n    }\\n    interface String {\\n        /**\\n         * @see _.keyBy\\n         */\\n        keyBy(iteratee?: ValueIterateeCustom<string, PropertyName>): Object<Dictionary<string>>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.keyBy\\n         */\\n        keyBy(iteratee?: ValueIterateeCustom<T, PropertyName>): Object<Dictionary<T>>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.keyBy\\n         */\\n        keyBy(iteratee?: ValueIterateeCustom<T[keyof T], PropertyName>): Object<Dictionary<T[keyof T]>>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.keyBy\\n         */\\n        keyBy(iteratee?: ValueIterateeCustom<string, PropertyName>): ObjectChain<Dictionary<string>>;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.keyBy\\n         */\\n        keyBy(iteratee?: ValueIterateeCustom<string, PropertyName>): ObjectChain<Dictionary<string>>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.keyBy\\n         */\\n        keyBy(iteratee?: ValueIterateeCustom<T, PropertyName>): ObjectChain<Dictionary<T>>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.keyBy\\n         */\\n        keyBy(iteratee?: ValueIterateeCustom<T[keyof T], PropertyName>): ObjectChain<Dictionary<T[keyof T]>>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Creates an array of values by running each element in collection through iteratee. The iteratee is\\n         * invoked with three arguments: (value, index|key, collection).\\n         *\\n         * Many lodash methods are guarded to work as iteratees for methods like _.every, _.filter, _.map, _.mapValues,\\n         * _.reject, and _.some.\\n         *\\n         * The guarded methods are:\\n         * ary, callback, chunk, clone, create, curry, curryRight, drop, dropRight, every, fill, flatten, invert, max,\\n         * min, parseInt, slice, sortBy, take, takeRight, template, trim, trimLeft, trimRight, trunc, random, range,\\n         * sample, some, sum, uniq, and words\\n         *\\n         * @param collection The collection to iterate over.\\n         * @param iteratee The function invoked per iteration.\\n         * @return Returns the new mapped array.\\n         */\\n        map<T, TResult>(collection: T[] | null | undefined, iteratee: ArrayIterator<T, TResult>): TResult[];\\n        /**\\n         * @see _.map\\n         */\\n        map<T, TResult>(collection: List<T> | null | undefined, iteratee: ListIterator<T, TResult>): TResult[];\\n        /**\\n         * @see _.map\\n         */\\n        map<T>(collection: Dictionary<T> | NumericDictionary<T> | null | undefined): T[];\\n        /**\\n         * @see _.map\\n         */\\n        map<T extends object, TResult>(collection: T | null | undefined, iteratee: ObjectIterator<T, TResult>): TResult[];\\n        /**\\n         * @see _.map\\n         */\\n        map<T, K extends keyof T>(collection: Dictionary<T> | NumericDictionary<T> | null | undefined, iteratee: K): Array<T[K]>;\\n        /**\\n         * @see _.map\\n         */\\n        map<T>(collection: Dictionary<T> | NumericDictionary<T> | null | undefined, iteratee?: string): any[];\\n        /**\\n         * @see _.map\\n         */\\n        map<T>(collection: Dictionary<T> | NumericDictionary<T> | null | undefined, iteratee?: object): boolean[];\\n    }\\n\\n    interface String {\\n        /**\\n         * @see _.map\\n         */\\n        map<TResult>(iteratee: StringIterator<TResult>): Collection<TResult>;\\n        /**\\n         * @see _.map\\n         */\\n        map(): Collection<string>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.map\\n         */\\n        map<K extends keyof T>(key: K): Collection<T[K]>;\\n        /**\\n         * @see _.map\\n         */\\n        map<TResult>(iteratee: ListIterator<T, TResult>): Collection<TResult>;\\n        /**\\n         * @see _.map\\n         */\\n        map(iteratee: PropertyName): Collection<any>;\\n        /**\\n         * @see _.map\\n         */\\n        map(iteratee: [PropertyName, any] | object): Collection<boolean>;\\n        /**\\n         * @see _.map\\n         */\\n        map(): Collection<T>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.map\\n         */\\n        map<K extends keyof T[keyof T]>(key: K): Collection<T[keyof T][K]>;\\n        /**\\n         * @see _.map\\n         */\\n        map<TResult>(iteratee: ObjectIterator<T, TResult>): Collection<TResult>;\\n        /**\\n         * @see _.map\\n         */\\n        map(iteratee: PropertyName): Collection<any>;\\n        /**\\n         * @see _.map\\n         */\\n        map(iteratee: [PropertyName, any] | object): Collection<boolean>;\\n        /**\\n         * @see _.map\\n         */\\n        map(): Collection<T[keyof T]>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.map\\n         */\\n        map<TResult>(iteratee: StringIterator<TResult>): CollectionChain<TResult>;\\n        /**\\n         * @see _.map\\n         */\\n        map(): CollectionChain<string>;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.map\\n         */\\n        map<TResult>(iteratee: StringIterator<TResult>): CollectionChain<TResult>;\\n        /**\\n         * @see _.map\\n         */\\n        map(): CollectionChain<string>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.map\\n         */\\n        map<K extends keyof T>(key: K): CollectionChain<T[K]>;\\n        /**\\n         * @see _.map\\n         */\\n        map<TResult>(iteratee: ListIterator<T, TResult>): CollectionChain<TResult>;\\n        /**\\n         * @see _.map\\n         */\\n        map(iteratee: PropertyName): CollectionChain<any>;\\n        /**\\n         * @see _.map\\n         */\\n        map(iteratee: [PropertyName, any] | object): CollectionChain<boolean>;\\n        /**\\n         * @see _.map\\n         */\\n        map(): CollectionChain<T>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.map\\n         */\\n        map<K extends keyof T[keyof T]>(key: K): CollectionChain<T[keyof T][K]>;\\n        /**\\n         * @see _.map\\n         */\\n        map<TResult>(iteratee: ObjectIterator<T, TResult>): CollectionChain<TResult>;\\n        /**\\n         * @see _.map\\n         */\\n        map(iteratee: PropertyName): CollectionChain<any>;\\n        /**\\n         * @see _.map\\n         */\\n        map(iteratee: [PropertyName, any] | object): CollectionChain<boolean>;\\n        /**\\n         * @see _.map\\n         */\\n        map(): CollectionChain<T[keyof T]>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * This method is like `_.sortBy` except that it allows specifying the sort\\n         * orders of the iteratees to sort by. If `orders` is unspecified, all values\\n         * are sorted in ascending order. Otherwise, specify an order of \\\"desc\\\" for\\n         * descending or \\\"asc\\\" for ascending sort order of corresponding values.\\n         *\\n         * @category Collection\\n         * @param collection The collection to iterate over.\\n         * @param [iteratees=[_.identity]] The iteratees to sort by.\\n         * @param [orders] The sort orders of `iteratees`.\\n         * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.\\n         * @returns Returns the new sorted array.\\n         * @example\\n         *\\n         * var users = [\\n         *   { 'user': 'fred',   'age': 48 },\\n         *   { 'user': 'barney', 'age': 34 },\\n         *   { 'user': 'fred',   'age': 42 },\\n         *   { 'user': 'barney', 'age': 36 }\\n         * ];\\n         *\\n         * // sort by `user` in ascending order and by `age` in descending order\\n         * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\\n         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\\n         */\\n        orderBy<T>(collection: List<T> | null | undefined, iteratees?: Many<ListIterator<T, NotVoid>>, orders?: Many<boolean|\\\"asc\\\"|\\\"desc\\\">): T[];\\n        /**\\n         * @see _.orderBy\\n         */\\n        orderBy<T>(collection: List<T> | null | undefined, iteratees?: Many<ListIteratee<T>>, orders?: Many<boolean|\\\"asc\\\"|\\\"desc\\\">): T[];\\n        /**\\n         * @see _.orderBy\\n         */\\n        orderBy<T extends object>(collection: T | null | undefined, iteratees?: Many<ObjectIterator<T, NotVoid>>, orders?: Many<boolean|\\\"asc\\\"|\\\"desc\\\">): Array<T[keyof T]>;\\n        /**\\n         * @see _.orderBy\\n         */\\n        orderBy<T extends object>(collection: T | null | undefined, iteratees?: Many<ObjectIteratee<T>>, orders?: Many<boolean|\\\"asc\\\"|\\\"desc\\\">): Array<T[keyof T]>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.orderBy\\n         */\\n        orderBy(iteratees?: Many<ListIterator<T, NotVoid> | PropertyName | PartialShallow<T>>, orders?: Many<boolean|\\\"asc\\\"|\\\"desc\\\">): Collection<T>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.orderBy\\n         */\\n        orderBy(iteratees?: Many<ObjectIterator<T, NotVoid>>, orders?: Many<boolean|\\\"asc\\\"|\\\"desc\\\">): Collection<T[keyof T]>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.orderBy\\n         */\\n        orderBy(iteratees?: Many<ListIterator<T, NotVoid> | PropertyName | PartialShallow<T>>, orders?: Many<boolean|\\\"asc\\\"|\\\"desc\\\">): CollectionChain<T>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.orderBy\\n         */\\n        orderBy(iteratees?: Many<ObjectIterator<T, NotVoid>>, orders?: Many<boolean|\\\"asc\\\"|\\\"desc\\\">): CollectionChain<T[keyof T]>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n        * Creates an array of elements split into two groups, the first of which contains elements predicate returns truthy for,\\n        * while the second of which contains elements predicate returns falsey for.\\n        * The predicate is invoked with three arguments: (value, index|key, collection).\\n        *\\n        * @param collection The collection to iterate over.\\n        * @param callback The function called per iteration.\\n        * @return Returns the array of grouped elements.\\n         */\\n        partition<T, U extends T>(collection: List<T> | null | undefined, callback: ValueIteratorTypeGuard<T, U>): [U[], Array<Exclude<T, U>>];\\n        /**\\n         * @see _.partition\\n         */\\n        partition<T>(collection: List<T> | null | undefined, callback: ValueIteratee<T>): [T[], T[]];\\n        /**\\n         * @see _.partition\\n         */\\n        partition<T extends object>(collection: T | null | undefined, callback: ValueIteratee<T[keyof T]>): [Array<T[keyof T]>, Array<T[keyof T]>];\\n    }\\n    interface String {\\n        /**\\n         * @see _.partition\\n         */\\n        partition(callback: StringIterator<NotVoid>): LoDashImplicitWrapper<[string[], string[]]>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.partition\\n         */\\n        partition<U extends T>(callback: ValueIteratorTypeGuard<T, U>): LoDashImplicitWrapper<[U[], Array<Exclude<T, U>>]>;\\n        /**\\n         * @see _.partition\\n         */\\n        partition(callback: ValueIteratee<T>): LoDashImplicitWrapper<[T[], T[]]>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.partition\\n         */\\n        partition(callback: ValueIteratee<T[keyof T]>): LoDashImplicitWrapper<[Array<T[keyof T]>, Array<T[keyof T]>]>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.partition\\n         */\\n        partition(callback: StringIterator<NotVoid>): LoDashExplicitWrapper<[string[], string[]]>;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.partition\\n         */\\n        partition(callback: StringIterator<NotVoid>): LoDashExplicitWrapper<[string[], string[]]>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.partition\\n         */\\n        partition<U extends T>(callback: ValueIteratorTypeGuard<T, U>): LoDashExplicitWrapper<[U[], Array<Exclude<T, U>>]>;\\n        /**\\n         * @see _.partition\\n         */\\n        partition(callback: ValueIteratee<T>): LoDashExplicitWrapper<[T[], T[]]>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.partition\\n         */\\n        partition(callback: ValueIteratee<T[keyof T]>): LoDashExplicitWrapper<[Array<T[keyof T]>, Array<T[keyof T]>]>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n        * Reduces a collection to a value which is the accumulated result of running each\\n        * element in the collection through the callback, where each successive callback execution\\n        * consumes the return value of the previous execution. If accumulator is not provided the\\n        * first element of the collection will be used as the initial accumulator value. The callback\\n        * is invoked with four arguments: (accumulator, value, index|key, collection).\\n        * @param collection The collection to iterate over.\\n        * @param callback The function called per iteration.\\n        * @param accumulator Initial value of the accumulator.\\n        * @return Returns the accumulated value.\\n         */\\n        reduce<T, TResult>(collection: T[] | null | undefined, callback: MemoListIterator<T, TResult, T[]>, accumulator: TResult): TResult;\\n        /**\\n         * @see _.reduce\\n         */\\n        reduce<T, TResult>(collection: List<T> | null | undefined, callback: MemoListIterator<T, TResult, List<T>>, accumulator: TResult): TResult;\\n        /**\\n         * @see _.reduce\\n         */\\n        reduce<T extends object, TResult>(collection: T | null | undefined, callback: MemoObjectIterator<T[keyof T], TResult, T>, accumulator: TResult): TResult;\\n        /**\\n         * @see _.reduce\\n         */\\n        reduce<T>(collection: T[] | null | undefined, callback: MemoListIterator<T, T, T[]>): T | undefined;\\n        /**\\n         * @see _.reduce\\n         */\\n        reduce<T>(collection: List<T> | null | undefined, callback: MemoListIterator<T, T, List<T>>): T | undefined;\\n        /**\\n         * @see _.reduce\\n         */\\n        reduce<T extends object>(collection: T | null | undefined, callback: MemoObjectIterator<T[keyof T], T[keyof T], T>): T[keyof T] | undefined;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.reduce\\n         */\\n        reduce<TResult>(callback: MemoListIterator<T, TResult, List<T>>, accumulator: TResult): TResult;\\n        /**\\n         * @see _.reduce\\n         */\\n        reduce(callback: MemoListIterator<T, T, List<T>>): T | undefined;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.reduce\\n         */\\n        reduce<TResult>(callback: MemoObjectIterator<T[keyof T], TResult, T>, accumulator: TResult): TResult;\\n        /**\\n         * @see _.reduce\\n         */\\n        reduce(callback: MemoObjectIterator<T[keyof T], T[keyof T], T>): T[keyof T] | undefined;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.reduce\\n         */\\n        reduce<TResult>(callback: MemoListIterator<T, TResult, List<T>>, accumulator: TResult): ExpChain<TResult>;\\n        /**\\n         * @see _.reduce\\n         */\\n        reduce(callback: MemoListIterator<T, T, List<T>>): ExpChain<T | undefined>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.reduce\\n         */\\n        reduce<TResult>(callback: MemoObjectIterator<T[keyof T], TResult, T>, accumulator: TResult): ExpChain<TResult>;\\n        /**\\n         * @see _.reduce\\n         */\\n        reduce(callback: MemoObjectIterator<T[keyof T], T[keyof T], T>): ExpChain<T[keyof T] | undefined>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n        * This method is like _.reduce except that it iterates over elements of a collection from\\n        * right to left.\\n        * @param collection The collection to iterate over.\\n        * @param callback The function called per iteration.\\n        * @param accumulator Initial value of the accumulator.\\n        * @return The accumulated value.\\n         */\\n        reduceRight<T, TResult>(collection: T[] | null | undefined, callback: MemoListIterator<T, TResult, T[]>, accumulator: TResult): TResult;\\n        /**\\n         * @see _.reduceRight\\n         */\\n        reduceRight<T, TResult>(collection: List<T> | null | undefined, callback: MemoListIterator<T, TResult, List<T>>, accumulator: TResult): TResult;\\n        /**\\n         * @see _.reduceRight\\n         */\\n        reduceRight<T extends object, TResult>(collection: T | null | undefined, callback: MemoObjectIterator<T[keyof T], TResult, T>, accumulator: TResult): TResult;\\n        /**\\n         * @see _.reduceRight\\n         */\\n        reduceRight<T>(collection: T[] | null | undefined, callback: MemoListIterator<T, T, T[]>): T | undefined;\\n        /**\\n         * @see _.reduceRight\\n         */\\n        reduceRight<T>(collection: List<T> | null | undefined, callback: MemoListIterator<T, T, List<T>>): T | undefined;\\n        /**\\n         * @see _.reduceRight\\n         */\\n        reduceRight<T extends object>(collection: T | null | undefined, callback: MemoObjectIterator<T[keyof T], T[keyof T], T>): T[keyof T] | undefined;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.reduceRight\\n         */\\n        reduceRight<TResult>(callback: MemoListIterator<T, TResult, List<T>>, accumulator: TResult): TResult;\\n        /**\\n         * @see _.reduceRight\\n         */\\n        reduceRight(callback: MemoListIterator<T, T, List<T>>): T | undefined;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.reduceRight\\n         */\\n        reduceRight<TResult>(callback: MemoObjectIterator<T[keyof T], TResult, T>, accumulator: TResult): TResult;\\n        /**\\n         * @see _.reduceRight\\n         */\\n        reduceRight(callback: MemoObjectIterator<T[keyof T], T[keyof T], T>): T[keyof T] | undefined;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.reduceRight\\n         */\\n        reduceRight<TResult>(callback: MemoListIterator<T, TResult, List<T>>, accumulator: TResult): ExpChain<TResult>;\\n        /**\\n         * @see _.reduceRight\\n         */\\n        reduceRight(callback: MemoListIterator<T, T, List<T>>): ExpChain<T | undefined>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.reduceRight\\n         */\\n        reduceRight<TResult>(callback: MemoObjectIterator<T[keyof T], TResult, T>, accumulator: TResult): ExpChain<TResult>;\\n        /**\\n         * @see _.reduceRight\\n         */\\n        reduceRight(callback: MemoObjectIterator<T[keyof T], T[keyof T], T>): ExpChain<T[keyof T] | undefined>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * The opposite of _.filter; this method returns the elements of collection that predicate does not return\\n         * truthy for.\\n         *\\n         * @param collection The collection to iterate over.\\n         * @param predicate The function invoked per iteration.\\n         * @return Returns the new filtered array.\\n         */\\n        reject(collection: string | null | undefined, predicate?: StringIterator<boolean>): string[];\\n        /**\\n         * @see _.reject\\n         */\\n        reject<T>(collection: List<T> | null | undefined, predicate?: ListIterateeCustom<T, boolean>): T[];\\n        /**\\n         * @see _.reject\\n         */\\n        reject<T extends object>(collection: T | null | undefined, predicate?: ObjectIterateeCustom<T, boolean>): Array<T[keyof T]>;\\n    }\\n    interface String {\\n        /**\\n         * @see _.reject\\n         */\\n        reject(predicate?: StringIterator<boolean>): Collection<string>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.reject\\n         */\\n        reject(predicate?: ListIterateeCustom<T, boolean>): Collection<T>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.reject\\n         */\\n        reject(predicate?: ObjectIterateeCustom<T, boolean>): Collection<T[keyof T]>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.reject\\n         */\\n        reject(predicate?: StringIterator<boolean>): CollectionChain<string>;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.reject\\n         */\\n        reject(predicate?: StringIterator<boolean>): CollectionChain<string>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.reject\\n         */\\n        reject(predicate?: ListIterateeCustom<T, boolean>): CollectionChain<T>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.reject\\n         */\\n        reject(predicate?: ObjectIterateeCustom<T, boolean>): CollectionChain<T[keyof T]>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Gets a random element from collection.\\n         *\\n         * @param collection The collection to sample.\\n         * @return Returns the random element.\\n         */\\n        sample<T>(collection: Dictionary<T> | NumericDictionary<T> | null | undefined): T | undefined;\\n        /**\\n         * @see _.sample\\n         */\\n        sample<T extends object>(collection: T | null | undefined): T[keyof T] | undefined;\\n    }\\n    interface String {\\n        /**\\n         * @see _.sample\\n         */\\n        sample(): string | undefined;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.sample\\n         */\\n        sample(): T | undefined;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.sample\\n         */\\n        sample(): T[keyof T] | undefined;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.sample\\n         */\\n        sample(): StringNullableChain;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.sample\\n         */\\n        sample(): StringNullableChain;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.sample\\n         */\\n        sample(): ExpChain<T | undefined>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.sample\\n         */\\n        sample(): ExpChain<T[keyof T] | undefined>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Gets n random elements at unique keys from collection up to the size of collection.\\n         *\\n         * @param collection The collection to sample.\\n         * @param n The number of elements to sample.\\n         * @return Returns the random elements.\\n         */\\n        sampleSize<T>(collection: Dictionary<T> | NumericDictionary<T> | null | undefined, n?: number): T[];\\n        /**\\n         * @see _.sampleSize\\n         */\\n        sampleSize<T extends object>(collection: T | null | undefined, n?: number): Array<T[keyof T]>;\\n    }\\n    interface String {\\n        /**\\n         * @see _.sampleSize\\n         */\\n        sampleSize(n?: number): Collection<string>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.sampleSize\\n         */\\n        sampleSize(n?: number): Collection<T>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.sampleSize\\n         */\\n        sampleSize(n?: number): Collection<T[keyof T]>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.sampleSize\\n         */\\n        sampleSize(n?: number): CollectionChain<string>;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.sampleSize\\n         */\\n        sampleSize(n?: number): CollectionChain<string>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.sampleSize\\n         */\\n        sampleSize(n?: number): CollectionChain<T>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.sampleSize\\n         */\\n        sampleSize(n?: number): CollectionChain<T[keyof T]>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Creates an array of shuffled values, using a version of the Fisher-Yates shuffle.\\n         *\\n         * @param collection The collection to shuffle.\\n         * @return Returns the new shuffled array.\\n         */\\n        shuffle<T>(collection: List<T> | null | undefined): T[];\\n        /**\\n         * @see _.shuffle\\n         */\\n        shuffle<T extends object>(collection: T | null | undefined): Array<T[keyof T]>;\\n    }\\n    interface String {\\n        /**\\n         * @see _.shuffle\\n         */\\n        shuffle(): Collection<string>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.shuffle\\n         */\\n        shuffle(): Collection<T>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.shuffle\\n         */\\n        shuffle(): Collection<T[keyof T]>;\\n    }\\n    interface StringChain {\\n        /**\\n         * @see _.shuffle\\n         */\\n        shuffle(): CollectionChain<string>;\\n    }\\n    interface StringNullableChain {\\n        /**\\n         * @see _.shuffle\\n         */\\n        shuffle(): CollectionChain<string>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.shuffle\\n         */\\n        shuffle(): CollectionChain<T>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.shuffle\\n         */\\n        shuffle(): CollectionChain<T[keyof T]>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Gets the size of collection by returning its length for array-like values or the number of own enumerable\\n         * properties for objects.\\n         *\\n         * @param collection The collection to inspect.\\n         * @return Returns the size of collection.\\n         */\\n        size(collection: object | string | null | undefined): number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.size\\n         */\\n        size(): number;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.size\\n         */\\n        size(): PrimitiveChain<number>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Checks if predicate returns truthy for any element of collection. Iteration is stopped once predicate\\n         * returns truthy. The predicate is invoked with three arguments: (value, index|key, collection).\\n         *\\n         * @param collection The collection to iterate over.\\n         * @param predicate The function invoked per iteration.\\n         * @return Returns true if any element passes the predicate check, else false.\\n         */\\n        some<T>(collection: List<T> | null | undefined, predicate?: ListIterateeCustom<T, boolean>): boolean;\\n        /**\\n         * @see _.some\\n         */\\n        some<T extends object>(collection: T | null | undefined, predicate?: ObjectIterateeCustom<T, boolean>): boolean;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.some\\n         */\\n        some(predicate?: ListIterateeCustom<T, boolean>): boolean;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.some\\n         */\\n        some(predicate?: ObjectIterateeCustom<T, boolean>): boolean;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.some\\n         */\\n        some(predicate?: ListIterateeCustom<T, boolean>): PrimitiveChain<boolean>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.some\\n         */\\n        some(predicate?: ObjectIterateeCustom<T, boolean>): PrimitiveChain<boolean>;\\n    }\\n    interface LoDashStatic {\\n        /**\\n         * Creates an array of elements, sorted in ascending order by the results of\\n         * running each element in a collection through each iteratee. This method\\n         * performs a stable sort, that is, it preserves the original sort order of\\n         * equal elements. The iteratees are invoked with one argument: (value).\\n         *\\n         * @category Collection\\n         * @param collection The collection to iterate over.\\n         * @param [iteratees=[_.identity]]\\n         *  The iteratees to sort by, specified individually or in arrays.\\n         * @returns Returns the new sorted array.\\n         * @example\\n         *\\n         * var users = [\\n         *   { 'user': 'fred',   'age': 48 },\\n         *   { 'user': 'barney', 'age': 36 },\\n         *   { 'user': 'fred',   'age': 42 },\\n         *   { 'user': 'barney', 'age': 34 }\\n         * ];\\n         *\\n         * _.sortBy(users, function(o) { return o.user; });\\n         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\\n         *\\n         * _.sortBy(users, ['user', 'age']);\\n         * // => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]\\n         *\\n         * _.sortBy(users, 'user', function(o) {\\n         *   return Math.floor(o.age / 10);\\n         * });\\n         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\\n         */\\n        sortBy<T>(collection: List<T> | null | undefined, ...iteratees: Array<Many<ListIteratee<T>>>): T[];\\n        /**\\n         * @see _.sortBy\\n         */\\n        sortBy<T extends object>(collection: T | null | undefined, ...iteratees: Array<Many<ObjectIteratee<T>>>): Array<T[keyof T]>;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.sortBy\\n         */\\n        sortBy(...iteratees: Array<Many<ListIteratee<T>>>): Collection<T>;\\n    }\\n    interface Object<T> {\\n        /**\\n         * @see _.sortBy\\n         */\\n        sortBy(...iteratees: Array<Many<ObjectIteratee<T>>>): Collection<T[keyof T]>;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.sortBy\\n         */\\n        sortBy(...iteratees: Array<Many<ListIteratee<T>>>): CollectionChain<T>;\\n    }\\n    interface ObjectChain<T> {\\n        /**\\n         * @see _.sortBy\\n         */\\n        sortBy(...iteratees: Array<Many<ObjectIteratee<T>>>): CollectionChain<T[keyof T]>;\\n    }\\n}\\n\";"],"names":[],"sourceRoot":""}