{"version":3,"file":"static/js/8661.d4ac3f05.chunk.js","mappings":"oIAAA","sources":["../node_modules/@types/lodash/common/math.d.ts"],"sourcesContent":["export default \"import _ = require(\\\"../index\\\");\\ndeclare module \\\"../index\\\" {\\n    interface LoDashStatic {\\n        /**\\n         * Adds two numbers.\\n         *\\n         * @param augend The first number to add.\\n         * @param addend The second number to add.\\n         * @return Returns the sum.\\n         */\\n        add(augend: number, addend: number): number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.add\\n         */\\n        add(addend: number): number;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.add\\n         */\\n        add(addend: number): PrimitiveChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Calculates n rounded up to precision.\\n         *\\n         * @param n The number to round up.\\n         * @param precision The precision to round up to.\\n         * @return Returns the rounded up number.\\n         */\\n        ceil(n: number, precision?: number): number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.ceil\\n         */\\n        ceil(precision?: number): number;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.ceil\\n         */\\n        ceil(precision?: number): PrimitiveChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n        * Divide two numbers.\\n        *\\n        * @param dividend The first number in a division.\\n        * @param divisor The second number in a division.\\n        * @returns Returns the quotient.\\n         */\\n        divide(dividend: number, divisor: number): number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.divide\\n         */\\n        divide(divisor: number): number;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.divide\\n         */\\n        divide(divisor: number): PrimitiveChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Calculates n rounded down to precision.\\n         *\\n         * @param n The number to round down.\\n         * @param precision The precision to round down to.\\n         * @return Returns the rounded down number.\\n         */\\n        floor(n: number, precision?: number): number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.floor\\n         */\\n        floor(precision?: number): number;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.floor\\n         */\\n        floor(precision?: number): PrimitiveChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n          * Computes the maximum value of `array`. If `array` is empty or falsey\\n          * `undefined` is returned.\\n          *\\n          * @category Math\\n          * @param array The array to iterate over.\\n          * @returns Returns the maximum value.\\n         */\\n        max<T>(collection: List<T> | null | undefined): T | undefined;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.max\\n         */\\n        max(): T | undefined;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.max\\n         */\\n        max(): ExpChain<T | undefined>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * This method is like `_.max` except that it accepts `iteratee` which is\\n         * invoked for each element in `array` to generate the criterion by which\\n         * the value is ranked. The iteratee is invoked with one argument: (value).\\n         *\\n         * @category Math\\n         * @param array The array to iterate over.\\n         * @param iteratee The iteratee invoked per element.\\n         * @returns Returns the maximum value.\\n         * @example\\n         *\\n         * var objects = [{ 'n': 1 }, { 'n': 2 }];\\n         *\\n         * _.maxBy(objects, function(o) { return o.a; });\\n         * // => { 'n': 2 }\\n         *\\n         * // using the `_.property` iteratee shorthand\\n         * _.maxBy(objects, 'n');\\n         * // => { 'n': 2 }\\n         */\\n        maxBy<T>(collection: List<T> | null | undefined, iteratee?: ValueIteratee<T>): T | undefined;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.maxBy\\n         */\\n        maxBy(iteratee?: ValueIteratee<T>): T | undefined;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.maxBy\\n         */\\n        maxBy(iteratee?: ValueIteratee<T>): ExpChain<T | undefined>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Computes the mean of the values in `array`.\\n         *\\n         * @category Math\\n         * @param array The array to iterate over.\\n         * @returns Returns the mean.\\n         * @example\\n         *\\n         * _.mean([4, 2, 8, 6]);\\n         * // => 5\\n         */\\n        mean(collection: List<any> | null | undefined): number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.mean\\n         */\\n        mean(): number;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.mean\\n         */\\n        mean(): PrimitiveChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Computes the mean of the provided properties of the objects in the `array`\\n         *\\n         * @category Math\\n         * @param array The array to iterate over.\\n         * @param iteratee The iteratee invoked per element.\\n         * @returns Returns the mean.\\n         * @example\\n         *\\n         * _.mean([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], 'n');\\n         * // => 5\\n         */\\n        meanBy<T>(collection: List<T> | null | undefined, iteratee?: ValueIteratee<T>): number;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.meanBy\\n         */\\n        meanBy(iteratee?: ValueIteratee<T>): number;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.meanBy\\n         */\\n        meanBy(iteratee?: ValueIteratee<T>): PrimitiveChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Computes the minimum value of `array`. If `array` is empty or falsey\\n         * `undefined` is returned.\\n         *\\n         * @category Math\\n         * @param array The array to iterate over.\\n         * @returns Returns the minimum value.\\n         */\\n        min<T>(collection: List<T> | null | undefined): T | undefined;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.min\\n         */\\n        min(): T | undefined;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.min\\n         */\\n        min(): ExpChain<T | undefined>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * This method is like `_.min` except that it accepts `iteratee` which is\\n         * invoked for each element in `array` to generate the criterion by which\\n         * the value is ranked. The iteratee is invoked with one argument: (value).\\n         *\\n         * @category Math\\n         * @param array The array to iterate over.\\n         * @param iteratee The iteratee invoked per element.\\n         * @returns Returns the minimum value.\\n         * @example\\n         *\\n         * var objects = [{ 'n': 1 }, { 'n': 2 }];\\n         *\\n         * _.minBy(objects, function(o) { return o.a; });\\n         * // => { 'n': 1 }\\n         *\\n         * // using the `_.property` iteratee shorthand\\n         * _.minBy(objects, 'n');\\n         * // => { 'n': 1 }\\n         */\\n        minBy<T>(collection: List<T> | null | undefined, iteratee?: ValueIteratee<T>): T | undefined;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.minBy\\n         */\\n        minBy(iteratee?: ValueIteratee<T>): T | undefined;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.minBy\\n         */\\n        minBy(iteratee?: ValueIteratee<T>): ExpChain<T | undefined>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Multiply two numbers.\\n         * @param multiplier The first number in a multiplication.\\n         * @param multiplicand The second number in a multiplication.\\n         * @returns Returns the product.\\n         */\\n        multiply(multiplier: number, multiplicand: number): number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.multiply\\n         */\\n        multiply(multiplicand: number): number;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.multiply\\n         */\\n        multiply(multiplicand: number): PrimitiveChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Calculates n rounded to precision.\\n         *\\n         * @param n The number to round.\\n         * @param precision The precision to round to.\\n         * @return Returns the rounded number.\\n         */\\n        round(n: number, precision?: number): number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.round\\n         */\\n        round(precision?: number): number;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.round\\n         */\\n        round(precision?: number): PrimitiveChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Subtract two numbers.\\n         *\\n         * @category Math\\n         * @param minuend The first number in a subtraction.\\n         * @param subtrahend The second number in a subtraction.\\n         * @returns Returns the difference.\\n         * @example\\n         *\\n         * _.subtract(6, 4);\\n         * // => 2\\n         */\\n        subtract(minuend: number, subtrahend: number): number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.subtract\\n         */\\n        subtract(subtrahend: number): number;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.subtract\\n         */\\n        subtract(subtrahend: number): PrimitiveChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * Computes the sum of the values in `array`.\\n         *\\n         * @category Math\\n         * @param array The array to iterate over.\\n         * @returns Returns the sum.\\n         * @example\\n         *\\n         * _.sum([4, 2, 8, 6]);\\n         * // => 20\\n         */\\n        sum(collection: List<any> | null | undefined): number;\\n    }\\n    interface LoDashImplicitWrapper<TValue> {\\n        /**\\n         * @see _.sum\\n         */\\n        sum(): number;\\n    }\\n    interface LoDashExplicitWrapper<TValue> {\\n        /**\\n         * @see _.sum\\n         */\\n        sum(): PrimitiveChain<number>;\\n    }\\n\\n    interface LoDashStatic {\\n        /**\\n         * This method is like `_.sum` except that it accepts `iteratee` which is\\n         * invoked for each element in `array` to generate the value to be summed.\\n         * The iteratee is invoked with one argument: (value).\\n         *\\n         * @category Math\\n         * @param array The array to iterate over.\\n         * @param [iteratee=_.identity] The iteratee invoked per element.\\n         * @returns Returns the sum.\\n         * @example\\n         *\\n         * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\\n         *\\n         * _.sumBy(objects, function(o) { return o.n; });\\n         * // => 20\\n         *\\n         * // using the `_.property` iteratee shorthand\\n         * _.sumBy(objects, 'n');\\n         * // => 20\\n         */\\n        sumBy<T>(collection: List<T> | null | undefined, iteratee?: ((value: T) => number) | string): number;\\n    }\\n    interface Collection<T> {\\n        /**\\n         * @see _.sumBy\\n         */\\n        sumBy(iteratee?: ((value: T) => number) | string): number;\\n    }\\n    interface CollectionChain<T> {\\n        /**\\n         * @see _.sumBy\\n         */\\n        sumBy(iteratee?: ((value: T) => number) | string): PrimitiveChain<number>;\\n    }\\n}\\n\";"],"names":[],"sourceRoot":""}