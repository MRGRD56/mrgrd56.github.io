{"version":3,"file":"static/js/9326.f880594e.chunk.js","mappings":"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","sources":["utils/camelizeKeys.ts","actions/api/appAxios.ts","pages/userInfoPage/UserInfoPage.module.scss","actions/ipapi.co/api/getUserInfo.ts","pages/userInfoPage/UserInfoPage.tsx","utils/getErrorMessage.ts","utils/getScaledScreenSize.ts","utils/getScreenSize.ts"],"sourcesContent":["import { camelCase, isNil } from 'lodash';\n\n//https://stackoverflow.com/a/50620653/14899408\n\nconst camelizeKeys = (obj: any): any => {\n    if (Array.isArray(obj)) {\n        return obj.map((v) => camelizeKeys(v));\n    } else if (!isNil(obj) && obj.constructor === Object) {\n        return Object.keys(obj).reduce(\n            (result, key) => ({\n                ...result,\n                [camelCase(key)]: camelizeKeys(obj[key])\n            }),\n            {}\n        );\n    }\n    return obj;\n};\n\nexport default camelizeKeys;\n","import axios, { AxiosInstance } from 'axios';\nimport call from '../../utils/call';\nimport camelizeKeys from '../../utils/camelizeKeys';\n\nconst appAxios = call<AxiosInstance>(() => {\n    const instance = axios.create();\n\n    instance.interceptors.response.use((response) => {\n        response.data = camelizeKeys(response.data);\n        return response;\n    });\n\n    return instance;\n});\n\nexport default appAxios;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"UserInfoPage_container__zR63S\",\"ipAddress\":\"UserInfoPage_ipAddress__H-mdb\",\"ipAddressSkeleton\":\"UserInfoPage_ipAddressSkeleton__StKKx\",\"locationSkeleton\":\"UserInfoPage_locationSkeleton__ieFWo\",\"ipDataProviderSkeleton\":\"UserInfoPage_ipDataProviderSkeleton__8Xhe8\"};","import { UserIpInfo } from '../../../types/ipapi.co';\nimport appAxios from '../../api/appAxios';\n\nconst getUserInfo = async (): Promise<UserIpInfo> => {\n    const response = await appAxios.get<UserIpInfo>('https://ipapi.co/json/');\n    return response.data;\n};\n\nexport default getUserInfo;\n","import React, { FunctionComponent } from 'react';\r\nimport PageContainer from '../../layouts/pages/pageContainer/PageContainer';\r\nimport Text from 'antd/lib/typography/Text';\r\nimport { Button, Col, notification, Skeleton, Space, Tag, Tooltip } from 'antd';\r\nimport styles from './UserInfoPage.module.scss';\r\nimport useAsync from '../../hooks/useAsync';\r\nimport getUserInfo from '../../actions/ipapi.co/api/getUserInfo';\r\nimport getErrorMessage from '../../utils/getErrorMessage';\r\nimport ExternalLink from '../../components/ExternalLink';\r\nimport getScreenSize from '../../utils/getScreenSize';\r\nimport getScaledScreenSize from '../../utils/getScaledScreenSize';\r\nimport { ReloadOutlined } from '@ant-design/icons';\r\nimport Flex from '../../components/flex/Flex';\r\n\r\nconst UserInfoPage: FunctionComponent = () => {\r\n    const {\r\n        result: userIpInfo,\r\n        isLoading: isUserIpInfoLoading,\r\n        error: userIpInfoError,\r\n        invoke: fetchUserInfo\r\n    } = useAsync(getUserInfo, {\r\n        doInvokeOnMount: true,\r\n        onError: (error) => {\r\n            console.error(error);\r\n            notification.error({\r\n                message: 'An error occurred while getting the IP address',\r\n                description: getErrorMessage(error)\r\n            });\r\n        },\r\n        onSuccess: console.log\r\n    });\r\n\r\n    const browserLanguages = window.navigator.languages;\r\n    const realScreenSize = getScaledScreenSize();\r\n    const screenSize = getScreenSize();\r\n    const scale = window.devicePixelRatio;\r\n    const screenOrientation = window.screen.orientation.type;\r\n    const { userAgent } = navigator;\r\n\r\n    return (\r\n        <PageContainer\r\n            title={\r\n                <Flex row gap={3}>\r\n                    <div>User Info</div>\r\n                    <Button size=\"small\" type=\"link\" onClick={fetchUserInfo}>\r\n                        <ReloadOutlined />\r\n                    </Button>\r\n                </Flex>\r\n            }\r\n        >\r\n            <Col className={styles.container}>\r\n                {!userIpInfoError && (\r\n                    <Space direction=\"vertical\" className=\"mb-2\">\r\n                        {isUserIpInfoLoading ? (\r\n                            <>\r\n                                <Skeleton.Input active className={styles.ipAddressSkeleton} />\r\n                                <Skeleton.Input active className={styles.locationSkeleton} />\r\n                                <Skeleton.Input active className={styles.ipDataProviderSkeleton} />\r\n                            </>\r\n                        ) : (\r\n                            userIpInfo && (\r\n                                <>\r\n                                    <Text strong className={styles.ipAddress}>\r\n                                        <Text strong>IP: </Text>\r\n                                        <Text copyable>{userIpInfo.ip}</Text>\r\n                                    </Text>\r\n                                    <Text className=\"d-flex align-items-center\">\r\n                                        <Text strong>Location:</Text>\r\n                                        <img\r\n                                            className=\"ms-2\"\r\n                                            src={`https://purecatamphetamine.github.io/country-flag-icons/3x2/${userIpInfo.country}.svg`}\r\n                                            alt={userIpInfo.country}\r\n                                            height={12}\r\n                                            width={18}\r\n                                        />{' '}\r\n                                        {/*TODO: Extract into separate component*/}\r\n                                        <Text className=\"ms-1\">\r\n                                            {userIpInfo.countryName}, {userIpInfo.city}\r\n                                        </Text>\r\n                                    </Text>\r\n                                    <Text type=\"secondary\">\r\n                                        The data is provided by{' '}\r\n                                        <ExternalLink href=\"https://ipapi.co/\">ipapi.co</ExternalLink>\r\n                                    </Text>\r\n                                </>\r\n                            )\r\n                        )}\r\n                    </Space>\r\n                )}\r\n                <Text>\r\n                    <Text strong>Browser languages:</Text>\r\n                    <Text className=\"ms-2\">\r\n                        {browserLanguages.map((language, index) =>\r\n                            index === 0 ? (\r\n                                <Tooltip title=\"Your primary language\" placement=\"bottom\" key={index}>\r\n                                    <Tag color=\"gold\">{language}</Tag>\r\n                                </Tooltip>\r\n                            ) : (\r\n                                <Tag color=\"default\" key={index}>\r\n                                    {language}\r\n                                </Tag>\r\n                            )\r\n                        )}\r\n                    </Text>\r\n                </Text>\r\n                <Text>\r\n                    <Text strong>Screen size:</Text>\r\n                    <Text className=\"ms-2\">\r\n                        {realScreenSize.width}x{realScreenSize.height}\r\n                    </Text>\r\n                    {scale !== 1 && (\r\n                        <Text className=\"ms-1\" type=\"secondary\">\r\n                            ({screenSize.width}x{screenSize.height} * {scale})\r\n                        </Text>\r\n                    )}\r\n                </Text>\r\n                <Text>\r\n                    <Text strong>Pixel ratio:</Text>\r\n                    <Text className=\"ms-2\">{scale}</Text>\r\n                </Text>\r\n                <Text>\r\n                    <Text strong>Orientation:</Text>\r\n                    <Text className=\"ms-2\">{screenOrientation}</Text>\r\n                </Text>\r\n                <Text>\r\n                    <Text strong>User Agent:</Text>\r\n                    <Text className=\"ms-2\">{userAgent}</Text>\r\n                </Text>\r\n            </Col>\r\n        </PageContainer>\r\n    );\r\n};\r\n\r\nexport default UserInfoPage;\r\n","const getErrorMessage = (error: any) => {\n    return error instanceof Error ? error.message : String(error);\n};\n\nexport default getErrorMessage;\n","import { Size } from '../types';\nimport { round } from 'lodash';\n\nconst getScaledScreenSize = (): Size => {\n    const { devicePixelRatio } = window;\n    const { width, height } = window.screen;\n\n    return {\n        width: round(width * devicePixelRatio),\n        height: round(height * devicePixelRatio)\n    };\n};\n\nexport default getScaledScreenSize;\n","import { Size } from '../types';\nimport { pick } from 'lodash';\n\nconst getScreenSize = (): Size => pick(window.screen, ['width', 'height']);\n\nexport default getScreenSize;\n"],"names":["camelizeKeys","obj","Array","isArray","map","v","isNil","constructor","Object","keys","reduce","result","key","camelCase","call","instance","axios","interceptors","response","use","data","getUserInfo","appAxios","useAsync","doInvokeOnMount","onError","error","console","notification","message","description","getErrorMessage","onSuccess","log","userIpInfo","isUserIpInfoLoading","isLoading","userIpInfoError","fetchUserInfo","invoke","browserLanguages","window","navigator","languages","realScreenSize","getScaledScreenSize","screenSize","getScreenSize","scale","devicePixelRatio","screenOrientation","screen","orientation","type","userAgent","title","row","gap","size","onClick","className","styles","direction","active","strong","copyable","ip","src","country","alt","height","width","countryName","city","href","language","index","placement","color","Error","String","round","pick"],"sourceRoot":""}