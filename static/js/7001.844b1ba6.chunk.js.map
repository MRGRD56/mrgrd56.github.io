{"version":3,"file":"static/js/7001.844b1ba6.chunk.js","mappings":"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","sources":["hooks/useAutoRef.ts","hooks/debouncedMemo.ts","layouts/pages/pageContainer/PageContainer.tsx","webpack://mrgrd56.github.io/./src/layouts/pages/pageContainer/PageContainer.module.scss?0d25","webpack://mrgrd56.github.io/./src/pages/bgGeneratorPage/BgGeneratorPage.module.scss?56cf","utils/stringifySize.ts","utils/getWindowSize.ts","pages/bgGeneratorPage/BgGeneratorPage.tsx","utils/getScaledScreenSize.ts","utils/getScreenSize.ts"],"sourcesContent":["import { MutableRefObject, useEffect, useRef } from 'react';\n\nconst useAutoRef = <T>(value: T): Readonly<MutableRefObject<T>> => {\n    const valueRef = useRef<T>(value);\n\n    useEffect(() => {\n        valueRef.current = value;\n    }, [value]);\n\n    return valueRef;\n};\n\nexport default useAutoRef;\n","import { DependencyList, useEffect, useRef, useState } from 'react';\nimport { debounce, isObject, throttle } from 'lodash';\nimport { v4 } from 'uuid';\nimport call from '../utils/call';\nimport useAutoRef from './useAutoRef';\n\ninterface NoResult {\n    readonly _noResult: string;\n}\n\nconst isNoResult = <T>(value: T | NoResult, noResult: NoResult): value is NoResult => {\n    return isObject(value) && '_noResult' in value && value === noResult; //TODO just value === noResult ?\n};\n\ntype MemoFactory<R> = (noResult: NoResult) => R | NoResult;\n\nconst createDebouncedMemoHook =\n    (debounceFn: typeof debounce) =>\n    <R>(factory: MemoFactory<R>, deps: DependencyList | undefined, wait?: number) => {\n        const [value, setValue] = useState<R>();\n        const factoryRef = useAutoRef(factory);\n\n        const debounceFunction = useRef(\n            call(() => {\n                const actualNoResult: NoResult = Object.freeze({\n                    _noResult: v4()\n                });\n\n                return debounceFn(() => {\n                    const value = factoryRef.current(actualNoResult);\n\n                    if (!isNoResult(value, actualNoResult)) {\n                        setValue(value);\n                    }\n                }, wait);\n            })\n        ).current;\n\n        useEffect(() => {\n            debounceFunction();\n        }, deps);\n\n        return value;\n    };\n\nexport const useDebouncedMemo = createDebouncedMemoHook(debounce);\nexport const useThrottledMemo = createDebouncedMemoHook(throttle);\n\n// const useDebouncedMemo = <T>(factory: () => T, deps: DependencyList | undefined, wait?: number) => {\n//     const [value, setValue] = useState<T>();\n//\n//     const timeoutRef = useRef<NodeJS.Timeout>();\n//\n//\n// };\n","import React, { ReactNode, useMemo } from 'react';\nimport styles from './PageContainer.module.scss';\nimport { Space, SpaceProps, Tag } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport { ClockCircleOutlined, WarningOutlined } from '@ant-design/icons';\nimport classNames from 'classnames';\n\nexport enum PageTag {\n    WIP = 'WIP',\n    NOT_WORKING = 'NOT_WORKING'\n}\n\nexport interface PageContainerProps extends Omit<SpaceProps, 'title'> {\n    contentClassName?: string;\n    title?: ReactNode;\n    description?: ReactNode;\n    titleExtra?: ReactNode;\n    tags?: PageTag[];\n    noPadding?: boolean;\n    noContentPadding?: boolean;\n}\n\nconst getTagNodes = (key: number | string): Readonly<Record<PageTag, ReactNode>> => ({\n    [PageTag.WIP]: (\n        <Tag color=\"blue\" icon={<ClockCircleOutlined />} key={key}>\n            Work In Progress\n        </Tag>\n    ),\n    [PageTag.NOT_WORKING]: (\n        <Tag color=\"red\" icon={<WarningOutlined />} key={key}>\n            Not Working\n        </Tag>\n    )\n});\n\nconst renderTag = (tag: PageTag, index: number) => getTagNodes(index)[tag];\n\nconst PageContainer = React.forwardRef<HTMLDivElement, PageContainerProps>((props, ref) => {\n    const {\n        title,\n        description,\n        titleExtra,\n        tags,\n        noPadding,\n        noContentPadding,\n        children,\n        className,\n        contentClassName,\n        ...restProps\n    } = props;\n\n    const renderedTags = useMemo(() => tags?.map(renderTag), [tags]);\n\n    return (\n        <div\n            ref={ref}\n            className={classNames(\n                styles.container,\n                {\n                    [styles.noPadding]: noPadding,\n                    [styles.noContentPadding]: noContentPadding\n                },\n                className\n            )}\n            {...restProps}\n        >\n            {tags?.length && <div>{renderedTags}</div>}\n            {title && (\n                <Space direction=\"horizontal\" size=\"middle\" className={styles.headingContainer}>\n                    <h1 className=\"mb-0\">{title}</h1>\n                    {titleExtra}\n                </Space>\n            )}\n            {description && <Paragraph className=\"mb-2\">{description}</Paragraph>}\n\n            <div className={classNames(styles.contentContainer, contentClassName)}>{children}</div>\n        </div>\n    );\n});\n\nexport default PageContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PageContainer_container__KmrZF\",\"noPadding\":\"PageContainer_noPadding__74Oon\",\"noContentPadding\":\"PageContainer_noContentPadding__rSQgs\",\"headingContainer\":\"PageContainer_headingContainer__ScW-F\",\"contentContainer\":\"PageContainer_contentContainer__l-gCb\"};","// extracted by mini-css-extract-plugin\nexport default {\"antd-text-primary\":\"BgGeneratorPage_antd-text-primary__e4nyv\",\"resultImage\":\"BgGeneratorPage_resultImage__M-RJS\",\"sizeButtonsContainer\":\"BgGeneratorPage_sizeButtonsContainer__EJ6-H\"};","import { Size } from '../types';\n\nconst stringifySize = ({ width, height }: Size): string => `${width}x${height}`;\n\nexport default stringifySize;\n","import { Size } from '../types';\n\nconst getWindowSize = (): Size => {\n    const { innerWidth, innerHeight } = window;\n\n    return {\n        width: innerWidth,\n        height: innerHeight\n    };\n};\n\nexport default getWindowSize;\n","import React, { useCallback, useRef, useState } from 'react';\nimport styles from './BgGeneratorPage.module.scss';\nimport PageContainer from '../../layouts/pages/pageContainer/PageContainer';\nimport ExternalLink from '../../components/ExternalLink';\nimport { Button, Col, Image, InputNumber, Row, Space } from 'antd';\nimport { Size } from '../../types';\nimport getScaledScreenSize from '../../utils/getScaledScreenSize';\nimport { ColorChangeHandler, SketchPicker } from 'react-color';\nimport stringifySize from '../../utils/stringifySize';\nimport { useDebouncedMemo } from '../../hooks/debouncedMemo';\nimport getWindowSize from '../../utils/getWindowSize';\nimport getScreenSize from '../../utils/getScreenSize';\nimport './BgGeneratorPage.scss';\n\nconst generateImage = ({ width, height }: Size, color: string, imgCanvas: HTMLCanvasElement): string | undefined => {\n    if (width < 0 || height < 0) {\n        return;\n    }\n\n    const imgCanvasContext = imgCanvas.getContext('2d');\n\n    if (!imgCanvasContext) {\n        return;\n    }\n\n    imgCanvas.width = width;\n    imgCanvas.height = height;\n    imgCanvasContext.fillStyle = color;\n    imgCanvasContext.fillRect(0, 0, width, height);\n    return imgCanvas.toDataURL('image/png');\n};\n\nconst BgGeneratorPage = () => {\n    const imgCanvasRef = useRef<HTMLCanvasElement>(null);\n\n    const [size, setSize] = useState<Size>(getScaledScreenSize());\n    const [color, setColor] = useState<string>('#42a5f5');\n    const imgSource = useDebouncedMemo(\n        () => {\n            if (!imgCanvasRef.current) {\n                return;\n            }\n\n            return generateImage(size, color, imgCanvasRef.current);\n        },\n        [size, color],\n        50\n    );\n\n    const handleColorChange = useCallback<ColorChangeHandler>(({ rgb }) => {\n        const { r, g, b, a } = rgb;\n        setColor(`rgba(${r}, ${g}, ${b}, ${a})`);\n    }, []);\n\n    const handleSizeChange = useCallback(\n        (sizeKey: keyof Size) => (value: number) => {\n            setSize((currentSize) => ({\n                ...currentSize,\n                [sizeKey]: value\n            }));\n        },\n        []\n    );\n\n    const handleUseSize = (sizeFunction: () => Size) => () => {\n        setSize(sizeFunction());\n    };\n\n    return (\n        <PageContainer\n            title=\"Background Generator\"\n            description=\"Generates a simple background of the specified size and color\"\n            titleExtra={\n                <ExternalLink href=\"https://mrgrd56.github.io/bg-generator\">Check out old version</ExternalLink>\n            }\n        >\n            <canvas className=\"d-none\" ref={imgCanvasRef} />\n            <Col>\n                <Row gutter={16}>\n                    <Col className=\"mb-3\">\n                        <SketchPicker\n                            color={color}\n                            onChange={handleColorChange}\n                            className=\"BgGeneratorPage_color-picker\"\n                        />\n                    </Col>\n                    <Col className=\"mb-3\">\n                        <Space direction=\"vertical\">\n                            <Row gutter={10} align=\"middle\">\n                                <Col span={8}>\n                                    <label htmlFor=\"width-input\">Width</label>\n                                </Col>\n                                <Col>\n                                    <InputNumber\n                                        id=\"width-input\"\n                                        value={size.width}\n                                        onChange={handleSizeChange('width')}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row gutter={10} align=\"middle\">\n                                <Col span={8}>\n                                    <label htmlFor=\"height-input\">Height</label>\n                                </Col>\n                                <Col>\n                                    <InputNumber\n                                        id=\"height-input\"\n                                        value={size.height}\n                                        onChange={handleSizeChange('height')}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className={styles.sizeButtonsContainer}>\n                                <Button onClick={handleUseSize(getScaledScreenSize)}>\n                                    Use scaled screen size {stringifySize(getScaledScreenSize())}\n                                </Button>\n                                <Button onClick={handleUseSize(getScreenSize)}>\n                                    Use screen size {stringifySize(getScreenSize())}\n                                </Button>\n                                <Button onClick={handleUseSize(getWindowSize)}>\n                                    Use window size {stringifySize(getWindowSize())}\n                                </Button>\n                            </Row>\n                        </Space>\n                    </Col>\n                </Row>\n                <Col>\n                    <Image src={imgSource} className={styles.resultImage} />\n                </Col>\n            </Col>\n        </PageContainer>\n    );\n};\n\nexport default BgGeneratorPage;\n","import { Size } from '../types';\nimport { round } from 'lodash';\n\nconst getScaledScreenSize = (): Size => {\n    const { devicePixelRatio } = window;\n    const { width, height } = window.screen;\n\n    return {\n        width: round(width * devicePixelRatio),\n        height: round(height * devicePixelRatio)\n    };\n};\n\nexport default getScaledScreenSize;\n","import { Size } from '../types';\nimport { pick } from 'lodash';\n\nconst getScreenSize = (): Size => pick(window.screen, ['width', 'height']);\n\nexport default getScreenSize;\n"],"names":["value","valueRef","useRef","useEffect","current","createDebouncedMemoHook","debounceFn","factory","deps","wait","useState","setValue","factoryRef","useAutoRef","debounceFunction","call","actualNoResult","Object","freeze","_noResult","v4","noResult","isObject","isNoResult","useDebouncedMemo","debounce","throttle","PageTag","getTagNodes","key","WIP","color","icon","ClockCircleOutlined","NOT_WORKING","WarningOutlined","renderTag","tag","index","React","props","ref","title","description","titleExtra","tags","noPadding","noContentPadding","children","className","contentClassName","restProps","renderedTags","useMemo","map","classNames","styles","length","direction","size","Paragraph","width","height","window","innerWidth","innerHeight","imgCanvasRef","getScaledScreenSize","setSize","setColor","imgSource","imgCanvas","imgCanvasContext","getContext","fillStyle","fillRect","toDataURL","generateImage","handleColorChange","useCallback","rgb","r","g","b","a","handleSizeChange","sizeKey","currentSize","handleUseSize","sizeFunction","PageContainer","ExternalLink","href","gutter","onChange","align","span","htmlFor","id","onClick","stringifySize","getScreenSize","getWindowSize","src","devicePixelRatio","screen","round","pick"],"sourceRoot":""}