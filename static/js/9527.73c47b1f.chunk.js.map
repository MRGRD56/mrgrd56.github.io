{"version":3,"file":"static/js/9527.73c47b1f.chunk.js","mappings":"iKAmBA,IAPA,SAA0BA,GACtB,OAA0BC,EAAAA,EAAAA,UAAoDD,GAA9E,eAAOE,EAAP,KAAcC,EAAd,KAGA,MAAO,CAACD,EAAOC,GAFSC,EAAAA,EAAAA,GAA6BD,M,qCCFzD,IAJqC,SAAIE,GACrC,OAAOC,EAAAA,EAAAA,cANHC,EAM4CF,EALhD,SAACG,GACGD,EAASC,EAAMC,OAAOP,SAIiC,CAACG,IAN5D,IAAIE,I,6JCFR,EAA8E,sC,0CCUxEG,EAAgB,SAACC,GAAD,OAA+BC,KAAKC,UAAUF,IAC9DG,EAAkB,mCAAG,WAAOH,GAAP,0FAAqCD,EAAcC,IAAnD,2CAAH,sDA2DxB,EAzD4B,WACxB,OAAmCI,EAAAA,EAAAA,KAAnC,eAAOJ,EAAP,KAAgBK,EAAhB,KACA,GAA4Bf,EAAAA,EAAAA,YAA5B,eAAOgB,EAAP,KAAeC,EAAf,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACNL,EAAmBH,GAAOS,MAAK,SAACH,GAC5BC,EAAUD,QAEf,CAACN,KAGA,SAACU,EAAA,EAAD,CACIC,MAAM,mBACNC,aACI,0IAGI,kBAHJ,0DAOJC,YACI,SAACC,EAAA,EAAD,CAAcC,KAAK,6CAAnB,mCAXR,UAcI,UAAC,IAAD,CAAKC,OAAQ,EAAb,WACI,SAAC,IAAD,CAAKC,KA/BR,GA+BG,UACI,SAACC,EAAA,QAAD,CACIC,KAlCX,GAmCWC,YAAY,cACZC,UAAWC,EACXC,SAAUlB,EACVd,MAAOS,EACPwB,aAAa,MACbC,YAAY,MACZC,eAAe,MACfC,WAAW,aAGnB,SAAC,IAAD,CAAKV,KA5CR,GA4CG,UACI,SAACC,EAAA,QAAD,CACIC,KA/CX,GAgDWS,UAAQ,EACRR,YAAY,uBACZC,UAAWC,EACX/B,MAAOe,EACPkB,aAAa,MACbC,YAAY,MACZC,eAAe,MACfC,WAAW","sources":["hooks/useInputState.ts","hooks/useStateChangeByEventHandler.ts","webpack://mrgrd56.github.io/./src/pages/jsonStringifierPage/JsonStringifierPage.module.scss?2da5","pages/jsonStringifierPage/JsonStringifierPage.tsx"],"sourcesContent":["import React, { Dispatch, SetStateAction, useState } from 'react';\nimport useStateChangeByEventHandler from './useStateChangeByEventHandler';\n\ntype PossiblyUndefined<S, V> = V extends undefined ? S | undefined : S;\nexport type SetStateByEventAction<S> = (event: React.ChangeEvent<{ value: S }>) => void;\n\nfunction useInputState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>, SetStateByEventAction<S>];\nfunction useInputState<S = undefined>(): [\n    S | undefined,\n    Dispatch<SetStateAction<S | undefined>>,\n    SetStateByEventAction<S | undefined>\n];\nfunction useInputState<S>(initialState?: S | (() => S)) {\n    const [value, setValue] = useState<PossiblyUndefined<S, typeof initialState>>(initialState);\n    const setValueByEvent = useStateChangeByEventHandler(setValue);\n\n    return [value, setValue, setValueByEvent];\n}\n\nexport default useInputState;\n","import React, { Dispatch, SetStateAction, useCallback } from 'react';\n\nexport const handleEventTargetValueChange =\n    <S>(callback: (value: S) => void) =>\n    (event: React.ChangeEvent<{ value: S }>) => {\n        callback(event.target.value);\n    };\n\nconst useStateChangeByEventHandler = <S>(setState: Dispatch<SetStateAction<S>>) => {\n    return useCallback(handleEventTargetValueChange(setState), [setState]);\n};\n\nexport default useStateChangeByEventHandler;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"JsonStringifierPage_container__5Yeeh\",\"textarea\":\"JsonStringifierPage_textarea__t44ql\"};","import React, { useEffect, useState } from 'react';\nimport { Col, Row } from 'antd';\nimport TextArea from 'antd/lib/input/TextArea';\nimport styles from './JsonStringifierPage.module.scss';\nimport useInputState from '../../hooks/useInputState';\nimport ExternalLink from '../../components/ExternalLink';\nimport PageContainer from '../../layouts/pages/pageContainer/PageContainer';\n\nconst rows = 16;\nconst span = 12;\n\nconst computeResult = (input: string | undefined) => JSON.stringify(input);\nconst computeResultAsync = async (input: string | undefined) => computeResult(input);\n\nconst JsonStringifierPage = () => {\n    const [input, , setInputByEvent] = useInputState<string>();\n    const [output, setOutput] = useState<string>();\n\n    useEffect(() => {\n        computeResultAsync(input).then((output) => {\n            setOutput(output);\n        });\n    }, [input]);\n\n    return (\n        <PageContainer\n            title=\"JSON Stringifier\"\n            description={\n                <>\n                    Converts your input to a JSON string. May be useful if you want to put some text in a JSON as a\n                    value.\n                    <br />\n                    Just paste your text in the input field on the left.\n                </>\n            }\n            titleExtra={\n                <ExternalLink href=\"https://mrgrd56.github.io/json-stringifier\">Check out old version</ExternalLink>\n            }\n        >\n            <Row gutter={8}>\n                <Col span={span}>\n                    <TextArea\n                        rows={rows}\n                        placeholder=\"Source text\"\n                        className={styles.textarea}\n                        onChange={setInputByEvent}\n                        value={input}\n                        autoComplete=\"off\"\n                        autoCorrect=\"off\"\n                        autoCapitalize=\"off\"\n                        spellCheck=\"false\"\n                    />\n                </Col>\n                <Col span={span}>\n                    <TextArea\n                        rows={rows}\n                        readOnly\n                        placeholder=\"Result (JSON string)\"\n                        className={styles.textarea}\n                        value={output}\n                        autoComplete=\"off\"\n                        autoCorrect=\"off\"\n                        autoCapitalize=\"off\"\n                        spellCheck=\"false\"\n                    />\n                </Col>\n            </Row>\n        </PageContainer>\n    );\n};\n\nexport default JsonStringifierPage;\n"],"names":["initialState","useState","value","setValue","useStateChangeByEventHandler","setState","useCallback","callback","event","target","computeResult","input","JSON","stringify","computeResultAsync","useInputState","setInputByEvent","output","setOutput","useEffect","then","PageContainer","title","description","titleExtra","ExternalLink","href","gutter","span","TextArea","rows","placeholder","className","styles","onChange","autoComplete","autoCorrect","autoCapitalize","spellCheck","readOnly"],"sourceRoot":""}